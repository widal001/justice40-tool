(self.webpackChunkjustice40_tool=self.webpackChunkjustice40_tool||[]).push([[98],{3022:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Il": function() { return /* binding */ Color; },\n/* harmony export */   "eG": function() { return /* binding */ derefLayers; },\n/* harmony export */   "th": function() { return /* binding */ expression$1; },\n/* harmony export */   "TE": function() { return /* binding */ createFilter; },\n/* harmony export */   "ZI": function() { return /* binding */ styleFunction; },\n/* harmony export */   "pA": function() { return /* binding */ v8; }\n/* harmony export */ });\n/* unused harmony exports ParsingError, ValidationError, composite, convertFilter, diff, format, migrate, v8, validate, validateMapboxApiSupported, visit */\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9809);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5061);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8481);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5991);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6610);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(379);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6616);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7608);\n/* harmony import */ var _home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5366);\n\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar $version = 8;\nvar $root = {\n  version: {\n    required: true,\n    type: "enum",\n    values: [8],\n    doc: "Style specification version number. Must be 8.",\n    example: 8\n  },\n  name: {\n    type: "string",\n    doc: "A human-readable name for the style.",\n    example: "Bright"\n  },\n  metadata: {\n    type: "*",\n    doc: "Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like \'mapbox:\'."\n  },\n  center: {\n    type: "array",\n    value: "number",\n    doc: "Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",\n    example: [-73.9749, 40.7736]\n  },\n  zoom: {\n    type: "number",\n    doc: "Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",\n    example: 12.5\n  },\n  bearing: {\n    type: "number",\n    "default": 0,\n    period: 360,\n    units: "degrees",\n    doc: "Default bearing, in degrees. The bearing is the compass direction that is \\"up\\"; for example, a bearing of 90Â° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",\n    example: 29\n  },\n  pitch: {\n    type: "number",\n    "default": 0,\n    units: "degrees",\n    doc: "Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",\n    example: 50\n  },\n  light: {\n    type: "light",\n    doc: "The global light source.",\n    example: {\n      anchor: "viewport",\n      color: "white",\n      intensity: 0.4\n    }\n  },\n  terrain: {\n    type: "terrain",\n    doc: "A global modifier that elevates layers and markers based on a DEM data source."\n  },\n  fog: {\n    type: "fog",\n    doc: "A global effect that fades layers and markers based on their distance to the camera. The fog can be used to approximate the effect of atmosphere on distant objects and enhance the depth perception of the map when used with terrain or 3D features."\n  },\n  sources: {\n    required: true,\n    type: "sources",\n    doc: "Data source specifications.",\n    example: {\n      "mapbox-streets": {\n        type: "vector",\n        url: "mapbox://mapbox.mapbox-streets-v6"\n      }\n    }\n  },\n  sprite: {\n    type: "string",\n    doc: "A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",\n    example: "mapbox://sprites/mapbox/bright-v8"\n  },\n  glyphs: {\n    type: "string",\n    doc: "A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",\n    example: "mapbox://fonts/mapbox/{fontstack}/{range}.pbf"\n  },\n  transition: {\n    type: "transition",\n    doc: "A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style\'s `transition` property.",\n    example: {\n      duration: 300,\n      delay: 0\n    }\n  },\n  layers: {\n    required: true,\n    type: "array",\n    value: "layer",\n    doc: "Layers will be drawn in the order of this array.",\n    example: [{\n      id: "water",\n      source: "mapbox-streets",\n      "source-layer": "water",\n      type: "fill",\n      paint: {\n        "fill-color": "#00ffff"\n      }\n    }]\n  }\n};\nvar sources = {\n  "*": {\n    type: "source",\n    doc: "Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."\n  }\n};\nvar source = ["source_vector", "source_raster", "source_raster_dem", "source_geojson", "source_video", "source_image"];\nvar source_vector = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      vector: {\n        doc: "A vector tile source."\n      }\n    },\n    doc: "The type of the source."\n  },\n  url: {\n    type: "string",\n    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."\n  },\n  tiles: {\n    type: "array",\n    value: "string",\n    doc: "An array of one or more tile source URLs, as in the TileJSON spec."\n  },\n  bounds: {\n    type: "array",\n    value: "number",\n    length: 4,\n    "default": [-180, -85.051129, 180, 85.051129],\n    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."\n  },\n  scheme: {\n    type: "enum",\n    values: {\n      xyz: {\n        doc: "Slippy map tilenames scheme."\n      },\n      tms: {\n        doc: "OSGeo spec scheme."\n      }\n    },\n    "default": "xyz",\n    doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."\n  },\n  minzoom: {\n    type: "number",\n    "default": 0,\n    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."\n  },\n  maxzoom: {\n    type: "number",\n    "default": 22,\n    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."\n  },\n  attribution: {\n    type: "string",\n    doc: "Contains an attribution to be displayed when the map is shown to a user."\n  },\n  promoteId: {\n    type: "promoteId",\n    doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers."\n  },\n  volatile: {\n    type: "boolean",\n    "default": false,\n    doc: "A setting to determine whether a source\'s tiles are cached locally.",\n    "sdk-support": {\n      "basic functionality": {\n        android: "9.3.0",\n        ios: "5.10.0"\n      }\n    }\n  },\n  "*": {\n    type: "*",\n    doc: "Other keys to configure the data source."\n  }\n};\nvar source_raster = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      raster: {\n        doc: "A raster tile source."\n      }\n    },\n    doc: "The type of the source."\n  },\n  url: {\n    type: "string",\n    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."\n  },\n  tiles: {\n    type: "array",\n    value: "string",\n    doc: "An array of one or more tile source URLs, as in the TileJSON spec."\n  },\n  bounds: {\n    type: "array",\n    value: "number",\n    length: 4,\n    "default": [-180, -85.051129, 180, 85.051129],\n    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."\n  },\n  minzoom: {\n    type: "number",\n    "default": 0,\n    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."\n  },\n  maxzoom: {\n    type: "number",\n    "default": 22,\n    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."\n  },\n  tileSize: {\n    type: "number",\n    "default": 512,\n    units: "pixels",\n    doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."\n  },\n  scheme: {\n    type: "enum",\n    values: {\n      xyz: {\n        doc: "Slippy map tilenames scheme."\n      },\n      tms: {\n        doc: "OSGeo spec scheme."\n      }\n    },\n    "default": "xyz",\n    doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."\n  },\n  attribution: {\n    type: "string",\n    doc: "Contains an attribution to be displayed when the map is shown to a user."\n  },\n  volatile: {\n    type: "boolean",\n    "default": false,\n    doc: "A setting to determine whether a source\'s tiles are cached locally.",\n    "sdk-support": {\n      "basic functionality": {\n        android: "9.3.0",\n        ios: "5.10.0"\n      }\n    }\n  },\n  "*": {\n    type: "*",\n    doc: "Other keys to configure the data source."\n  }\n};\nvar source_raster_dem = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      "raster-dem": {\n        doc: "A RGB-encoded raster DEM source"\n      }\n    },\n    doc: "The type of the source."\n  },\n  url: {\n    type: "string",\n    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."\n  },\n  tiles: {\n    type: "array",\n    value: "string",\n    doc: "An array of one or more tile source URLs, as in the TileJSON spec."\n  },\n  bounds: {\n    type: "array",\n    value: "number",\n    length: 4,\n    "default": [-180, -85.051129, 180, 85.051129],\n    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source\'s bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."\n  },\n  minzoom: {\n    type: "number",\n    "default": 0,\n    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."\n  },\n  maxzoom: {\n    type: "number",\n    "default": 22,\n    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."\n  },\n  tileSize: {\n    type: "number",\n    "default": 512,\n    units: "pixels",\n    doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."\n  },\n  attribution: {\n    type: "string",\n    doc: "Contains an attribution to be displayed when the map is shown to a user."\n  },\n  encoding: {\n    type: "enum",\n    values: {\n      terrarium: {\n        doc: "Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."\n      },\n      mapbox: {\n        doc: "Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."\n      }\n    },\n    "default": "mapbox",\n    doc: "The encoding used by this source. Mapbox Terrain RGB is used by default"\n  },\n  volatile: {\n    type: "boolean",\n    "default": false,\n    doc: "A setting to determine whether a source\'s tiles are cached locally.",\n    "sdk-support": {\n      "basic functionality": {\n        android: "9.3.0",\n        ios: "5.10.0"\n      }\n    }\n  },\n  "*": {\n    type: "*",\n    doc: "Other keys to configure the data source."\n  }\n};\nvar source_geojson = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      geojson: {\n        doc: "A GeoJSON data source."\n      }\n    },\n    doc: "The data type of the GeoJSON source."\n  },\n  data: {\n    type: "*",\n    doc: "A URL to a GeoJSON file, or inline GeoJSON."\n  },\n  maxzoom: {\n    type: "number",\n    "default": 18,\n    doc: "Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."\n  },\n  attribution: {\n    type: "string",\n    doc: "Contains an attribution to be displayed when the map is shown to a user."\n  },\n  buffer: {\n    type: "number",\n    "default": 128,\n    maximum: 512,\n    minimum: 0,\n    doc: "Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."\n  },\n  filter: {\n    type: "*",\n    doc: "An expression for filtering features prior to processing them for rendering."\n  },\n  tolerance: {\n    type: "number",\n    "default": 0.375,\n    doc: "Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."\n  },\n  cluster: {\n    type: "boolean",\n    "default": false,\n    doc: "If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\\n * `cluster` Is `true` if the point is a cluster \\n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\\n * `point_count` Number of original points grouped into this cluster\\n * `point_count_abbreviated` An abbreviated point count"\n  },\n  clusterRadius: {\n    type: "number",\n    "default": 50,\n    minimum: 0,\n    doc: "Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."\n  },\n  clusterMaxZoom: {\n    type: "number",\n    doc: "Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."\n  },\n  clusterMinPoints: {\n    type: "number",\n    doc: "Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."\n  },\n  clusterProperties: {\n    type: "*",\n    doc: "An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{\\"property_name\\": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `\\"+\\"` or `\\"max\\"`) â it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\\n\\nExample: `{\\"sum\\": [\\"+\\", [\\"get\\", \\"scalerank\\"]]}`.\\n\\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `[\\"accumulated\\"]` value, e.g.:\\n`{\\"sum\\": [[\\"+\\", [\\"accumulated\\"], [\\"get\\", \\"sum\\"]], [\\"get\\", \\"scalerank\\"]]}`"\n  },\n  lineMetrics: {\n    type: "boolean",\n    "default": false,\n    doc: "Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."\n  },\n  generateId: {\n    type: "boolean",\n    "default": false,\n    doc: "Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."\n  },\n  promoteId: {\n    type: "promoteId",\n    doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."\n  }\n};\nvar source_video = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      video: {\n        doc: "A video data source."\n      }\n    },\n    doc: "The data type of the video source."\n  },\n  urls: {\n    required: true,\n    type: "array",\n    value: "string",\n    doc: "URLs to video content in order of preferred format."\n  },\n  coordinates: {\n    required: true,\n    doc: "Corners of video specified in longitude, latitude pairs.",\n    type: "array",\n    length: 4,\n    value: {\n      type: "array",\n      length: 2,\n      value: "number",\n      doc: "A single longitude, latitude pair."\n    }\n  }\n};\nvar source_image = {\n  type: {\n    required: true,\n    type: "enum",\n    values: {\n      image: {\n        doc: "An image data source."\n      }\n    },\n    doc: "The data type of the image source."\n  },\n  url: {\n    required: true,\n    type: "string",\n    doc: "URL that points to an image."\n  },\n  coordinates: {\n    required: true,\n    doc: "Corners of image specified in longitude, latitude pairs.",\n    type: "array",\n    length: 4,\n    value: {\n      type: "array",\n      length: 2,\n      value: "number",\n      doc: "A single longitude, latitude pair."\n    }\n  }\n};\nvar layer = {\n  id: {\n    type: "string",\n    doc: "Unique layer name.",\n    required: true\n  },\n  type: {\n    type: "enum",\n    values: {\n      fill: {\n        doc: "A filled polygon with an optional stroked border.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      line: {\n        doc: "A stroked line.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      symbol: {\n        doc: "An icon or a text label.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      circle: {\n        doc: "A filled circle.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      heatmap: {\n        doc: "A heatmap.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.41.0",\n            android: "6.0.0",\n            ios: "4.0.0",\n            macos: "0.7.0"\n          }\n        }\n      },\n      "fill-extrusion": {\n        doc: "An extruded (3D) polygon.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.27.0",\n            android: "5.1.0",\n            ios: "3.6.0",\n            macos: "0.5.0"\n          }\n        }\n      },\n      raster: {\n        doc: "Raster map textures such as satellite imagery.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      hillshade: {\n        doc: "Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.43.0",\n            android: "6.0.0",\n            ios: "4.0.0",\n            macos: "0.7.0"\n          }\n        }\n      },\n      background: {\n        doc: "The background color or pattern of the map.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "0.10.0",\n            android: "2.0.1",\n            ios: "2.0.0",\n            macos: "0.1.0"\n          }\n        }\n      },\n      sky: {\n        doc: "A spherical dome around the map that is always rendered behind all other layers.",\n        "sdk-support": {\n          "basic functionality": {\n            js: "2.0.0"\n          }\n        }\n      }\n    },\n    doc: "Rendering type of this layer.",\n    required: true\n  },\n  metadata: {\n    type: "*",\n    doc: "Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like \'mapbox:\'."\n  },\n  source: {\n    type: "string",\n    doc: "Name of a source description to be used for this layer. Required for all layer types except `background`."\n  },\n  "source-layer": {\n    type: "string",\n    doc: "Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."\n  },\n  minzoom: {\n    type: "number",\n    minimum: 0,\n    maximum: 24,\n    doc: "The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."\n  },\n  maxzoom: {\n    type: "number",\n    minimum: 0,\n    maximum: 24,\n    doc: "The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."\n  },\n  filter: {\n    type: "filter",\n    doc: "A expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `feature-state` expression is not supported in filter expressions."\n  },\n  layout: {\n    type: "layout",\n    doc: "Layout properties for the layer."\n  },\n  paint: {\n    type: "paint",\n    doc: "Default paint properties for this layer."\n  }\n};\nvar layout = ["layout_fill", "layout_line", "layout_circle", "layout_heatmap", "layout_fill-extrusion", "layout_symbol", "layout_raster", "layout_hillshade", "layout_background", "layout_sky"];\nvar layout_background = {\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_sky = {\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_fill = {\n  "fill-sort-key": {\n    type: "number",\n    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "1.2.0",\n        android: "9.1.0",\n        ios: "5.8.0",\n        macos: "0.15.0"\n      },\n      "data-driven styling": {\n        js: "1.2.0",\n        android: "9.1.0",\n        ios: "5.8.0",\n        macos: "0.15.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_circle = {\n  "circle-sort-key": {\n    type: "number",\n    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "1.2.0",\n        android: "9.2.0",\n        ios: "5.9.0",\n        macos: "0.16.0"\n      },\n      "data-driven styling": {\n        js: "1.2.0",\n        android: "9.2.0",\n        ios: "5.9.0",\n        macos: "0.16.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_heatmap = {\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_line = {\n  "line-cap": {\n    type: "enum",\n    values: {\n      butt: {\n        doc: "A cap with a squared-off end which is drawn to the exact endpoint of the line."\n      },\n      round: {\n        doc: "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line\'s width and centered on the endpoint of the line."\n      },\n      square: {\n        doc: "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line\'s width."\n      }\n    },\n    "default": "butt",\n    doc: "The display of line endings.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "2.3.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-join": {\n    type: "enum",\n    values: {\n      bevel: {\n        doc: "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line\'s width."\n      },\n      round: {\n        doc: "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line\'s width and centered on the endpoint of the line."\n      },\n      miter: {\n        doc: "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."\n      }\n    },\n    "default": "miter",\n    doc: "The display of lines when joining.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.40.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-miter-limit": {\n    type: "number",\n    "default": 2,\n    doc: "Used to automatically convert miter joins to bevel joins for sharp angles.",\n    requires: [{\n      "line-join": "miter"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "line-round-limit": {\n    type: "number",\n    "default": 1.05,\n    doc: "Used to automatically convert round joins to miter joins for shallow angles.",\n    requires: [{\n      "line-join": "round"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "line-sort-key": {\n    type: "number",\n    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "1.2.0",\n        android: "9.1.0",\n        ios: "5.8.0",\n        macos: "0.15.0"\n      },\n      "data-driven styling": {\n        js: "1.2.0",\n        android: "9.1.0",\n        ios: "5.8.0",\n        macos: "0.15.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_symbol = {\n  "symbol-placement": {\n    type: "enum",\n    values: {\n      point: {\n        doc: "The label is placed at the point where the geometry is located."\n      },\n      line: {\n        doc: "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."\n      },\n      "line-center": {\n        doc: "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."\n      }\n    },\n    "default": "point",\n    doc: "Label placement relative to its geometry.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "`line-center` value": {\n        js: "0.47.0",\n        android: "6.4.0",\n        ios: "4.3.0",\n        macos: "0.10.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "symbol-spacing": {\n    type: "number",\n    "default": 250,\n    minimum: 1,\n    units: "pixels",\n    doc: "Distance between two symbol anchors.",\n    requires: [{\n      "symbol-placement": "line"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "symbol-avoid-edges": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don\'t have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "symbol-sort-key": {\n    type: "number",\n    doc: "Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.53.0",\n        android: "7.4.0",\n        ios: "4.11.0",\n        macos: "0.14.0"\n      },\n      "data-driven styling": {\n        js: "0.53.0",\n        android: "7.4.0",\n        ios: "4.11.0",\n        macos: "0.14.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "symbol-z-order": {\n    type: "enum",\n    values: {\n      auto: {\n        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."\n      },\n      "viewport-y": {\n        doc: "Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."\n      },\n      source: {\n        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."\n      }\n    },\n    "default": "auto",\n    doc: "Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.49.0",\n        android: "6.6.0",\n        ios: "4.5.0",\n        macos: "0.12.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-allow-overlap": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, the icon will be visible even if it collides with other previously drawn symbols.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-ignore-placement": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, other symbols can be visible even if they collide with the icon.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-optional": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",\n    requires: ["icon-image", "text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-rotation-alignment": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."\n      },\n      viewport: {\n        doc: "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."\n      },\n      auto: {\n        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."\n      }\n    },\n    "default": "auto",\n    doc: "In combination with `symbol-placement`, determines the rotation behavior of icons.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "`auto` value": {\n        js: "0.25.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.3.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-size": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    units: "factor of the original icon size",\n    doc: "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.35.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-text-fit": {\n    type: "enum",\n    values: {\n      none: {\n        doc: "The icon is displayed at its intrinsic aspect ratio."\n      },\n      width: {\n        doc: "The icon is scaled in the x-dimension to fit the width of the text."\n      },\n      height: {\n        doc: "The icon is scaled in the y-dimension to fit the height of the text."\n      },\n      both: {\n        doc: "The icon is scaled in both x- and y-dimensions."\n      }\n    },\n    "default": "none",\n    doc: "Scales the icon to fit around the associated text.",\n    requires: ["icon-image", "text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.21.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.2.1"\n      },\n      "stretchable icons": {\n        js: "1.6.0",\n        android: "9.2.0",\n        ios: "5.8.0",\n        macos: "0.15.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-text-fit-padding": {\n    type: "array",\n    value: "number",\n    length: 4,\n    "default": [0, 0, 0, 0],\n    units: "pixels",\n    doc: "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",\n    requires: ["icon-image", "text-field", {\n      "icon-text-fit": ["both", "width", "height"]\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.21.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.2.1"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-image": {\n    type: "resolvedImage",\n    doc: "Name of image in sprite to use for drawing an image background.",\n    tokens: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.35.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-rotate": {\n    type: "number",\n    "default": 0,\n    period: 360,\n    units: "degrees",\n    doc: "Rotates the icon clockwise.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.21.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-padding": {\n    type: "number",\n    "default": 2,\n    minimum: 0,\n    units: "pixels",\n    doc: "Size of the additional area around the icon bounding box used for detecting symbol collisions.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-keep-upright": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, the icon may be flipped to prevent it from being rendered upside-down.",\n    requires: ["icon-image", {\n      "icon-rotation-alignment": "map"\n    }, {\n      "symbol-placement": ["line", "line-center"]\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-offset": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    doc: "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-anchor": {\n    type: "enum",\n    values: {\n      center: {\n        doc: "The center of the icon is placed closest to the anchor."\n      },\n      left: {\n        doc: "The left side of the icon is placed closest to the anchor."\n      },\n      right: {\n        doc: "The right side of the icon is placed closest to the anchor."\n      },\n      top: {\n        doc: "The top of the icon is placed closest to the anchor."\n      },\n      bottom: {\n        doc: "The bottom of the icon is placed closest to the anchor."\n      },\n      "top-left": {\n        doc: "The top left corner of the icon is placed closest to the anchor."\n      },\n      "top-right": {\n        doc: "The top right corner of the icon is placed closest to the anchor."\n      },\n      "bottom-left": {\n        doc: "The bottom left corner of the icon is placed closest to the anchor."\n      },\n      "bottom-right": {\n        doc: "The bottom right corner of the icon is placed closest to the anchor."\n      }\n    },\n    "default": "center",\n    doc: "Part of the icon placed closest to the anchor.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.40.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      },\n      "data-driven styling": {\n        js: "0.40.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-pitch-alignment": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The icon is aligned to the plane of the map."\n      },\n      viewport: {\n        doc: "The icon is aligned to the plane of the viewport."\n      },\n      auto: {\n        doc: "Automatically matches the value of `icon-rotation-alignment`."\n      }\n    },\n    "default": "auto",\n    doc: "Orientation of icon when map is pitched.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.39.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-pitch-alignment": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The text is aligned to the plane of the map."\n      },\n      viewport: {\n        doc: "The text is aligned to the plane of the viewport."\n      },\n      auto: {\n        doc: "Automatically matches the value of `text-rotation-alignment`."\n      }\n    },\n    "default": "auto",\n    doc: "Orientation of text when map is pitched.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.21.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.2.1"\n      },\n      "`auto` value": {\n        js: "0.25.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.3.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-rotation-alignment": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."\n      },\n      viewport: {\n        doc: "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."\n      },\n      auto: {\n        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."\n      }\n    },\n    "default": "auto",\n    doc: "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "`auto` value": {\n        js: "0.25.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.3.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-field": {\n    type: "formatted",\n    "default": "",\n    tokens: true,\n    doc: "Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-font": {\n    type: "array",\n    value: "string",\n    "default": ["Open Sans Regular", "Arial Unicode MS Regular"],\n    doc: "Font stack to use for displaying text.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-size": {\n    type: "number",\n    "default": 16,\n    minimum: 0,\n    units: "pixels",\n    doc: "Font size.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.35.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-max-width": {\n    type: "number",\n    "default": 10,\n    minimum: 0,\n    units: "ems",\n    doc: "The maximum line width for text wrapping.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.40.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-line-height": {\n    type: "number",\n    "default": 1.2,\n    units: "ems",\n    doc: "Text leading value for multi-line text.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "2.3.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-letter-spacing": {\n    type: "number",\n    "default": 0,\n    units: "ems",\n    doc: "Text tracking amount.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.40.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-justify": {\n    type: "enum",\n    values: {\n      auto: {\n        doc: "The text is aligned towards the anchor position."\n      },\n      left: {\n        doc: "The text is aligned to the left."\n      },\n      center: {\n        doc: "The text is centered."\n      },\n      right: {\n        doc: "The text is aligned to the right."\n      }\n    },\n    "default": "center",\n    doc: "Text justification options.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.39.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      },\n      auto: {\n        js: "0.54.0",\n        android: "7.4.0",\n        ios: "4.10.0",\n        macos: "0.14.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-radial-offset": {\n    type: "number",\n    units: "ems",\n    "default": 0,\n    doc: "Radial offset of text, in the direction of the symbol\'s anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.54.0",\n        android: "7.4.0",\n        ios: "4.10.0",\n        macos: "0.14.0"\n      },\n      "data-driven styling": {\n        js: "0.54.0",\n        android: "7.4.0",\n        ios: "4.10.0",\n        macos: "0.14.0"\n      }\n    },\n    requires: ["text-field"],\n    "property-type": "data-driven",\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    }\n  },\n  "text-variable-anchor": {\n    type: "array",\n    value: "enum",\n    values: {\n      center: {\n        doc: "The center of the text is placed closest to the anchor."\n      },\n      left: {\n        doc: "The left side of the text is placed closest to the anchor."\n      },\n      right: {\n        doc: "The right side of the text is placed closest to the anchor."\n      },\n      top: {\n        doc: "The top of the text is placed closest to the anchor."\n      },\n      bottom: {\n        doc: "The bottom of the text is placed closest to the anchor."\n      },\n      "top-left": {\n        doc: "The top left corner of the text is placed closest to the anchor."\n      },\n      "top-right": {\n        doc: "The top right corner of the text is placed closest to the anchor."\n      },\n      "bottom-left": {\n        doc: "The bottom left corner of the text is placed closest to the anchor."\n      },\n      "bottom-right": {\n        doc: "The bottom right corner of the text is placed closest to the anchor."\n      }\n    },\n    requires: ["text-field", {\n      "symbol-placement": ["point"]\n    }],\n    doc: "To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.54.0",\n        android: "7.4.0",\n        ios: "4.10.0",\n        macos: "0.14.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-anchor": {\n    type: "enum",\n    values: {\n      center: {\n        doc: "The center of the text is placed closest to the anchor."\n      },\n      left: {\n        doc: "The left side of the text is placed closest to the anchor."\n      },\n      right: {\n        doc: "The right side of the text is placed closest to the anchor."\n      },\n      top: {\n        doc: "The top of the text is placed closest to the anchor."\n      },\n      bottom: {\n        doc: "The bottom of the text is placed closest to the anchor."\n      },\n      "top-left": {\n        doc: "The top left corner of the text is placed closest to the anchor."\n      },\n      "top-right": {\n        doc: "The top right corner of the text is placed closest to the anchor."\n      },\n      "bottom-left": {\n        doc: "The bottom left corner of the text is placed closest to the anchor."\n      },\n      "bottom-right": {\n        doc: "The bottom right corner of the text is placed closest to the anchor."\n      }\n    },\n    "default": "center",\n    doc: "Part of the text placed closest to the anchor.",\n    requires: ["text-field", {\n      "!": "text-variable-anchor"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.39.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-max-angle": {\n    type: "number",\n    "default": 45,\n    units: "degrees",\n    doc: "Maximum angle change between adjacent characters.",\n    requires: ["text-field", {\n      "symbol-placement": ["line", "line-center"]\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-writing-mode": {\n    type: "array",\n    value: "enum",\n    values: {\n      horizontal: {\n        doc: "If a text\'s language supports horizontal writing mode, symbols with point placement would be laid out horizontally."\n      },\n      vertical: {\n        doc: "If a text\'s language supports vertical writing mode, symbols with point placement would be laid out vertically."\n      }\n    },\n    doc: "The property allows control over a symbol\'s orientation. Note that the property values act as a hint, so that a symbol whose language doesnât support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single \'vertical\' enum value. The order of elements in an array define priority order for the placement of an orientation variant.",\n    requires: ["text-field", {\n      "symbol-placement": ["point"]\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "1.3.0",\n        android: "8.3.0",\n        ios: "5.3.0",\n        macos: "0.15.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-rotate": {\n    type: "number",\n    "default": 0,\n    period: 360,\n    units: "degrees",\n    doc: "Rotates the text clockwise.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.35.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-padding": {\n    type: "number",\n    "default": 2,\n    minimum: 0,\n    units: "pixels",\n    doc: "Size of the additional area around the text bounding box used for detecting symbol collisions.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-keep-upright": {\n    type: "boolean",\n    "default": true,\n    doc: "If true, the text may be flipped vertically to prevent it from being rendered upside-down.",\n    requires: ["text-field", {\n      "text-rotation-alignment": "map"\n    }, {\n      "symbol-placement": ["line", "line-center"]\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-transform": {\n    type: "enum",\n    values: {\n      none: {\n        doc: "The text is not altered."\n      },\n      uppercase: {\n        doc: "Forces all letters to be displayed in uppercase."\n      },\n      lowercase: {\n        doc: "Forces all letters to be displayed in lowercase."\n      }\n    },\n    "default": "none",\n    doc: "Specifies how to capitalize text, similar to the CSS `text-transform` property.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-offset": {\n    type: "array",\n    doc: "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",\n    value: "number",\n    units: "ems",\n    length: 2,\n    "default": [0, 0],\n    requires: ["text-field", {\n      "!": "text-radial-offset"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.35.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-allow-overlap": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, the text will be visible even if it collides with other previously drawn symbols.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-ignore-placement": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, other symbols can be visible even if they collide with the text.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-optional": {\n    type: "boolean",\n    "default": false,\n    doc: "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",\n    requires: ["text-field", "icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_raster = {\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar layout_hillshade = {\n  visibility: {\n    type: "enum",\n    values: {\n      visible: {\n        doc: "The layer is shown."\n      },\n      none: {\n        doc: "The layer is not shown."\n      }\n    },\n    "default": "visible",\n    doc: "Whether this layer is displayed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    "property-type": "constant"\n  }\n};\nvar filter = {\n  type: "array",\n  value: "*",\n  doc: "A filter selects specific features from a layer."\n};\nvar filter_operator = {\n  type: "enum",\n  values: {\n    "==": {\n      doc: "`[\\"==\\", key, value]` equality: `feature[key] = value`"\n    },\n    "!=": {\n      doc: "`[\\"!=\\", key, value]` inequality: `feature[key] â  value`"\n    },\n    ">": {\n      doc: "`[\\">\\", key, value]` greater than: `feature[key] > value`"\n    },\n    ">=": {\n      doc: "`[\\">=\\", key, value]` greater than or equal: `feature[key] â¥ value`"\n    },\n    "<": {\n      doc: "`[\\"<\\", key, value]` less than: `feature[key] < value`"\n    },\n    "<=": {\n      doc: "`[\\"<=\\", key, value]` less than or equal: `feature[key] â¤ value`"\n    },\n    "in": {\n      doc: "`[\\"in\\", key, v0, ..., vn]` set inclusion: `feature[key] â {v0, ..., vn}`"\n    },\n    "!in": {\n      doc: "`[\\"!in\\", key, v0, ..., vn]` set exclusion: `feature[key] â {v0, ..., vn}`"\n    },\n    all: {\n      doc: "`[\\"all\\", f0, ..., fn]` logical `AND`: `f0 â§ ... â§ fn`"\n    },\n    any: {\n      doc: "`[\\"any\\", f0, ..., fn]` logical `OR`: `f0 â¨ ... â¨ fn`"\n    },\n    none: {\n      doc: "`[\\"none\\", f0, ..., fn]` logical `NOR`: `Â¬f0 â§ ... â§ Â¬fn`"\n    },\n    has: {\n      doc: "`[\\"has\\", key]` `feature[key]` exists"\n    },\n    "!has": {\n      doc: "`[\\"!has\\", key]` `feature[key]` does not exist"\n    },\n    within: {\n      doc: "`[\\"within\\", object]` feature geometry is within object geometry"\n    }\n  },\n  doc: "The filter operator."\n};\nvar geometry_type = {\n  type: "enum",\n  values: {\n    Point: {\n      doc: "Filter to point geometries."\n    },\n    LineString: {\n      doc: "Filter to line geometries."\n    },\n    Polygon: {\n      doc: "Filter to polygon geometries."\n    }\n  },\n  doc: "The geometry type for the filter to select."\n};\nvar function_stop = {\n  type: "array",\n  minimum: 0,\n  maximum: 24,\n  value: ["number", "color"],\n  length: 2,\n  doc: "Zoom level and value pair."\n};\nvar expression = {\n  type: "array",\n  value: "*",\n  minimum: 1,\n  doc: "An expression defines a function that can be used for data-driven style properties or feature filters."\n};\nvar expression_name = {\n  doc: "",\n  type: "enum",\n  values: {\n    "let": {\n      doc: "Binds expressions to named variables, which can then be referenced in the result expression using [\\"var\\", \\"variable_name\\"].",\n      group: "Variable binding",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "var": {\n      doc: "References variable bound using \\"let\\".",\n      group: "Variable binding",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    literal: {\n      doc: "Provides a literal array or object value.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    array: {\n      doc: "Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    at: {\n      doc: "Retrieves an item from an array.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "in": {\n      doc: "Determines whether an item exists in an array or a substring exists in a string.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "1.6.0",\n          android: "9.1.0",\n          ios: "5.8.0",\n          macos: "0.15.0"\n        }\n      }\n    },\n    "index-of": {\n      doc: "Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "1.10.0"\n        }\n      }\n    },\n    slice: {\n      doc: "Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "1.10.0"\n        }\n      }\n    },\n    "case": {\n      doc: "Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    match: {\n      doc: "Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, `[\\"get\\", \\"building_type\\"]`). Each label must be unique, and must be either:\\n - a single literal value; or\\n - an array of literal values, the values of which must be all strings or all numbers (for example `[100, 101]` or `[\\"c\\", \\"b\\"]`).\\n\\nThe input matches if any of the values in the array matches using strict equality, similar to the `\\"in\\"` operator.\\nIf the input type does not match the type of the labels, the result will be the fallback value.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    coalesce: {\n      doc: "Evaluates each expression in turn until the first non-null value is obtained, and returns that value.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    step: {\n      doc: "Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\\"stops\\"). The `input` may be any numeric expression (e.g., `[\\"get\\", \\"population\\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.",\n      group: "Ramps, scales, curves",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.42.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    interpolate: {\n      doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\\"stops\\"). The `input` may be any numeric expression (e.g., `[\\"get\\", \\"population\\"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\\n\\nInterpolation types:\\n- `[\\"linear\\"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\\n- `[\\"exponential\\", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\\n- `[\\"cubic-bezier\\", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.",\n      group: "Ramps, scales, curves",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.42.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "interpolate-hcl": {\n      doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\\"stops\\"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.",\n      group: "Ramps, scales, curves",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.49.0"\n        }\n      }\n    },\n    "interpolate-lab": {\n      doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\\"stops\\"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.",\n      group: "Ramps, scales, curves",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.49.0"\n        }\n      }\n    },\n    ln2: {\n      doc: "Returns mathematical constant ln(2).",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    pi: {\n      doc: "Returns the mathematical constant pi.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    e: {\n      doc: "Returns the mathematical constant e.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "typeof": {\n      doc: "Returns a string describing the type of the given value.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    string: {\n      doc: "Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    number: {\n      doc: "Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    boolean: {\n      doc: "Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    object: {\n      doc: "Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    collator: {\n      doc: "Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    format: {\n      doc: "Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\'image\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\\n- `\\"text-font\\"`: Overrides the font stack specified by the root layout property.\\n- `\\"text-color\\"`: Overrides the color specified by the root paint property.\\n- `\\"font-scale\\"`: Applies a scaling factor on `text-size` as specified by the root layout property.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.48.0",\n          android: "6.7.0",\n          ios: "4.6.0",\n          macos: "0.12.0"\n        },\n        "text-font": {\n          js: "0.48.0",\n          android: "6.7.0",\n          ios: "4.6.0",\n          macos: "0.12.0"\n        },\n        "font-scale": {\n          js: "0.48.0",\n          android: "6.7.0",\n          ios: "4.6.0",\n          macos: "0.12.0"\n        },\n        "text-color": {\n          js: "1.3.0",\n          android: "7.3.0",\n          ios: "4.10.0",\n          macos: "0.14.0"\n        },\n        image: {\n          js: "1.6.0",\n          android: "8.6.0",\n          ios: "5.7.0",\n          macos: "0.15.0"\n        }\n      }\n    },\n    image: {\n      doc: "Returns an `image` type for use in `icon-image`, `*-pattern` entries and as a section in the `format` expression. If set, the `image` argument will check that the requested image exists in the style and will return either the resolved image name or `null`, depending on whether or not the image is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `image` argument.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "1.4.0",\n          android: "8.6.0",\n          ios: "5.7.0",\n          macos: "0.15.0"\n        }\n      }\n    },\n    "number-format": {\n      doc: "Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.54.0"\n        }\n      }\n    },\n    "to-string": {\n      doc: "Converts the input value to a string. If the input is `null`, the result is `\\"\\"`. If the input is a boolean, the result is `\\"true\\"` or `\\"false\\"`. If the input is a number, it is converted to a string as specified by the [\\"NumberToString\\" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a color, it is converted to a string of the form `\\"rgba(r,g,b,a)\\"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "to-number": {\n      doc: "Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the [\\"ToNumber Applied to the String Type\\" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "to-boolean": {\n      doc: "Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "to-rgba": {\n      doc: "Returns a four-element array containing the input color\'s red, green, blue, and alpha components, in that order.",\n      group: "Color",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "to-color": {\n      doc: "Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",\n      group: "Types",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    rgb: {\n      doc: "Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",\n      group: "Color",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    rgba: {\n      doc: "Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",\n      group: "Color",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    get: {\n      doc: "Retrieves a property value from the current feature\'s properties, or from another object if a second argument is provided. Returns null if the requested property is missing.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    has: {\n      doc: "Tests for the presence of an property value in the current feature\'s properties, or from another object if a second argument is provided.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    length: {\n      doc: "Gets the length of an array or string.",\n      group: "Lookup",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    properties: {\n      doc: "Gets the feature properties object.  Note that in some cases, it may be more efficient to use [\\"get\\", \\"property_name\\"] directly.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "feature-state": {\n      doc: "Retrieves a property value from the current feature\'s state. Returns null if the requested property is not present on the feature\'s state. A feature\'s state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\\"feature-state\\"] can only be used with paint properties that support data-driven styling.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.46.0"\n        }\n      }\n    },\n    "geometry-type": {\n      doc: "Gets the feature\'s geometry type: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    id: {\n      doc: "Gets the feature\'s id, if it has one.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    zoom: {\n      doc: "Gets the current zoom level.  Note that in style layout and paint properties, [\\"zoom\\"] may only appear as the input to a top-level \\"step\\" or \\"interpolate\\" expression.",\n      group: "Zoom",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "heatmap-density": {\n      doc: "Gets the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",\n      group: "Heatmap",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "line-progress": {\n      doc: "Gets the progress along a gradient line. Can only be used in the `line-gradient` property.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.6.0",\n          macos: "0.12.0"\n        }\n      }\n    },\n    "sky-radial-progress": {\n      doc: "Gets the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",\n      group: "sky",\n      "sdk-support": {\n        "basic functionality": {\n          js: "2.0.0"\n        }\n      }\n    },\n    accumulated: {\n      doc: "Gets the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",\n      group: "Feature data",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.53.0"\n        }\n      }\n    },\n    "+": {\n      doc: "Returns the sum of the inputs.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "*": {\n      doc: "Returns the product of the inputs.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "-": {\n      doc: "For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "/": {\n      doc: "Returns the result of floating point division of the first input by the second.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "%": {\n      doc: "Returns the remainder after integer division of the first input by the second.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "^": {\n      doc: "Returns the result of raising the first input to the power specified by the second.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    sqrt: {\n      doc: "Returns the square root of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.42.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    log10: {\n      doc: "Returns the base-ten logarithm of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    ln: {\n      doc: "Returns the natural logarithm of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    log2: {\n      doc: "Returns the base-two logarithm of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    sin: {\n      doc: "Returns the sine of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    cos: {\n      doc: "Returns the cosine of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    tan: {\n      doc: "Returns the tangent of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    asin: {\n      doc: "Returns the arcsine of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    acos: {\n      doc: "Returns the arccosine of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    atan: {\n      doc: "Returns the arctangent of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    min: {\n      doc: "Returns the minimum value of the inputs.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    max: {\n      doc: "Returns the maximum value of the inputs.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    round: {\n      doc: "Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `[\\"round\\", -1.5]` evaluates to -2.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    abs: {\n      doc: "Returns the absolute value of the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    ceil: {\n      doc: "Returns the smallest integer that is greater than or equal to the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    floor: {\n      doc: "Returns the largest integer that is less than or equal to the input.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    distance: {\n      doc: "Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",\n      group: "Math",\n      "sdk-support": {\n        "basic functionality": {\n          android: "9.2.0",\n          ios: "5.9.0",\n          macos: "0.16.0"\n        }\n      }\n    },\n    "==": {\n      doc: "Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    "!=": {\n      doc: "Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    ">": {\n      doc: "Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    "<": {\n      doc: "Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    ">=": {\n      doc: "Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    "<=": {\n      doc: "Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        },\n        collator: {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    },\n    all: {\n      doc: "Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    any: {\n      doc: "Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "!": {\n      doc: "Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    within: {\n      doc: "Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line\'s endpoint is on the boundary.",\n      group: "Decision",\n      "sdk-support": {\n        "basic functionality": {\n          js: "1.9.0",\n          android: "9.1.0",\n          ios: "5.8.0",\n          macos: "0.15.0"\n        }\n      }\n    },\n    "is-supported-script": {\n      doc: "Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",\n      group: "String",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.6.0"\n        }\n      }\n    },\n    upcase: {\n      doc: "Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",\n      group: "String",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    downcase: {\n      doc: "Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",\n      group: "String",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    concat: {\n      doc: "Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",\n      group: "String",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.41.0",\n          android: "6.0.0",\n          ios: "4.0.0",\n          macos: "0.7.0"\n        }\n      }\n    },\n    "resolved-locale": {\n      doc: "Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",\n      group: "String",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.45.0",\n          android: "6.5.0",\n          ios: "4.2.0",\n          macos: "0.9.0"\n        }\n      }\n    }\n  }\n};\nvar fog = {\n  range: {\n    type: "array",\n    "default": [0.5, 10],\n    minimum: -20,\n    maximum: 20,\n    length: 2,\n    value: "number",\n    "property-type": "data-constant",\n    transition: true,\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    doc: "The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",\n    example: [0.5, 10],\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.3.0"\n      }\n    }\n  },\n  color: {\n    type: "color",\n    "property-type": "data-constant",\n    "default": "#ffffff",\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    transition: true,\n    doc: "The color of the fog. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.3.0"\n      }\n    }\n  },\n  "horizon-blend": {\n    type: "number",\n    "property-type": "data-constant",\n    "default": 0.1,\n    minimum: 0,\n    maximum: 1,\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    transition: true,\n    doc: "Horizon blend applies a smooth fade from the color of the fog to the color of the sky. A value of zero leaves a sharp transition from fog to sky. Increasing the value blends the color of fog into increasingly high angles of the sky.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.3.0"\n      }\n    }\n  }\n};\nvar light = {\n  anchor: {\n    type: "enum",\n    "default": "viewport",\n    values: {\n      map: {\n        doc: "The position of the light source is aligned to the rotation of the map."\n      },\n      viewport: {\n        doc: "The position of the light source is aligned to the rotation of the viewport."\n      }\n    },\n    "property-type": "data-constant",\n    transition: false,\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    doc: "Whether extruded geometries are lit relative to the map or viewport.",\n    example: "map",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.27.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    }\n  },\n  position: {\n    type: "array",\n    "default": [1.15, 210, 30],\n    length: 3,\n    value: "number",\n    "property-type": "data-constant",\n    transition: true,\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    doc: "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0Â° (0Â° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0Â° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0Â°, directly above, to 180Â°, directly below).",\n    example: [1.5, 90, 80],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.27.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    }\n  },\n  color: {\n    type: "color",\n    "property-type": "data-constant",\n    "default": "#ffffff",\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    transition: true,\n    doc: "Color tint for lighting extruded geometries.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.27.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    }\n  },\n  intensity: {\n    type: "number",\n    "property-type": "data-constant",\n    "default": 0.5,\n    minimum: 0,\n    maximum: 1,\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    transition: true,\n    doc: "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.27.0",\n        android: "5.1.0",\n        ios: "3.6.0",\n        macos: "0.5.0"\n      }\n    }\n  }\n};\nvar terrain = {\n  source: {\n    type: "string",\n    doc: "Name of a source of `raster_dem` type to be used for terrain elevation.",\n    required: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    }\n  },\n  exaggeration: {\n    type: "number",\n    "property-type": "data-constant",\n    "default": 1,\n    minimum: 0,\n    maximum: 1000,\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    transition: true,\n    doc: "Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    }\n  }\n};\nvar paint = ["paint_fill", "paint_line", "paint_circle", "paint_heatmap", "paint_fill-extrusion", "paint_symbol", "paint_raster", "paint_hillshade", "paint_background", "paint_sky"];\nvar paint_fill = {\n  "fill-antialias": {\n    type: "boolean",\n    "default": true,\n    doc: "Whether or not the fill should be antialiased.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "fill-opacity": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    doc: "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.21.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "fill-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color\'s opacity will not affect the opacity of the 1px stroke, if it is used.",\n    transition: true,\n    requires: [{\n      "!": "fill-pattern"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.19.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "fill-outline-color": {\n    type: "color",\n    doc: "The outline color of the fill. Matches the value of `fill-color` if unspecified.",\n    transition: true,\n    requires: [{\n      "!": "fill-pattern"\n    }, {\n      "fill-antialias": true\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.19.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "fill-translate": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    transition: true,\n    units: "pixels",\n    doc: "The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "fill-translate-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The fill is translated relative to the map."\n      },\n      viewport: {\n        doc: "The fill is translated relative to the viewport."\n      }\n    },\n    doc: "Controls the frame of reference for `fill-translate`.",\n    "default": "map",\n    requires: ["fill-translate"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "fill-pattern": {\n    type: "resolvedImage",\n    transition: true,\n    doc: "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.49.0",\n        android: "6.5.0",\n        macos: "0.11.0",\n        ios: "4.4.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "cross-faded-data-driven"\n  }\n};\nvar paint_line = {\n  "line-opacity": {\n    type: "number",\n    doc: "The opacity at which the line will be drawn.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-color": {\n    type: "color",\n    doc: "The color with which the line will be drawn.",\n    "default": "#000000",\n    transition: true,\n    requires: [{\n      "!": "line-pattern"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.23.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-translate": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    transition: true,\n    units: "pixels",\n    doc: "The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "line-translate-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The line is translated relative to the map."\n      },\n      viewport: {\n        doc: "The line is translated relative to the viewport."\n      }\n    },\n    doc: "Controls the frame of reference for `line-translate`.",\n    "default": "map",\n    requires: ["line-translate"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "line-width": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Stroke thickness.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.39.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-gap-width": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    doc: "Draws a line casing outside of a line\'s actual path. Value indicates the width of the inner gap.",\n    transition: true,\n    units: "pixels",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-offset": {\n    type: "number",\n    "default": 0,\n    doc: "The line\'s offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",\n    transition: true,\n    units: "pixels",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.12.1",\n        android: "3.0.0",\n        ios: "3.1.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-blur": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Blur applied to the line, in pixels.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "line-dasharray": {\n    type: "array",\n    value: "number",\n    doc: "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won\'t render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",\n    minimum: 0,\n    transition: true,\n    units: "line widths",\n    requires: [{\n      "!": "line-pattern"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "2.3.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "cross-faded-data-driven"\n  },\n  "line-pattern": {\n    type: "resolvedImage",\n    transition: true,\n    doc: "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.49.0",\n        android: "6.5.0",\n        macos: "0.11.0",\n        ios: "4.4.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom", "feature"]\n    },\n    "property-type": "cross-faded-data-driven"\n  },\n  "line-gradient": {\n    type: "color",\n    doc: "Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `\\"lineMetrics\\": true`.",\n    transition: false,\n    requires: [{\n      "!": "line-dasharray"\n    }, {\n      "!": "line-pattern"\n    }, {\n      source: "geojson",\n      has: {\n        lineMetrics: true\n      }\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.45.0",\n        android: "6.5.0",\n        ios: "4.4.0",\n        macos: "0.11.0"\n      },\n      "data-driven styling": {}\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["line-progress"]\n    },\n    "property-type": "color-ramp"\n  }\n};\nvar paint_circle = {\n  "circle-radius": {\n    type: "number",\n    "default": 5,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Circle radius.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.18.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The fill color of the circle.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.18.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-blur": {\n    type: "number",\n    "default": 0,\n    doc: "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.20.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-opacity": {\n    type: "number",\n    doc: "The opacity at which the circle will be drawn.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.20.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-translate": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    transition: true,\n    units: "pixels",\n    doc: "The geometry\'s offset. Values are [x, y] where negatives indicate left and up, respectively.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "circle-translate-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The circle is translated relative to the map."\n      },\n      viewport: {\n        doc: "The circle is translated relative to the viewport."\n      }\n    },\n    doc: "Controls the frame of reference for `circle-translate`.",\n    "default": "map",\n    requires: ["circle-translate"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "circle-pitch-scale": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "Circles are scaled according to their apparent distance to the camera."\n      },\n      viewport: {\n        doc: "Circles are not scaled."\n      }\n    },\n    "default": "map",\n    doc: "Controls the scaling behavior of the circle when the map is pitched.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.21.0",\n        android: "4.2.0",\n        ios: "3.4.0",\n        macos: "0.2.1"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "circle-pitch-alignment": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The circle is aligned to the plane of the map."\n      },\n      viewport: {\n        doc: "The circle is aligned to the plane of the viewport."\n      }\n    },\n    "default": "viewport",\n    doc: "Orientation of circle when map is pitched.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.39.0",\n        android: "5.2.0",\n        ios: "3.7.0",\n        macos: "0.6.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "circle-stroke-width": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "The width of the circle\'s stroke. Strokes are placed outside of the `circle-radius`.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-stroke-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The stroke color of the circle.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "circle-stroke-opacity": {\n    type: "number",\n    doc: "The opacity of the circle\'s stroke.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      },\n      "data-driven styling": {\n        js: "0.29.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  }\n};\nvar paint_heatmap = {\n  "heatmap-radius": {\n    type: "number",\n    "default": 30,\n    minimum: 1,\n    transition: true,\n    units: "pixels",\n    doc: "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      },\n      "data-driven styling": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "heatmap-weight": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    transition: false,\n    doc: "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      },\n      "data-driven styling": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "heatmap-intensity": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    transition: true,\n    doc: "Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "heatmap-color": {\n    type: "color",\n    "default": ["interpolate", ["linear"], ["heatmap-density"], 0, "rgba(0, 0, 255, 0)", 0.1, "royalblue", 0.3, "cyan", 0.5, "lime", 0.7, "yellow", 1, "red"],\n    doc: "Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `[\\"heatmap-density\\"]` as input.",\n    transition: false,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      },\n      "data-driven styling": {}\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["heatmap-density"]\n    },\n    "property-type": "color-ramp"\n  },\n  "heatmap-opacity": {\n    type: "number",\n    doc: "The global opacity at which the heatmap layer will be drawn.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.41.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar paint_symbol = {\n  "icon-opacity": {\n    doc: "The opacity at which the icon will be drawn.",\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-color": {\n    type: "color",\n    "default": "#000000",\n    transition: true,\n    doc: "The color of the icon. This can only be used with sdf icons.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-halo-color": {\n    type: "color",\n    "default": "rgba(0, 0, 0, 0)",\n    transition: true,\n    doc: "The color of the icon\'s halo. Icon halos can only be used with SDF icons.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-halo-width": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Distance of halo to the icon outline.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-halo-blur": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Fade out the halo towards the outside.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "icon-translate": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    transition: true,\n    units: "pixels",\n    doc: "Distance that the icon\'s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",\n    requires: ["icon-image"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "icon-translate-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "Icons are translated relative to the map."\n      },\n      viewport: {\n        doc: "Icons are translated relative to the viewport."\n      }\n    },\n    doc: "Controls the frame of reference for `icon-translate`.",\n    "default": "map",\n    requires: ["icon-image", "icon-translate"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-opacity": {\n    type: "number",\n    doc: "The opacity at which the text will be drawn.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-color": {\n    type: "color",\n    doc: "The color with which the text will be drawn.",\n    "default": "#000000",\n    transition: true,\n    overridable: true,\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-halo-color": {\n    type: "color",\n    "default": "rgba(0, 0, 0, 0)",\n    transition: true,\n    doc: "The color of the text\'s halo, which helps it stand out from backgrounds.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-halo-width": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-halo-blur": {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    transition: true,\n    units: "pixels",\n    doc: "The halo\'s fadeout distance towards the outside.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {\n        js: "0.33.0",\n        android: "5.0.0",\n        ios: "3.5.0",\n        macos: "0.4.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom", "feature", "feature-state"]\n    },\n    "property-type": "data-driven"\n  },\n  "text-translate": {\n    type: "array",\n    value: "number",\n    length: 2,\n    "default": [0, 0],\n    transition: true,\n    units: "pixels",\n    doc: "Distance that the text\'s anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",\n    requires: ["text-field"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "text-translate-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The text is translated relative to the map."\n      },\n      viewport: {\n        doc: "The text is translated relative to the viewport."\n      }\n    },\n    doc: "Controls the frame of reference for `text-translate`.",\n    "default": "map",\n    requires: ["text-field", "text-translate"],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar paint_raster = {\n  "raster-opacity": {\n    type: "number",\n    doc: "The opacity at which the image will be drawn.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-hue-rotate": {\n    type: "number",\n    "default": 0,\n    period: 360,\n    transition: true,\n    units: "degrees",\n    doc: "Rotates hues around the color wheel.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-brightness-min": {\n    type: "number",\n    doc: "Increase or reduce the brightness of the image. The value is the minimum brightness.",\n    "default": 0,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-brightness-max": {\n    type: "number",\n    doc: "Increase or reduce the brightness of the image. The value is the maximum brightness.",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-saturation": {\n    type: "number",\n    doc: "Increase or reduce the saturation of the image.",\n    "default": 0,\n    minimum: -1,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-contrast": {\n    type: "number",\n    doc: "Increase or reduce the contrast of the image.",\n    "default": 0,\n    minimum: -1,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-resampling": {\n    type: "enum",\n    doc: "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",\n    values: {\n      linear: {\n        doc: "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"\n      },\n      nearest: {\n        doc: "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"\n      }\n    },\n    "default": "linear",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.47.0",\n        android: "6.3.0",\n        ios: "4.2.0",\n        macos: "0.9.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "raster-fade-duration": {\n    type: "number",\n    "default": 300,\n    minimum: 0,\n    transition: false,\n    units: "milliseconds",\n    doc: "Fade duration when a new tile is added.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar paint_hillshade = {\n  "hillshade-illumination-direction": {\n    type: "number",\n    "default": 335,\n    minimum: 0,\n    maximum: 359,\n    doc: "The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",\n    transition: false,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "hillshade-illumination-anchor": {\n    type: "enum",\n    values: {\n      map: {\n        doc: "The hillshade illumination is relative to the north direction."\n      },\n      viewport: {\n        doc: "The hillshade illumination is relative to the top of the viewport."\n      }\n    },\n    "default": "viewport",\n    doc: "Direction of light source when map is rotated.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "hillshade-exaggeration": {\n    type: "number",\n    doc: "Intensity of the hillshade",\n    "default": 0.5,\n    minimum: 0,\n    maximum: 1,\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "hillshade-shadow-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The shading color of areas that face away from the light source.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "hillshade-highlight-color": {\n    type: "color",\n    "default": "#FFFFFF",\n    doc: "The shading color of areas that faces towards the light source.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "hillshade-accent-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.43.0",\n        android: "6.0.0",\n        ios: "4.0.0",\n        macos: "0.7.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar paint_background = {\n  "background-color": {\n    type: "color",\n    "default": "#000000",\n    doc: "The color with which the background will be drawn.",\n    transition: true,\n    requires: [{\n      "!": "background-pattern"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "background-pattern": {\n    type: "resolvedImage",\n    transition: true,\n    doc: "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      },\n      "data-driven styling": {}\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "cross-faded"\n  },\n  "background-opacity": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    doc: "The opacity at which the background will be drawn.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "0.10.0",\n        android: "2.0.1",\n        ios: "2.0.0",\n        macos: "0.1.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar paint_sky = {\n  "sky-type": {\n    type: "enum",\n    values: {\n      gradient: {\n        doc: "Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."\n      },\n      atmosphere: {\n        doc: "Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."\n      }\n    },\n    "default": "atmosphere",\n    doc: "The type of the sky",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "sky-atmosphere-sun": {\n    type: "array",\n    value: "number",\n    length: 2,\n    units: "degrees",\n    minimum: [0, 0],\n    maximum: [360, 180],\n    transition: false,\n    doc: "Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0Â° is directly above, at zenith, and 90Â° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    requires: [{\n      "sky-type": "atmosphere"\n    }],\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "sky-atmosphere-sun-intensity": {\n    type: "number",\n    requires: [{\n      "sky-type": "atmosphere"\n    }],\n    "default": 10,\n    minimum: 0,\n    maximum: 100,\n    transition: false,\n    doc: "Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    "property-type": "data-constant"\n  },\n  "sky-gradient-center": {\n    type: "array",\n    requires: [{\n      "sky-type": "gradient"\n    }],\n    value: "number",\n    "default": [0, 0],\n    length: 2,\n    units: "degrees",\n    minimum: [0, 0],\n    maximum: [360, 180],\n    transition: false,\n    doc: "Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0Â° is directly above, at zenith, and 90Â° at the horizon.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "sky-gradient-radius": {\n    type: "number",\n    requires: [{\n      "sky-type": "gradient"\n    }],\n    "default": 90,\n    minimum: 0,\n    maximum: 180,\n    transition: false,\n    doc: "The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.",\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    expression: {\n      interpolated: false,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  },\n  "sky-gradient": {\n    type: "color",\n    "default": ["interpolate", ["linear"], ["sky-radial-progress"], 0.8, "#87ceeb", 1, "white"],\n    doc: "Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",\n    transition: false,\n    requires: [{\n      "sky-type": "gradient"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      },\n      "data-driven styling": {}\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["sky-radial-progress"]\n    },\n    "property-type": "color-ramp"\n  },\n  "sky-atmosphere-halo-color": {\n    type: "color",\n    "default": "white",\n    doc: "A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",\n    transition: false,\n    requires: [{\n      "sky-type": "atmosphere"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    "property-type": "data-constant"\n  },\n  "sky-atmosphere-color": {\n    type: "color",\n    "default": "white",\n    doc: "A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",\n    transition: false,\n    requires: [{\n      "sky-type": "atmosphere"\n    }],\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    "property-type": "data-constant"\n  },\n  "sky-opacity": {\n    type: "number",\n    "default": 1,\n    minimum: 0,\n    maximum: 1,\n    doc: "The opacity of the entire sky layer.",\n    transition: true,\n    "sdk-support": {\n      "basic functionality": {\n        js: "2.0.0"\n      }\n    },\n    expression: {\n      interpolated: true,\n      parameters: ["zoom"]\n    },\n    "property-type": "data-constant"\n  }\n};\nvar transition = {\n  duration: {\n    type: "number",\n    "default": 300,\n    minimum: 0,\n    units: "milliseconds",\n    doc: "Time allotted for transitions to complete."\n  },\n  delay: {\n    type: "number",\n    "default": 0,\n    minimum: 0,\n    units: "milliseconds",\n    doc: "Length of time before a transition begins."\n  }\n};\nvar promoteId = {\n  "*": {\n    type: "string",\n    doc: "A name of a feature property to use as ID for feature state."\n  }\n};\nvar v8 = {\n  $version: $version,\n  $root: $root,\n  sources: sources,\n  source: source,\n  source_vector: source_vector,\n  source_raster: source_raster,\n  source_raster_dem: source_raster_dem,\n  source_geojson: source_geojson,\n  source_video: source_video,\n  source_image: source_image,\n  layer: layer,\n  layout: layout,\n  layout_background: layout_background,\n  layout_sky: layout_sky,\n  layout_fill: layout_fill,\n  layout_circle: layout_circle,\n  layout_heatmap: layout_heatmap,\n  "layout_fill-extrusion": {\n    visibility: {\n      type: "enum",\n      values: {\n        visible: {\n          doc: "The layer is shown."\n        },\n        none: {\n          doc: "The layer is not shown."\n        }\n      },\n      "default": "visible",\n      doc: "Whether this layer is displayed.",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      "property-type": "constant"\n    }\n  },\n  layout_line: layout_line,\n  layout_symbol: layout_symbol,\n  layout_raster: layout_raster,\n  layout_hillshade: layout_hillshade,\n  filter: filter,\n  filter_operator: filter_operator,\n  geometry_type: geometry_type,\n  "function": {\n    expression: {\n      type: "expression",\n      doc: "An expression."\n    },\n    stops: {\n      type: "array",\n      doc: "An array of stops.",\n      value: "function_stop"\n    },\n    base: {\n      type: "number",\n      "default": 1,\n      minimum: 0,\n      doc: "The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."\n    },\n    property: {\n      type: "string",\n      doc: "The name of a feature property to use as the function input.",\n      "default": "$zoom"\n    },\n    type: {\n      type: "enum",\n      values: {\n        identity: {\n          doc: "Return the input value as the output value."\n        },\n        exponential: {\n          doc: "Generate an output by interpolating between stops just less than and just greater than the function input."\n        },\n        interval: {\n          doc: "Return the output value of the stop just less than the function input."\n        },\n        categorical: {\n          doc: "Return the output value of the stop equal to the function input."\n        }\n      },\n      doc: "The interpolation strategy to use in function evaluation.",\n      "default": "exponential"\n    },\n    colorSpace: {\n      type: "enum",\n      values: {\n        rgb: {\n          doc: "Use the RGB color space to interpolate color values"\n        },\n        lab: {\n          doc: "Use the LAB color space to interpolate color values."\n        },\n        hcl: {\n          doc: "Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."\n        }\n      },\n      doc: "The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",\n      "default": "rgb"\n    },\n    "default": {\n      type: "*",\n      required: false,\n      doc: "A value to serve as a fallback function result when a value isn\'t otherwise available. It is used in the following circumstances:\\n* In categorical functions, when the feature value does not match any of the stop domain values.\\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\\nIf no default is provided, the style property\'s default is used in these circumstances."\n    }\n  },\n  function_stop: function_stop,\n  expression: expression,\n  expression_name: expression_name,\n  fog: fog,\n  light: light,\n  terrain: terrain,\n  paint: paint,\n  paint_fill: paint_fill,\n  "paint_fill-extrusion": {\n    "fill-extrusion-opacity": {\n      type: "number",\n      "default": 1,\n      minimum: 0,\n      maximum: 1,\n      doc: "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",\n      transition: true,\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: true,\n        parameters: ["zoom"]\n      },\n      "property-type": "data-constant"\n    },\n    "fill-extrusion-color": {\n      type: "color",\n      "default": "#000000",\n      doc: "The base color of the extruded fill. The extrusion\'s surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",\n      transition: true,\n      requires: [{\n        "!": "fill-extrusion-pattern"\n      }],\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        },\n        "data-driven styling": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: true,\n        parameters: ["zoom", "feature", "feature-state"]\n      },\n      "property-type": "data-driven"\n    },\n    "fill-extrusion-translate": {\n      type: "array",\n      value: "number",\n      length: 2,\n      "default": [0, 0],\n      transition: true,\n      units: "pixels",\n      doc: "The geometry\'s offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: true,\n        parameters: ["zoom"]\n      },\n      "property-type": "data-constant"\n    },\n    "fill-extrusion-translate-anchor": {\n      type: "enum",\n      values: {\n        map: {\n          doc: "The fill extrusion is translated relative to the map."\n        },\n        viewport: {\n          doc: "The fill extrusion is translated relative to the viewport."\n        }\n      },\n      doc: "Controls the frame of reference for `fill-extrusion-translate`.",\n      "default": "map",\n      requires: ["fill-extrusion-translate"],\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: false,\n        parameters: ["zoom"]\n      },\n      "property-type": "data-constant"\n    },\n    "fill-extrusion-pattern": {\n      type: "resolvedImage",\n      transition: true,\n      doc: "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        },\n        "data-driven styling": {\n          js: "0.49.0",\n          android: "6.5.0",\n          macos: "0.11.0",\n          ios: "4.4.0"\n        }\n      },\n      expression: {\n        interpolated: false,\n        parameters: ["zoom", "feature"]\n      },\n      "property-type": "cross-faded-data-driven"\n    },\n    "fill-extrusion-height": {\n      type: "number",\n      "default": 0,\n      minimum: 0,\n      units: "meters",\n      doc: "The height with which to extrude this layer.",\n      transition: true,\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        },\n        "data-driven styling": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: true,\n        parameters: ["zoom", "feature", "feature-state"]\n      },\n      "property-type": "data-driven"\n    },\n    "fill-extrusion-base": {\n      type: "number",\n      "default": 0,\n      minimum: 0,\n      units: "meters",\n      doc: "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",\n      transition: true,\n      requires: ["fill-extrusion-height"],\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        },\n        "data-driven styling": {\n          js: "0.27.0",\n          android: "5.1.0",\n          ios: "3.6.0",\n          macos: "0.5.0"\n        }\n      },\n      expression: {\n        interpolated: true,\n        parameters: ["zoom", "feature", "feature-state"]\n      },\n      "property-type": "data-driven"\n    },\n    "fill-extrusion-vertical-gradient": {\n      type: "boolean",\n      "default": true,\n      doc: "Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",\n      transition: false,\n      "sdk-support": {\n        "basic functionality": {\n          js: "0.50.0",\n          ios: "4.7.0",\n          macos: "0.13.0"\n        }\n      },\n      expression: {\n        interpolated: false,\n        parameters: ["zoom"]\n      },\n      "property-type": "data-constant"\n    }\n  },\n  paint_line: paint_line,\n  paint_circle: paint_circle,\n  paint_heatmap: paint_heatmap,\n  paint_symbol: paint_symbol,\n  paint_raster: paint_raster,\n  paint_hillshade: paint_hillshade,\n  paint_background: paint_background,\n  paint_sky: paint_sky,\n  transition: transition,\n  "property-type": {\n    "data-driven": {\n      type: "property-type",\n      doc: "Property is interpolable and can be represented using a property expression."\n    },\n    "cross-faded": {\n      type: "property-type",\n      doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."\n    },\n    "cross-faded-data-driven": {\n      type: "property-type",\n      doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."\n    },\n    "color-ramp": {\n      type: "property-type",\n      doc: "Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."\n    },\n    "data-constant": {\n      type: "property-type",\n      doc: "Property is interpolable but cannot be represented using a property expression."\n    },\n    constant: {\n      type: "property-type",\n      doc: "Property is constant across all zoom levels and property values."\n    }\n  },\n  promoteId: promoteId\n}; // Note: This regex matches even invalid JSON strings, but since weâre\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we donât care since the output would be invalid anyway).\n\nvar stringOrChar = /("(?:[^\\\\"]|\\\\.)*")|[:,]/g;\n\nvar jsonStringifyPrettyCompact = function stringify(passedObj, options) {\n  var indent, maxLength, replacer;\n  options = options || {};\n  indent = JSON.stringify([1], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);\n  maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;\n  replacer = options.replacer;\n  return function _stringify(obj, currentIndent, reserved) {\n    // prettier-ignore\n    var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;\n\n    if (obj && typeof obj.toJSON === "function") {\n      obj = obj.toJSON();\n    }\n\n    string = JSON.stringify(obj, replacer);\n\n    if (string === undefined) {\n      return string;\n    }\n\n    length = maxLength - currentIndent.length - reserved;\n\n    if (string.length <= length) {\n      prettified = string.replace(stringOrChar, function (match, stringLiteral) {\n        return stringLiteral || match + " ";\n      });\n\n      if (prettified.length <= length) {\n        return prettified;\n      }\n    }\n\n    if (replacer != null) {\n      obj = JSON.parse(string);\n      replacer = undefined;\n    }\n\n    if (typeof obj === "object" && obj !== null) {\n      nextIndent = currentIndent + indent;\n      items = [];\n      index = 0;\n\n      if (Array.isArray(obj)) {\n        start = "[";\n        end = "]";\n        length = obj.length;\n\n        for (; index < length; index++) {\n          items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || "null");\n        }\n      } else {\n        start = "{";\n        end = "}";\n        keys = Object.keys(obj);\n        length = keys.length;\n\n        for (; index < length; index++) {\n          key = keys[index];\n          keyPart = JSON.stringify(key) + ": ";\n          value = _stringify(obj[key], nextIndent, keyPart.length + (index === length - 1 ? 0 : 1));\n\n          if (value !== undefined) {\n            items.push(keyPart + value);\n          }\n        }\n      }\n\n      if (items.length > 0) {\n        return [start, indent + items.join(",\\n" + nextIndent), end].join("\\n" + currentIndent);\n      }\n    }\n\n    return string;\n  }(passedObj, "", 0);\n};\n\nfunction sortKeysBy(obj, reference) {\n  var result = {};\n\n  for (var key in reference) {\n    if (obj[key] !== undefined) {\n      result[key] = obj[key];\n    }\n  }\n\n  for (var _key in obj) {\n    if (result[_key] === undefined) {\n      result[_key] = obj[_key];\n    }\n  }\n\n  return result;\n}\n\nfunction format(style) {\n  var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  style = sortKeysBy(style, v8.$root);\n\n  if (style.layers) {\n    style.layers = style.layers.map(function (layer) {\n      return sortKeysBy(layer, v8.layer);\n    });\n  }\n\n  return jsonStringifyPrettyCompact(style, {\n    indent: space\n  });\n}\n\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof __webpack_require__.g !== \'undefined\' ? __webpack_require__.g : typeof self !== \'undefined\' ? self : {};\n\nfunction createCommonjsModule(fn) {\n  var module = {\n    exports: {}\n  };\n  return fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire(target) {\n  throw new Error(\'Could not dynamically require "\' + target + \'". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.\');\n}\n/*! https://mths.be/punycode v1.3.2 by @mathias */\n\n\nvar punycode = createCommonjsModule(function (module, exports) {\n  (function (root) {\n    /** Detect free variables */\n    var freeExports = exports && !exports.nodeType && exports;\n    var freeModule = module && !module.nodeType && module;\n    var freeGlobal = typeof commonjsGlobal == \'object\' && commonjsGlobal;\n\n    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {\n      root = freeGlobal;\n    }\n    /**\n     * The `punycode` object.\n     * @name punycode\n     * @type Object\n     */\n\n\n    var punycode,\n\n    /** Highest positive signed 32-bit float value */\n    maxInt = 2147483647,\n        // aka. 0x7FFFFFFF or 2^31-1\n\n    /** Bootstring parameters */\n    base = 36,\n        tMin = 1,\n        tMax = 26,\n        skew = 38,\n        damp = 700,\n        initialBias = 72,\n        initialN = 128,\n        // 0x80\n    delimiter = \'-\',\n        // \'\\x2D\'\n\n    /** Regular expressions */\n    regexPunycode = /^xn--/,\n        regexNonASCII = /[^\\x20-\\x7E]/,\n        // unprintable ASCII chars + non-ASCII chars\n    regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n        // RFC 3490 separators\n\n    /** Error messages */\n    errors = {\n      \'overflow\': \'Overflow: input needs wider integers to process\',\n      \'not-basic\': \'Illegal input >= 0x80 (not a basic code point)\',\n      \'invalid-input\': \'Invalid input\'\n    },\n\n    /** Convenience shortcuts */\n    baseMinusTMin = base - tMin,\n        floor = Math.floor,\n        stringFromCharCode = String.fromCharCode,\n\n    /** Temporary variable */\n    key;\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * A generic error utility function.\n     * @private\n     * @param {String} type The error type.\n     * @returns {Error} Throws a `RangeError` with the applicable error message.\n     */\n\n    function error(type) {\n      throw RangeError(errors[type]);\n    }\n    /**\n     * A generic `Array#map` utility function.\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} callback The function that gets called for every array\n     * item.\n     * @returns {Array} A new array of values returned by the callback function.\n     */\n\n\n    function map(array, fn) {\n      var length = array.length;\n      var result = [];\n\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n\n      return result;\n    }\n    /**\n     * A simple `Array#map`-like wrapper to work with domain name strings or email\n     * addresses.\n     * @private\n     * @param {String} domain The domain name or email address.\n     * @param {Function} callback The function that gets called for every\n     * character.\n     * @returns {Array} A new string of characters returned by the callback\n     * function.\n     */\n\n\n    function mapDomain(string, fn) {\n      var parts = string.split(\'@\');\n      var result = \'\';\n\n      if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + \'@\';\n        string = parts[1];\n      } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n      string = string.replace(regexSeparators, \'\\x2E\');\n      var labels = string.split(\'.\');\n      var encoded = map(labels, fn).join(\'.\');\n      return result + encoded;\n    }\n    /**\n     * Creates an array containing the numeric code points of each Unicode\n     * character in the string. While JavaScript uses UCS-2 internally,\n     * this function will convert a pair of surrogate halves (each of which\n     * UCS-2 exposes as separate characters) into a single code point,\n     * matching UTF-16.\n     * @see `punycode.ucs2.encode`\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode.ucs2\n     * @name decode\n     * @param {String} string The Unicode input string (UCS-2).\n     * @returns {Array} The new array of code points.\n     */\n\n\n    function ucs2decode(string) {\n      var output = [],\n          counter = 0,\n          length = string.length,\n          value,\n          extra;\n\n      while (counter < length) {\n        value = string.charCodeAt(counter++);\n\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n          // high surrogate, and there is a next character\n          extra = string.charCodeAt(counter++);\n\n          if ((extra & 0xFC00) == 0xDC00) {\n            // low surrogate\n            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n          } else {\n            // unmatched surrogate; only append this code unit, in case the next\n            // code unit is the high surrogate of a surrogate pair\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n\n      return output;\n    }\n    /**\n     * Creates a string based on an array of numeric code points.\n     * @see `punycode.ucs2.decode`\n     * @memberOf punycode.ucs2\n     * @name encode\n     * @param {Array} codePoints The array of numeric code points.\n     * @returns {String} The new Unicode string (UCS-2).\n     */\n\n\n    function ucs2encode(array) {\n      return map(array, function (value) {\n        var output = \'\';\n\n        if (value > 0xFFFF) {\n          value -= 0x10000;\n          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n          value = 0xDC00 | value & 0x3FF;\n        }\n\n        output += stringFromCharCode(value);\n        return output;\n      }).join(\'\');\n    }\n    /**\n     * Converts a basic code point into a digit/integer.\n     * @see `digitToBasic()`\n     * @private\n     * @param {Number} codePoint The basic numeric code point value.\n     * @returns {Number} The numeric value of a basic code point (for use in\n     * representing integers) in the range `0` to `base - 1`, or `base` if\n     * the code point does not represent a value.\n     */\n\n\n    function basicToDigit(codePoint) {\n      if (codePoint - 48 < 10) {\n        return codePoint - 22;\n      }\n\n      if (codePoint - 65 < 26) {\n        return codePoint - 65;\n      }\n\n      if (codePoint - 97 < 26) {\n        return codePoint - 97;\n      }\n\n      return base;\n    }\n    /**\n     * Converts a digit/integer into a basic code point.\n     * @see `basicToDigit()`\n     * @private\n     * @param {Number} digit The numeric value of a basic code point.\n     * @returns {Number} The basic code point whose value (when used for\n     * representing integers) is `digit`, which needs to be in the range\n     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n     * used; else, the lowercase form is used. The behavior is undefined\n     * if `flag` is non-zero and `digit` has no uppercase form.\n     */\n\n\n    function digitToBasic(digit, flag) {\n      //  0..25 map to ASCII a..z or A..Z\n      // 26..35 map to ASCII 0..9\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    }\n    /**\n     * Bias adaptation function as per section 3.4 of RFC 3492.\n     * http://tools.ietf.org/html/rfc3492#section-3.4\n     * @private\n     */\n\n\n    function adapt(delta, numPoints, firstTime) {\n      var k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n\n      for (;\n      /* no initialization */\n      delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    }\n    /**\n     * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n     * symbols.\n     * @memberOf punycode\n     * @param {String} input The Punycode string of ASCII-only symbols.\n     * @returns {String} The resulting string of Unicode symbols.\n     */\n\n\n    function decode(input) {\n      // Don\'t use UCS-2\n      var output = [],\n          inputLength = input.length,\n          out,\n          i = 0,\n          n = initialN,\n          bias = initialBias,\n          basic,\n          j,\n          index,\n          oldi,\n          w,\n          k,\n          digit,\n          t,\n\n      /** Cached calculation results */\n      baseMinusT; // Handle the basic code points: let `basic` be the number of input code\n      // points before the last delimiter, or `0` if there is none, then copy\n      // the first basic code points to the output.\n\n      basic = input.lastIndexOf(delimiter);\n\n      if (basic < 0) {\n        basic = 0;\n      }\n\n      for (j = 0; j < basic; ++j) {\n        // if it\'s not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n          error(\'not-basic\');\n        }\n\n        output.push(input.charCodeAt(j));\n      } // Main decoding loop: start just after the last delimiter if any basic code\n      // points were copied; start at the beginning otherwise.\n\n\n      for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n      /* no final expression */\n      {\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        for (oldi = i, w = 1, k = base;;\n        /* no condition */\n        k += base) {\n          if (index >= inputLength) {\n            error(\'invalid-input\');\n          }\n\n          digit = basicToDigit(input.charCodeAt(index++));\n\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error(\'overflow\');\n          }\n\n          i += digit * w;\n          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n          if (digit < t) {\n            break;\n          }\n\n          baseMinusT = base - t;\n\n          if (w > floor(maxInt / baseMinusT)) {\n            error(\'overflow\');\n          }\n\n          w *= baseMinusT;\n        }\n\n        out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we\'ll fix that now:\n\n        if (floor(i / out) > maxInt - n) {\n          error(\'overflow\');\n        }\n\n        n += floor(i / out);\n        i %= out; // Insert `n` at position `i` of the output\n\n        output.splice(i++, 0, n);\n      }\n\n      return ucs2encode(output);\n    }\n    /**\n     * Converts a string of Unicode symbols (e.g. a domain name label) to a\n     * Punycode string of ASCII-only symbols.\n     * @memberOf punycode\n     * @param {String} input The string of Unicode symbols.\n     * @returns {String} The resulting Punycode string of ASCII-only symbols.\n     */\n\n\n    function encode(input) {\n      var n,\n          delta,\n          handledCPCount,\n          basicLength,\n          bias,\n          j,\n          m,\n          q,\n          k,\n          t,\n          currentValue,\n          output = [],\n\n      /** `inputLength` will hold the number of code points in `input`. */\n      inputLength,\n\n      /** Cached calculation results */\n      handledCPCountPlusOne,\n          baseMinusT,\n          qMinusT; // Convert the input in UCS-2 to Unicode\n\n      input = ucs2decode(input); // Cache the length\n\n      inputLength = input.length; // Initialize the state\n\n      n = initialN;\n      delta = 0;\n      bias = initialBias; // Handle the basic code points\n\n      for (j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue < 0x80) {\n          output.push(stringFromCharCode(currentValue));\n        }\n      }\n\n      handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;\n      // `basicLength` is the number of basic code points.\n      // Finish the basic string - if it is not empty - with a delimiter\n\n      if (basicLength) {\n        output.push(delimiter);\n      } // Main encoding loop:\n\n\n      while (handledCPCount < inputLength) {\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        for (m = maxInt, j = 0; j < inputLength; ++j) {\n          currentValue = input[j];\n\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        } // Increase `delta` enough to advance the decoder\'s <n,i> state to <m,0>,\n        // but guard against overflow\n\n\n        handledCPCountPlusOne = handledCPCount + 1;\n\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error(\'overflow\');\n        }\n\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n\n        for (j = 0; j < inputLength; ++j) {\n          currentValue = input[j];\n\n          if (currentValue < n && ++delta > maxInt) {\n            error(\'overflow\');\n          }\n\n          if (currentValue == n) {\n            // Represent delta as a generalized variable-length integer\n            for (q = delta, k = base;;\n            /* no condition */\n            k += base) {\n              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n              if (q < t) {\n                break;\n              }\n\n              qMinusT = q - t;\n              baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n\n        ++delta;\n        ++n;\n      }\n\n      return output.join(\'\');\n    }\n    /**\n     * Converts a Punycode string representing a domain name or an email address\n     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n     * it doesn\'t matter if you call it on a string that has already been\n     * converted to Unicode.\n     * @memberOf punycode\n     * @param {String} input The Punycoded domain name or email address to\n     * convert to Unicode.\n     * @returns {String} The Unicode representation of the given Punycode\n     * string.\n     */\n\n\n    function toUnicode(input) {\n      return mapDomain(input, function (string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    }\n    /**\n     * Converts a Unicode string representing a domain name or an email address to\n     * Punycode. Only the non-ASCII parts of the domain name will be converted,\n     * i.e. it doesn\'t matter if you call it with a domain that\'s already in\n     * ASCII.\n     * @memberOf punycode\n     * @param {String} input The domain name or email address to convert, as a\n     * Unicode string.\n     * @returns {String} The Punycode representation of the given domain name or\n     * email address.\n     */\n\n\n    function toASCII(input) {\n      return mapDomain(input, function (string) {\n        return regexNonASCII.test(string) ? \'xn--\' + encode(string) : string;\n      });\n    }\n    /*--------------------------------------------------------------------------*/\n\n    /** Define the public API */\n\n\n    punycode = {\n      /**\n       * A string representing the current Punycode.js version number.\n       * @memberOf punycode\n       * @type String\n       */\n      \'version\': \'1.3.2\',\n\n      /**\n       * An object of methods to convert from JavaScript\'s internal character\n       * representation (UCS-2) to Unicode code points, and back.\n       * @see <https://mathiasbynens.be/notes/javascript-encoding>\n       * @memberOf punycode\n       * @type Object\n       */\n      \'ucs2\': {\n        \'decode\': ucs2decode,\n        \'encode\': ucs2encode\n      },\n      \'decode\': decode,\n      \'encode\': encode,\n      \'toASCII\': toASCII,\n      \'toUnicode\': toUnicode\n    };\n    /** Expose `punycode` */\n    // Some AMD build optimizers, like r.js, check for specific condition patterns\n    // like the following:\n\n    if (freeExports && freeModule) {\n      if (module.exports == freeExports) {\n        // in Node.js or RingoJS v0.8.0+\n        freeModule.exports = punycode;\n      } else {\n        // in Narwhal or RingoJS v0.7.0-\n        for (key in punycode) {\n          punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n        }\n      }\n    } else {\n      // in Rhino or a web browser\n      root.punycode = punycode;\n    }\n  })(commonjsGlobal);\n});\nvar util = {\n  isString: function isString(arg) {\n    return typeof arg === \'string\';\n  },\n  isObject: function isObject(arg) {\n    return typeof arg === \'object\' && arg !== null;\n  },\n  isNull: function isNull(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function isNullOrUndefined(arg) {\n    return arg == null;\n  }\n}; // Copyright Joyent, Inc. and other Node contributors.\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar decode = function decode(qs, sep, eq, options) {\n  sep = sep || \'&\';\n  eq = eq || \'=\';\n  var obj = {};\n\n  if (typeof qs !== \'string\' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === \'number\') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count\n\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, \'%20\'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = \'\';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n}; // Copyright Joyent, Inc. and other Node contributors.\n\n\nvar stringifyPrimitive = function stringifyPrimitive(v) {\n  switch (typeof v) {\n    case \'string\':\n      return v;\n\n    case \'boolean\':\n      return v ? \'true\' : \'false\';\n\n    case \'number\':\n      return isFinite(v) ? v : \'\';\n\n    default:\n      return \'\';\n  }\n};\n\nvar encode = function encode(obj, sep, eq, name) {\n  sep = sep || \'&\';\n  eq = eq || \'=\';\n\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === \'object\') {\n    return Object.keys(obj).map(function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return \'\';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar querystring = createCommonjsModule(function (module, exports) {\n  exports.decode = exports.parse = decode;\n  exports.encode = exports.stringify = encode;\n});\nvar parse = urlParse;\nvar resolve = urlResolve;\nvar resolveObject = urlResolveObject;\nvar format$1 = urlFormat;\nvar Url_1 = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = [\'<\', \'>\', \'"\', \'`\', \' \', \'\\r\', \'\\n\', \'\\t\'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = [\'{\', \'}\', \'|\', \'\\\\\', \'^\', \'`\'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = [\'\\\'\'].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = [\'%\', \'/\', \'?\', \';\', \'#\'].concat(autoEscape),\n    hostEndingChars = [\'/\', \'?\', \'#\'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow "unsafe" and "unwise" chars.\nunsafeProtocol = {\n  \'javascript\': true,\n  \'javascript:\': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  \'javascript\': true,\n  \'javascript:\': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  \'http\': true,\n  \'https\': true,\n  \'ftp\': true,\n  \'gopher\': true,\n  \'file\': true,\n  \'http:\': true,\n  \'https:\': true,\n  \'ftp:\': true,\n  \'gopher:\': true,\n  \'file:\': true\n};\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError("Parameter \'url\' must be a string, not " + typeof url);\n  } // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\n\n  var queryIndex = url.indexOf(\'?\'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf(\'#\') ? \'?\' : \'#\',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, \'/\');\n  url = uSplit.join(splitter);\n  var rest = url; // trim before proceeding.\n  // This is to support parse stuff like "  http://foo.com  \\n"\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split(\'#\').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = \'\';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  } // figure out if it\'s got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that\'s\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === \'//\';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there\'s a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf(\'@\');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf(\'@\', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost(); // we\'ve indicated that there is a hostname,\n    // so even if it\'s empty, it has to be present.\n\n    this.hostname = this.hostname || \'\'; // if hostname begins with [ and ends with ]\n    // assume that it\'s an IPv6 address.\n\n    var ipv6Hostname = this.hostname[0] === \'[\' && this.hostname[this.hostname.length - 1] === \']\'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = \'\';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += \'x\';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = \'/\' + notHost.join(\'.\') + rest;\n            }\n\n            this.hostname = validParts.join(\'.\');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = \'\';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of "domain".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn\'t matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? \':\' + this.port : \'\';\n    var h = this.hostname || \'\';\n    this.host = h + p;\n    this.href += this.host; // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== \'/\') {\n        rest = \'/\' + rest;\n      }\n    }\n  } // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any "autoEscape" chars get\n    // escaped, even if encodeURIComponent doesn\'t think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) continue;\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf(\'#\');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf(\'?\');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = \'\';\n    this.query = {};\n  }\n\n  if (rest) this.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = \'/\';\n  } //to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || \'\';\n    var s = this.search || \'\';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  // ensure it\'s an object, and not a string url.\n  // If it\'s an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || \'\';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, \':\');\n    auth += \'@\';\n  }\n\n  var protocol = this.protocol || \'\',\n      pathname = this.pathname || \'\',\n      hash = this.hash || \'\',\n      host = false,\n      query = \'\';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(\':\') === -1 ? this.hostname : \'[\' + this.hostname + \']\');\n\n    if (this.port) {\n      host += \':\' + this.port;\n    }\n  }\n\n  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || query && \'?\' + query || \'\';\n  if (protocol && protocol.substr(-1) !== \':\') protocol += \':\'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = \'//\' + (host || \'\');\n    if (pathname && pathname.charAt(0) !== \'/\') pathname = \'/\' + pathname;\n  } else if (!host) {\n    host = \'\';\n  }\n\n  if (hash && hash.charAt(0) !== \'#\') hash = \'#\' + hash;\n  if (search && search.charAt(0) !== \'?\') search = \'?\' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace(\'#\', \'%23\');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  } // hash is always overridden, no matter what.\n  // even href="" will remove it.\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there\'s nothing left to do here.\n\n  if (relative.href === \'\') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== \'protocol\') result[rkey] = relative[rkey];\n    } //urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = \'/\';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it\'s a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it\'s not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that\'s known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || \'\').split(\'/\');\n\n      while (relPath.length && !(relative.host = relPath.shift())) {\n        ;\n      }\n\n      if (!relative.host) relative.host = \'\';\n      if (!relative.hostname) relative.hostname = \'\';\n      if (relPath[0] !== \'\') relPath.unshift(\'\');\n      if (relPath.length < 2) relPath.unshift(\'\');\n      result.pathname = relPath.join(\'/\');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || \'\';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || \'\';\n      var s = result.search || \'\';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === \'/\',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === \'/\',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split(\'/\') || [],\n      relPath = relative.pathname && relative.pathname.split(\'/\') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n\n  if (psychotic) {\n    result.hostname = \'\';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === \'\') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = \'\';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === \'\') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === \'\' || srcPath[0] === \'\');\n  }\n\n  if (isRelAbs) {\n    // it\'s absolute.\n    result.host = relative.host || relative.host === \'\' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === \'\' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it\'s relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href=\'?foo\'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject(\'mailto:local1@domain1\', \'local2@domain2\')\n\n      var authInHost = result.host && result.host.indexOf(\'@\') > 0 ? result.host.split(\'@\') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; //to support http.request\n\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : \'\') + (result.search ? result.search : \'\');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we\'ve already handled the other stuff above.\n    result.pathname = null; //to support http.request\n\n    if (result.search) {\n      result.path = \'/\' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  } // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === \'.\' || last === \'..\') || last === \'\'; // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === \'.\') {\n      srcPath.splice(i, 1);\n    } else if (last === \'..\') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift(\'..\');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== \'\' && (!srcPath[0] || srcPath[0].charAt(0) !== \'/\')) {\n    srcPath.unshift(\'\');\n  }\n\n  if (hasTrailingSlash && srcPath.join(\'/\').substr(-1) !== \'/\') {\n    srcPath.push(\'\');\n  }\n\n  var isAbsolute = srcPath[0] === \'\' || srcPath[0] && srcPath[0].charAt(0) === \'/\'; // put the host back\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? \'\' : srcPath.length ? srcPath.shift() : \'\'; //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject(\'mailto:local1@domain1\', \'local2@domain2\')\n\n    var authInHost = result.host && result.host.indexOf(\'@\') > 0 ? result.host.split(\'@\') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift(\'\');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join(\'/\');\n  } //to support request.http\n\n\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : \'\') + (result.search ? result.search : \'\');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== \':\') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) this.hostname = host;\n};\n\nvar url = {\n  parse: parse,\n  resolve: resolve,\n  resolveObject: resolveObject,\n  format: format$1,\n  Url: Url_1\n};\n\nfunction getPropertyReference(propertyName) {\n  for (var i = 0; i < v8.layout.length; i++) {\n    for (var key in v8[v8.layout[i]]) {\n      if (key === propertyName) return v8[v8.layout[i]][key];\n    }\n  }\n\n  for (var _i = 0; _i < v8.paint.length; _i++) {\n    for (var _key2 in v8[v8.paint[_i]]) {\n      if (_key2 === propertyName) return v8[v8.paint[_i]][_key2];\n    }\n  }\n\n  return null;\n}\n\nfunction eachSource(style, callback) {\n  for (var k in style.sources) {\n    callback(style.sources[k]);\n  }\n}\n\nfunction eachLayer(style, callback) {\n  var _iterator = _createForOfIteratorHelper(style.layers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _layer = _step.value;\n      callback(_layer);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction eachProperty(style, options, callback) {\n  function inner(layer, propertyType) {\n    var properties = layer[propertyType];\n    if (!properties) return;\n    Object.keys(properties).forEach(function (key) {\n      callback({\n        path: [layer.id, propertyType, key],\n        key: key,\n        value: properties[key],\n        reference: getPropertyReference(key),\n        set: function set(x) {\n          properties[key] = x;\n        }\n      });\n    });\n  }\n\n  eachLayer(style, function (layer) {\n    if (options.paint) {\n      inner(layer, \'paint\');\n    }\n\n    if (options.layout) {\n      inner(layer, \'layout\');\n    }\n  });\n}\n\nfunction eachLayout(layer, callback) {\n  for (var k in layer) {\n    if (k.indexOf(\'layout\') === 0) {\n      callback(layer[k], k);\n    }\n  }\n}\n\nfunction eachPaint(layer, callback) {\n  for (var k in layer) {\n    if (k.indexOf(\'paint\') === 0) {\n      callback(layer[k], k);\n    }\n  }\n}\n\nfunction resolveConstant(style, value) {\n  if (typeof value === \'string\' && value[0] === \'@\') {\n    return resolveConstant(style, style.constants[value]);\n  } else {\n    return value;\n  }\n}\n\nfunction isFunction(value) {\n  return Array.isArray(value.stops);\n}\n\nfunction renameProperty(obj, from, to) {\n  obj[to] = obj[from];\n  delete obj[from];\n}\n\nfunction migrateToV8(style) {\n  style.version = 8;\n  eachSource(style, function (source) {\n    if (source.type === \'video\' && source.url !== undefined) {\n      renameProperty(source, \'url\', \'urls\');\n    }\n\n    if (source.type === \'video\') {\n      source.coordinates.forEach(function (coord) {\n        return coord.reverse();\n      });\n    }\n  });\n  eachLayer(style, function (layer) {\n    eachLayout(layer, function (layout) {\n      if (layout[\'symbol-min-distance\'] !== undefined) {\n        renameProperty(layout, \'symbol-min-distance\', \'symbol-spacing\');\n      }\n    });\n    eachPaint(layer, function (paint) {\n      if (paint[\'background-image\'] !== undefined) {\n        renameProperty(paint, \'background-image\', \'background-pattern\');\n      }\n\n      if (paint[\'line-image\'] !== undefined) {\n        renameProperty(paint, \'line-image\', \'line-pattern\');\n      }\n\n      if (paint[\'fill-image\'] !== undefined) {\n        renameProperty(paint, \'fill-image\', \'fill-pattern\');\n      }\n    });\n  });\n  eachProperty(style, {\n    paint: true,\n    layout: true\n  }, function (property) {\n    var value = resolveConstant(style, property.value);\n\n    if (isFunction(value)) {\n      value.stops.forEach(function (stop) {\n        stop[1] = resolveConstant(style, stop[1]);\n      });\n    }\n\n    property.set(value);\n  });\n  delete style.constants;\n  eachLayer(style, function (layer) {\n    eachLayout(layer, function (layout) {\n      delete layout[\'text-max-size\'];\n      delete layout[\'icon-max-size\'];\n    });\n    eachPaint(layer, function (paint) {\n      if (paint[\'text-size\']) {\n        if (!layer.layout) layer.layout = {};\n        layer.layout[\'text-size\'] = paint[\'text-size\'];\n        delete paint[\'text-size\'];\n      }\n\n      if (paint[\'icon-size\']) {\n        if (!layer.layout) layer.layout = {};\n        layer.layout[\'icon-size\'] = paint[\'icon-size\'];\n        delete paint[\'icon-size\'];\n      }\n    });\n  });\n\n  function migrateFontstackURL(input) {\n    var inputParsed = url.parse(input);\n    var inputPathnameParts = inputParsed.pathname.split(\'/\');\n\n    if (inputParsed.protocol !== \'mapbox:\') {\n      return input;\n    } else if (inputParsed.hostname === \'fontstack\') {\n      return \'mapbox://fonts/mapbox/{fontstack}/{range}.pbf\';\n    } else if (inputParsed.hostname === \'fonts\') {\n      return "mapbox://fonts/".concat(inputPathnameParts[2], "/{fontstack}/{range}.pbf");\n    } else ;\n  }\n\n  if (style.glyphs) {\n    style.glyphs = migrateFontstackURL(style.glyphs);\n  }\n\n  function migrateFontStack(font) {\n    function splitAndTrim(string) {\n      return string.split(\',\').map(function (s) {\n        return s.trim();\n      });\n    }\n\n    if (Array.isArray(font)) {\n      return font;\n    } else if (typeof font === \'string\') {\n      return splitAndTrim(font);\n    } else if (typeof font === \'object\') {\n      font.stops.forEach(function (stop) {\n        stop[1] = splitAndTrim(stop[1]);\n      });\n      return font;\n    } else {\n      throw new Error(\'unexpected font value\');\n    }\n  }\n\n  eachLayer(style, function (layer) {\n    eachLayout(layer, function (layout) {\n      if (layout[\'text-font\']) {\n        layout[\'text-font\'] = migrateFontStack(layout[\'text-font\']);\n      }\n    });\n  });\n  var firstSymbolLayer = 0;\n\n  for (var i = style.layers.length - 1; i >= 0; i--) {\n    var _layer2 = style.layers[i];\n\n    if (_layer2.type !== \'symbol\') {\n      firstSymbolLayer = i + 1;\n      break;\n    }\n  }\n\n  var symbolLayers = style.layers.splice(firstSymbolLayer);\n  symbolLayers.reverse();\n  style.layers = style.layers.concat(symbolLayers);\n  return style;\n}\n\nfunction extend(output) {\n  for (var _len = arguments.length, inputs = new Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n    inputs[_key3 - 1] = arguments[_key3];\n  }\n\n  for (var _i2 = 0, _inputs = inputs; _i2 < _inputs.length; _i2++) {\n    var input = _inputs[_i2];\n\n    for (var k in input) {\n      output[k] = input[k];\n    }\n  }\n\n  return output;\n}\n\nvar ParsingError = /*#__PURE__*/function (_Error) {\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(ParsingError, _Error);\n\n  var _super = _createSuper(ParsingError);\n\n  function ParsingError(key, message) {\n    var _this;\n\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ParsingError);\n\n    _this = _super.call(this, message);\n    _this.message = message;\n    _this.key = key;\n    return _this;\n  }\n\n  return ParsingError;\n}( /*#__PURE__*/(0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)(Error));\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope(parent) {\n    var bindings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Scope);\n\n    this.parent = parent;\n    this.bindings = {};\n\n    var _iterator2 = _createForOfIteratorHelper(bindings),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step2.value, 2),\n            name = _step2$value[0],\n            _expression = _step2$value[1];\n\n        this.bindings[name] = _expression;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Scope, [{\n    key: "concat",\n    value: function concat(bindings) {\n      return new Scope(this, bindings);\n    }\n  }, {\n    key: "get",\n    value: function get(name) {\n      if (this.bindings[name]) {\n        return this.bindings[name];\n      }\n\n      if (this.parent) {\n        return this.parent.get(name);\n      }\n\n      throw new Error("".concat(name, " not found in scope."));\n    }\n  }, {\n    key: "has",\n    value: function has(name) {\n      if (this.bindings[name]) return true;\n      return this.parent ? this.parent.has(name) : false;\n    }\n  }]);\n\n  return Scope;\n}();\n\nvar NullType = {\n  kind: \'null\'\n};\nvar NumberType = {\n  kind: \'number\'\n};\nvar StringType = {\n  kind: \'string\'\n};\nvar BooleanType = {\n  kind: \'boolean\'\n};\nvar ColorType = {\n  kind: \'color\'\n};\nvar ObjectType = {\n  kind: \'object\'\n};\nvar ValueType = {\n  kind: \'value\'\n};\nvar ErrorType = {\n  kind: \'error\'\n};\nvar CollatorType = {\n  kind: \'collator\'\n};\nvar FormattedType = {\n  kind: \'formatted\'\n};\nvar ResolvedImageType = {\n  kind: \'resolvedImage\'\n};\n\nfunction array(itemType, N) {\n  return {\n    kind: \'array\',\n    itemType: itemType,\n    N: N\n  };\n}\n\nfunction toString(type) {\n  if (type.kind === \'array\') {\n    var itemType = toString(type.itemType);\n    return typeof type.N === \'number\' ? "array<".concat(itemType, ", ").concat(type.N, ">") : type.itemType.kind === \'value\' ? \'array\' : "array<".concat(itemType, ">");\n  } else {\n    return type.kind;\n  }\n}\n\nvar valueMemberTypes = [NullType, NumberType, StringType, BooleanType, ColorType, FormattedType, ObjectType, array(ValueType), ResolvedImageType];\n\nfunction _checkSubtype(expected, t) {\n  if (t.kind === \'error\') {\n    return null;\n  } else if (expected.kind === \'array\') {\n    if (t.kind === \'array\' && (t.N === 0 && t.itemType.kind === \'value\' || !_checkSubtype(expected.itemType, t.itemType)) && (typeof expected.N !== \'number\' || expected.N === t.N)) {\n      return null;\n    }\n  } else if (expected.kind === t.kind) {\n    return null;\n  } else if (expected.kind === \'value\') {\n    var _iterator3 = _createForOfIteratorHelper(valueMemberTypes),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var memberType = _step3.value;\n\n        if (!_checkSubtype(memberType, t)) {\n          return null;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return "Expected ".concat(toString(expected), " but found ").concat(toString(t), " instead.");\n}\n\nfunction isValidType(provided, allowedTypes) {\n  return allowedTypes.some(function (t) {\n    return t.kind === provided.kind;\n  });\n}\n\nfunction isValidNativeType(provided, allowedTypes) {\n  return allowedTypes.some(function (t) {\n    if (t === \'null\') {\n      return provided === null;\n    } else if (t === \'array\') {\n      return Array.isArray(provided);\n    } else if (t === \'object\') {\n      return provided && !Array.isArray(provided) && typeof provided === \'object\';\n    } else {\n      return t === typeof provided;\n    }\n  });\n}\n\nvar csscolorparser = createCommonjsModule(function (module, exports) {\n  // (c) Dean McNamee <dean@gmail.com>, 2012.\n  //\n  // https://github.com/deanm/css-color-parser-js\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a copy\n  // of this software and associated documentation files (the "Software"), to\n  // deal in the Software without restriction, including without limitation the\n  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n  // sell copies of the Software, and to permit persons to whom the Software is\n  // furnished to do so, subject to the following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included in\n  // all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n  // IN THE SOFTWARE.\n  // http://www.w3.org/TR/css3-color/\n  var kCSSColorTable = {\n    "transparent": [0, 0, 0, 0],\n    "aliceblue": [240, 248, 255, 1],\n    "antiquewhite": [250, 235, 215, 1],\n    "aqua": [0, 255, 255, 1],\n    "aquamarine": [127, 255, 212, 1],\n    "azure": [240, 255, 255, 1],\n    "beige": [245, 245, 220, 1],\n    "bisque": [255, 228, 196, 1],\n    "black": [0, 0, 0, 1],\n    "blanchedalmond": [255, 235, 205, 1],\n    "blue": [0, 0, 255, 1],\n    "blueviolet": [138, 43, 226, 1],\n    "brown": [165, 42, 42, 1],\n    "burlywood": [222, 184, 135, 1],\n    "cadetblue": [95, 158, 160, 1],\n    "chartreuse": [127, 255, 0, 1],\n    "chocolate": [210, 105, 30, 1],\n    "coral": [255, 127, 80, 1],\n    "cornflowerblue": [100, 149, 237, 1],\n    "cornsilk": [255, 248, 220, 1],\n    "crimson": [220, 20, 60, 1],\n    "cyan": [0, 255, 255, 1],\n    "darkblue": [0, 0, 139, 1],\n    "darkcyan": [0, 139, 139, 1],\n    "darkgoldenrod": [184, 134, 11, 1],\n    "darkgray": [169, 169, 169, 1],\n    "darkgreen": [0, 100, 0, 1],\n    "darkgrey": [169, 169, 169, 1],\n    "darkkhaki": [189, 183, 107, 1],\n    "darkmagenta": [139, 0, 139, 1],\n    "darkolivegreen": [85, 107, 47, 1],\n    "darkorange": [255, 140, 0, 1],\n    "darkorchid": [153, 50, 204, 1],\n    "darkred": [139, 0, 0, 1],\n    "darksalmon": [233, 150, 122, 1],\n    "darkseagreen": [143, 188, 143, 1],\n    "darkslateblue": [72, 61, 139, 1],\n    "darkslategray": [47, 79, 79, 1],\n    "darkslategrey": [47, 79, 79, 1],\n    "darkturquoise": [0, 206, 209, 1],\n    "darkviolet": [148, 0, 211, 1],\n    "deeppink": [255, 20, 147, 1],\n    "deepskyblue": [0, 191, 255, 1],\n    "dimgray": [105, 105, 105, 1],\n    "dimgrey": [105, 105, 105, 1],\n    "dodgerblue": [30, 144, 255, 1],\n    "firebrick": [178, 34, 34, 1],\n    "floralwhite": [255, 250, 240, 1],\n    "forestgreen": [34, 139, 34, 1],\n    "fuchsia": [255, 0, 255, 1],\n    "gainsboro": [220, 220, 220, 1],\n    "ghostwhite": [248, 248, 255, 1],\n    "gold": [255, 215, 0, 1],\n    "goldenrod": [218, 165, 32, 1],\n    "gray": [128, 128, 128, 1],\n    "green": [0, 128, 0, 1],\n    "greenyellow": [173, 255, 47, 1],\n    "grey": [128, 128, 128, 1],\n    "honeydew": [240, 255, 240, 1],\n    "hotpink": [255, 105, 180, 1],\n    "indianred": [205, 92, 92, 1],\n    "indigo": [75, 0, 130, 1],\n    "ivory": [255, 255, 240, 1],\n    "khaki": [240, 230, 140, 1],\n    "lavender": [230, 230, 250, 1],\n    "lavenderblush": [255, 240, 245, 1],\n    "lawngreen": [124, 252, 0, 1],\n    "lemonchiffon": [255, 250, 205, 1],\n    "lightblue": [173, 216, 230, 1],\n    "lightcoral": [240, 128, 128, 1],\n    "lightcyan": [224, 255, 255, 1],\n    "lightgoldenrodyellow": [250, 250, 210, 1],\n    "lightgray": [211, 211, 211, 1],\n    "lightgreen": [144, 238, 144, 1],\n    "lightgrey": [211, 211, 211, 1],\n    "lightpink": [255, 182, 193, 1],\n    "lightsalmon": [255, 160, 122, 1],\n    "lightseagreen": [32, 178, 170, 1],\n    "lightskyblue": [135, 206, 250, 1],\n    "lightslategray": [119, 136, 153, 1],\n    "lightslategrey": [119, 136, 153, 1],\n    "lightsteelblue": [176, 196, 222, 1],\n    "lightyellow": [255, 255, 224, 1],\n    "lime": [0, 255, 0, 1],\n    "limegreen": [50, 205, 50, 1],\n    "linen": [250, 240, 230, 1],\n    "magenta": [255, 0, 255, 1],\n    "maroon": [128, 0, 0, 1],\n    "mediumaquamarine": [102, 205, 170, 1],\n    "mediumblue": [0, 0, 205, 1],\n    "mediumorchid": [186, 85, 211, 1],\n    "mediumpurple": [147, 112, 219, 1],\n    "mediumseagreen": [60, 179, 113, 1],\n    "mediumslateblue": [123, 104, 238, 1],\n    "mediumspringgreen": [0, 250, 154, 1],\n    "mediumturquoise": [72, 209, 204, 1],\n    "mediumvioletred": [199, 21, 133, 1],\n    "midnightblue": [25, 25, 112, 1],\n    "mintcream": [245, 255, 250, 1],\n    "mistyrose": [255, 228, 225, 1],\n    "moccasin": [255, 228, 181, 1],\n    "navajowhite": [255, 222, 173, 1],\n    "navy": [0, 0, 128, 1],\n    "oldlace": [253, 245, 230, 1],\n    "olive": [128, 128, 0, 1],\n    "olivedrab": [107, 142, 35, 1],\n    "orange": [255, 165, 0, 1],\n    "orangered": [255, 69, 0, 1],\n    "orchid": [218, 112, 214, 1],\n    "palegoldenrod": [238, 232, 170, 1],\n    "palegreen": [152, 251, 152, 1],\n    "paleturquoise": [175, 238, 238, 1],\n    "palevioletred": [219, 112, 147, 1],\n    "papayawhip": [255, 239, 213, 1],\n    "peachpuff": [255, 218, 185, 1],\n    "peru": [205, 133, 63, 1],\n    "pink": [255, 192, 203, 1],\n    "plum": [221, 160, 221, 1],\n    "powderblue": [176, 224, 230, 1],\n    "purple": [128, 0, 128, 1],\n    "rebeccapurple": [102, 51, 153, 1],\n    "red": [255, 0, 0, 1],\n    "rosybrown": [188, 143, 143, 1],\n    "royalblue": [65, 105, 225, 1],\n    "saddlebrown": [139, 69, 19, 1],\n    "salmon": [250, 128, 114, 1],\n    "sandybrown": [244, 164, 96, 1],\n    "seagreen": [46, 139, 87, 1],\n    "seashell": [255, 245, 238, 1],\n    "sienna": [160, 82, 45, 1],\n    "silver": [192, 192, 192, 1],\n    "skyblue": [135, 206, 235, 1],\n    "slateblue": [106, 90, 205, 1],\n    "slategray": [112, 128, 144, 1],\n    "slategrey": [112, 128, 144, 1],\n    "snow": [255, 250, 250, 1],\n    "springgreen": [0, 255, 127, 1],\n    "steelblue": [70, 130, 180, 1],\n    "tan": [210, 180, 140, 1],\n    "teal": [0, 128, 128, 1],\n    "thistle": [216, 191, 216, 1],\n    "tomato": [255, 99, 71, 1],\n    "turquoise": [64, 224, 208, 1],\n    "violet": [238, 130, 238, 1],\n    "wheat": [245, 222, 179, 1],\n    "white": [255, 255, 255, 1],\n    "whitesmoke": [245, 245, 245, 1],\n    "yellow": [255, 255, 0, 1],\n    "yellowgreen": [154, 205, 50, 1]\n  };\n\n  function clamp_css_byte(i) {\n    // Clamp to integer 0 .. 255.\n    i = Math.round(i); // Seems to be what Chrome does (vs truncation).\n\n    return i < 0 ? 0 : i > 255 ? 255 : i;\n  }\n\n  function clamp_css_float(f) {\n    // Clamp to float 0.0 .. 1.0.\n    return f < 0 ? 0 : f > 1 ? 1 : f;\n  }\n\n  function parse_css_int(str) {\n    // int or percentage.\n    if (str[str.length - 1] === \'%\') return clamp_css_byte(parseFloat(str) / 100 * 255);\n    return clamp_css_byte(parseInt(str));\n  }\n\n  function parse_css_float(str) {\n    // float or percentage.\n    if (str[str.length - 1] === \'%\') return clamp_css_float(parseFloat(str) / 100);\n    return clamp_css_float(parseFloat(str));\n  }\n\n  function css_hue_to_rgb(m1, m2, h) {\n    if (h < 0) h += 1;else if (h > 1) h -= 1;\n    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;\n    if (h * 2 < 1) return m2;\n    if (h * 3 < 2) return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n    return m1;\n  }\n\n  function parseCSSColor(css_str) {\n    // Remove all whitespace, not compliant, but should just be more accepting.\n    var str = css_str.replace(/ /g, \'\').toLowerCase(); // Color keywords (and transparent) lookup.\n\n    if (str in kCSSColorTable) return kCSSColorTable[str].slice(); // dup.\n    // #abc and #abc123 syntax.\n\n    if (str[0] === \'#\') {\n      if (str.length === 4) {\n        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n\n        if (!(iv >= 0 && iv <= 0xfff)) return null; // Covers NaN.\n\n        return [(iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1];\n      } else if (str.length === 7) {\n        var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n\n        if (!(iv >= 0 && iv <= 0xffffff)) return null; // Covers NaN.\n\n        return [(iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1];\n      }\n\n      return null;\n    }\n\n    var op = str.indexOf(\'(\'),\n        ep = str.indexOf(\')\');\n\n    if (op !== -1 && ep + 1 === str.length) {\n      var fname = str.substr(0, op);\n      var params = str.substr(op + 1, ep - (op + 1)).split(\',\');\n      var alpha = 1; // To allow case fallthrough.\n\n      switch (fname) {\n        case \'rgba\':\n          if (params.length !== 4) return null;\n          alpha = parse_css_float(params.pop());\n        // Fall through.\n\n        case \'rgb\':\n          if (params.length !== 3) return null;\n          return [parse_css_int(params[0]), parse_css_int(params[1]), parse_css_int(params[2]), alpha];\n\n        case \'hsla\':\n          if (params.length !== 4) return null;\n          alpha = parse_css_float(params.pop());\n        // Fall through.\n\n        case \'hsl\':\n          if (params.length !== 3) return null;\n          var h = (parseFloat(params[0]) % 360 + 360) % 360 / 360; // 0 .. 1\n          // NOTE(deanm): According to the CSS spec s/l should only be\n          // percentages, but we don\'t bother and let float or percentage.\n\n          var s = parse_css_float(params[1]);\n          var l = parse_css_float(params[2]);\n          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n          var m1 = l * 2 - m2;\n          return [clamp_css_byte(css_hue_to_rgb(m1, m2, h + 1 / 3) * 255), clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255), clamp_css_byte(css_hue_to_rgb(m1, m2, h - 1 / 3) * 255), alpha];\n\n        default:\n          return null;\n      }\n    }\n\n    return null;\n  }\n\n  try {\n    exports.parseCSSColor = parseCSSColor;\n  } catch (e) {}\n});\n\nvar Color = /*#__PURE__*/function () {\n  function Color(r, g, b) {\n    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Color);\n\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Color, [{\n    key: "toString",\n    value: function toString() {\n      var _this$toArray = this.toArray(),\n          _this$toArray2 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_this$toArray, 4),\n          r = _this$toArray2[0],\n          g = _this$toArray2[1],\n          b = _this$toArray2[2],\n          a = _this$toArray2[3];\n\n      return "rgba(".concat(Math.round(r), ",").concat(Math.round(g), ",").concat(Math.round(b), ",").concat(a, ")");\n    }\n  }, {\n    key: "toArray",\n    value: function toArray() {\n      var r = this.r,\n          g = this.g,\n          b = this.b,\n          a = this.a;\n      return a === 0 ? [0, 0, 0, 0] : [r * 255 / a, g * 255 / a, b * 255 / a, a];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(input) {\n      if (!input) {\n        return undefined;\n      }\n\n      if (input instanceof Color) {\n        return input;\n      }\n\n      if (typeof input !== \'string\') {\n        return undefined;\n      }\n\n      var rgba = csscolorparser.parseCSSColor(input);\n\n      if (!rgba) {\n        return undefined;\n      }\n\n      return new Color(rgba[0] / 255 * rgba[3], rgba[1] / 255 * rgba[3], rgba[2] / 255 * rgba[3], rgba[3]);\n    }\n  }]);\n\n  return Color;\n}();\n\nColor.black = new Color(0, 0, 0, 1);\nColor.white = new Color(1, 1, 1, 1);\nColor.transparent = new Color(0, 0, 0, 0);\nColor.red = new Color(1, 0, 0, 1);\nColor.blue = new Color(0, 0, 1, 1);\n\nvar Collator = /*#__PURE__*/function () {\n  function Collator(caseSensitive, diacriticSensitive, locale) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Collator);\n\n    if (caseSensitive) this.sensitivity = diacriticSensitive ? \'variant\' : \'case\';else this.sensitivity = diacriticSensitive ? \'accent\' : \'base\';\n    this.locale = locale;\n    this.collator = new Intl.Collator(this.locale ? this.locale : [], {\n      sensitivity: this.sensitivity,\n      usage: \'search\'\n    });\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Collator, [{\n    key: "compare",\n    value: function compare(lhs, rhs) {\n      return this.collator.compare(lhs, rhs);\n    }\n  }, {\n    key: "resolvedLocale",\n    value: function resolvedLocale() {\n      return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;\n    }\n  }]);\n\n  return Collator;\n}();\n\nvar FormattedSection = function FormattedSection(text, image, scale, fontStack, textColor) {\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, FormattedSection);\n\n  this.text = text;\n  this.image = image;\n  this.scale = scale;\n  this.fontStack = fontStack;\n  this.textColor = textColor;\n};\n\nvar Formatted = /*#__PURE__*/function () {\n  function Formatted(sections) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Formatted);\n\n    this.sections = sections;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Formatted, [{\n    key: "isEmpty",\n    value: function isEmpty() {\n      if (this.sections.length === 0) return true;\n      return !this.sections.some(function (section) {\n        return section.text.length !== 0 || section.image && section.image.name.length !== 0;\n      });\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      if (this.sections.length === 0) return \'\';\n      return this.sections.map(function (section) {\n        return section.text;\n      }).join(\'\');\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'format\'];\n\n      var _iterator4 = _createForOfIteratorHelper(this.sections),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var section = _step4.value;\n\n          if (section.image) {\n            serialized.push([\'image\', section.image.name]);\n            continue;\n          }\n\n          serialized.push(section.text);\n          var options = {};\n\n          if (section.fontStack) {\n            options[\'text-font\'] = [\'literal\', section.fontStack.split(\',\')];\n          }\n\n          if (section.scale) {\n            options[\'font-scale\'] = section.scale;\n          }\n\n          if (section.textColor) {\n            options[\'text-color\'] = [\'rgba\'].concat(section.textColor.toArray());\n          }\n\n          serialized.push(options);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return serialized;\n    }\n  }], [{\n    key: "fromString",\n    value: function fromString(unformatted) {\n      return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);\n    }\n  }, {\n    key: "factory",\n    value: function factory(text) {\n      if (text instanceof Formatted) {\n        return text;\n      } else {\n        return Formatted.fromString(text);\n      }\n    }\n  }]);\n\n  return Formatted;\n}();\n\nvar ResolvedImage = /*#__PURE__*/function () {\n  function ResolvedImage(options) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ResolvedImage);\n\n    this.name = options.name;\n    this.available = options.available;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(ResolvedImage, [{\n    key: "toString",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'image\', this.name];\n    }\n  }], [{\n    key: "fromString",\n    value: function fromString(name) {\n      if (!name) return null;\n      return new ResolvedImage({\n        name: name,\n        available: false\n      });\n    }\n  }]);\n\n  return ResolvedImage;\n}();\n\nfunction validateRGBA(r, g, b, a) {\n  if (!(typeof r === \'number\' && r >= 0 && r <= 255 && typeof g === \'number\' && g >= 0 && g <= 255 && typeof b === \'number\' && b >= 0 && b <= 255)) {\n    var value = typeof a === \'number\' ? [r, g, b, a] : [r, g, b];\n    return "Invalid rgba value [".concat(value.join(\', \'), "]: \'r\', \'g\', and \'b\' must be between 0 and 255.");\n  }\n\n  if (!(typeof a === \'undefined\' || typeof a === \'number\' && a >= 0 && a <= 1)) {\n    return "Invalid rgba value [".concat([r, g, b, a].join(\', \'), "]: \'a\' must be between 0 and 1.");\n  }\n\n  return null;\n}\n\nfunction isValue(mixed) {\n  if (mixed === null) {\n    return true;\n  } else if (typeof mixed === \'string\') {\n    return true;\n  } else if (typeof mixed === \'boolean\') {\n    return true;\n  } else if (typeof mixed === \'number\') {\n    return true;\n  } else if (mixed instanceof Color) {\n    return true;\n  } else if (mixed instanceof Collator) {\n    return true;\n  } else if (mixed instanceof Formatted) {\n    return true;\n  } else if (mixed instanceof ResolvedImage) {\n    return true;\n  } else if (Array.isArray(mixed)) {\n    var _iterator5 = _createForOfIteratorHelper(mixed),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var item = _step5.value;\n\n        if (!isValue(item)) {\n          return false;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    return true;\n  } else if (typeof mixed === \'object\') {\n    for (var key in mixed) {\n      if (!isValue(mixed[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction typeOf(value) {\n  if (value === null) {\n    return NullType;\n  } else if (typeof value === \'string\') {\n    return StringType;\n  } else if (typeof value === \'boolean\') {\n    return BooleanType;\n  } else if (typeof value === \'number\') {\n    return NumberType;\n  } else if (value instanceof Color) {\n    return ColorType;\n  } else if (value instanceof Collator) {\n    return CollatorType;\n  } else if (value instanceof Formatted) {\n    return FormattedType;\n  } else if (value instanceof ResolvedImage) {\n    return ResolvedImageType;\n  } else if (Array.isArray(value)) {\n    var length = value.length;\n    var itemType;\n\n    var _iterator6 = _createForOfIteratorHelper(value),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var item = _step6.value;\n        var t = typeOf(item);\n\n        if (!itemType) {\n          itemType = t;\n        } else if (itemType === t) {\n          continue;\n        } else {\n          itemType = ValueType;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    return array(itemType || ValueType, length);\n  } else {\n    return ObjectType;\n  }\n}\n\nfunction toString$1(value) {\n  var type = typeof value;\n\n  if (value === null) {\n    return \'\';\n  } else if (type === \'string\' || type === \'number\' || type === \'boolean\') {\n    return String(value);\n  } else if (value instanceof Color || value instanceof Formatted || value instanceof ResolvedImage) {\n    return value.toString();\n  } else {\n    return JSON.stringify(value);\n  }\n}\n\nvar Literal = /*#__PURE__*/function () {\n  function Literal(type, value) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Literal);\n\n    this.type = type;\n    this.value = value;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Literal, [{\n    key: "evaluate",\n    value: function evaluate() {\n      return this.value;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild() {}\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return true;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      if (this.type.kind === \'array\' || this.type.kind === \'object\') {\n        return [\'literal\', this.value];\n      } else if (this.value instanceof Color) {\n        return [\'rgba\'].concat(this.value.toArray());\n      } else if (this.value instanceof Formatted) {\n        return this.value.serialize();\n      } else {\n        return this.value;\n      }\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2) return context.error("\'literal\' expression requires exactly one argument, but found ".concat(args.length - 1, " instead."));\n      if (!isValue(args[1])) return context.error("invalid value");\n      var value = args[1];\n      var type = typeOf(value);\n      var expected = context.expectedType;\n\n      if (type.kind === \'array\' && type.N === 0 && expected && expected.kind === \'array\' && (typeof expected.N !== \'number\' || expected.N === 0)) {\n        type = expected;\n      }\n\n      return new Literal(type, value);\n    }\n  }]);\n\n  return Literal;\n}();\n\nvar RuntimeError = /*#__PURE__*/function () {\n  function RuntimeError(message) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, RuntimeError);\n\n    this.name = \'ExpressionEvaluationError\';\n    this.message = message;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(RuntimeError, [{\n    key: "toJSON",\n    value: function toJSON() {\n      return this.message;\n    }\n  }]);\n\n  return RuntimeError;\n}();\n\nvar types = {\n  string: StringType,\n  number: NumberType,\n  boolean: BooleanType,\n  object: ObjectType\n};\n\nvar Assertion = /*#__PURE__*/function () {\n  function Assertion(type, args) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Assertion);\n\n    this.type = type;\n    this.args = args;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Assertion, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      for (var i = 0; i < this.args.length; i++) {\n        var value = this.args[i].evaluate(ctx);\n\n        var _error = _checkSubtype(this.type, typeOf(value));\n\n        if (!_error) {\n          return value;\n        } else if (i === this.args.length - 1) {\n          throw new RuntimeError("Expected value to be of type ".concat(toString(this.type), ", but found ").concat(toString(typeOf(value)), " instead."));\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      this.args.forEach(fn);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.args.every(function (arg) {\n        return arg.outputDefined();\n      });\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var type = this.type;\n      var serialized = [type.kind];\n\n      if (type.kind === \'array\') {\n        var itemType = type.itemType;\n\n        if (itemType.kind === \'string\' || itemType.kind === \'number\' || itemType.kind === \'boolean\') {\n          serialized.push(itemType.kind);\n          var N = type.N;\n\n          if (typeof N === \'number\' || this.args.length > 1) {\n            serialized.push(N);\n          }\n        }\n      }\n\n      return serialized.concat(this.args.map(function (arg) {\n        return arg.serialize();\n      }));\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 2) return context.error("Expected at least one argument.");\n      var i = 1;\n      var type;\n      var name = args[0];\n\n      if (name === \'array\') {\n        var itemType;\n\n        if (args.length > 2) {\n          var _type = args[1];\n          if (typeof _type !== \'string\' || !(_type in types) || _type === \'object\') return context.error(\'The item type argument of "array" must be one of string, number, boolean\', 1);\n          itemType = types[_type];\n          i++;\n        } else {\n          itemType = ValueType;\n        }\n\n        var N;\n\n        if (args.length > 3) {\n          if (args[2] !== null && (typeof args[2] !== \'number\' || args[2] < 0 || args[2] !== Math.floor(args[2]))) {\n            return context.error(\'The length argument to "array" must be a positive integer literal\', 2);\n          }\n\n          N = args[2];\n          i++;\n        }\n\n        type = array(itemType, N);\n      } else {\n        type = types[name];\n      }\n\n      var parsed = [];\n\n      for (; i < args.length; i++) {\n        var input = context.parse(args[i], i, ValueType);\n        if (!input) return null;\n        parsed.push(input);\n      }\n\n      return new Assertion(type, parsed);\n    }\n  }]);\n\n  return Assertion;\n}();\n\nvar FormatExpression = /*#__PURE__*/function () {\n  function FormatExpression(sections) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, FormatExpression);\n\n    this.type = FormattedType;\n    this.sections = sections;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(FormatExpression, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var evaluateSection = function evaluateSection(section) {\n        var evaluatedContent = section.content.evaluate(ctx);\n\n        if (typeOf(evaluatedContent) === ResolvedImageType) {\n          return new FormattedSection(\'\', evaluatedContent, null, null, null);\n        }\n\n        return new FormattedSection(toString$1(evaluatedContent), null, section.scale ? section.scale.evaluate(ctx) : null, section.font ? section.font.evaluate(ctx).join(\',\') : null, section.textColor ? section.textColor.evaluate(ctx) : null);\n      };\n\n      return new Formatted(this.sections.map(evaluateSection));\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      var _iterator7 = _createForOfIteratorHelper(this.sections),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var section = _step7.value;\n          fn(section.content);\n\n          if (section.scale) {\n            fn(section.scale);\n          }\n\n          if (section.font) {\n            fn(section.font);\n          }\n\n          if (section.textColor) {\n            fn(section.textColor);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'format\'];\n\n      var _iterator8 = _createForOfIteratorHelper(this.sections),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var section = _step8.value;\n          serialized.push(section.content.serialize());\n          var options = {};\n\n          if (section.scale) {\n            options[\'font-scale\'] = section.scale.serialize();\n          }\n\n          if (section.font) {\n            options[\'text-font\'] = section.font.serialize();\n          }\n\n          if (section.textColor) {\n            options[\'text-color\'] = section.textColor.serialize();\n          }\n\n          serialized.push(options);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 2) {\n        return context.error("Expected at least one argument.");\n      }\n\n      var firstArg = args[1];\n\n      if (!Array.isArray(firstArg) && typeof firstArg === \'object\') {\n        return context.error("First argument must be an image or text section.");\n      }\n\n      var sections = [];\n      var nextTokenMayBeObject = false;\n\n      for (var i = 1; i <= args.length - 1; ++i) {\n        var arg = args[i];\n\n        if (nextTokenMayBeObject && typeof arg === \'object\' && !Array.isArray(arg)) {\n          nextTokenMayBeObject = false;\n          var scale = null;\n\n          if (arg[\'font-scale\']) {\n            scale = context.parse(arg[\'font-scale\'], 1, NumberType);\n            if (!scale) return null;\n          }\n\n          var font = null;\n\n          if (arg[\'text-font\']) {\n            font = context.parse(arg[\'text-font\'], 1, array(StringType));\n            if (!font) return null;\n          }\n\n          var textColor = null;\n\n          if (arg[\'text-color\']) {\n            textColor = context.parse(arg[\'text-color\'], 1, ColorType);\n            if (!textColor) return null;\n          }\n\n          var lastExpression = sections[sections.length - 1];\n          lastExpression.scale = scale;\n          lastExpression.font = font;\n          lastExpression.textColor = textColor;\n        } else {\n          var content = context.parse(args[i], 1, ValueType);\n          if (!content) return null;\n          var kind = content.type.kind;\n          if (kind !== \'string\' && kind !== \'value\' && kind !== \'null\' && kind !== \'resolvedImage\') return context.error("Formatted text type must be \'string\', \'value\', \'image\' or \'null\'.");\n          nextTokenMayBeObject = true;\n          sections.push({\n            content: content,\n            scale: null,\n            font: null,\n            textColor: null\n          });\n        }\n      }\n\n      return new FormatExpression(sections);\n    }\n  }]);\n\n  return FormatExpression;\n}();\n\nvar ImageExpression = /*#__PURE__*/function () {\n  function ImageExpression(input) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ImageExpression);\n\n    this.type = ResolvedImageType;\n    this.input = input;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(ImageExpression, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var evaluatedImageName = this.input.evaluate(ctx);\n      var value = ResolvedImage.fromString(evaluatedImageName);\n      if (value && ctx.availableImages) value.available = ctx.availableImages.indexOf(evaluatedImageName) > -1;\n      return value;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'image\', this.input.serialize()];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2) {\n        return context.error("Expected two arguments.");\n      }\n\n      var name = context.parse(args[1], 1, StringType);\n      if (!name) return context.error("No image name provided.");\n      return new ImageExpression(name);\n    }\n  }]);\n\n  return ImageExpression;\n}();\n\nvar types$1 = {\n  \'to-boolean\': BooleanType,\n  \'to-color\': ColorType,\n  \'to-number\': NumberType,\n  \'to-string\': StringType\n};\n\nvar Coercion = /*#__PURE__*/function () {\n  function Coercion(type, args) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Coercion);\n\n    this.type = type;\n    this.args = args;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Coercion, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      if (this.type.kind === \'boolean\') {\n        return Boolean(this.args[0].evaluate(ctx));\n      } else if (this.type.kind === \'color\') {\n        var input;\n\n        var _error2;\n\n        var _iterator9 = _createForOfIteratorHelper(this.args),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var arg = _step9.value;\n            input = arg.evaluate(ctx);\n            _error2 = null;\n\n            if (input instanceof Color) {\n              return input;\n            } else if (typeof input === \'string\') {\n              var c = ctx.parseColor(input);\n              if (c) return c;\n            } else if (Array.isArray(input)) {\n              if (input.length < 3 || input.length > 4) {\n                _error2 = "Invalid rbga value ".concat(JSON.stringify(input), ": expected an array containing either three or four numeric values.");\n              } else {\n                _error2 = validateRGBA(input[0], input[1], input[2], input[3]);\n              }\n\n              if (!_error2) {\n                return new Color(input[0] / 255, input[1] / 255, input[2] / 255, input[3]);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        throw new RuntimeError(_error2 || "Could not parse color from value \'".concat(typeof input === \'string\' ? input : String(JSON.stringify(input)), "\'"));\n      } else if (this.type.kind === \'number\') {\n        var value = null;\n\n        var _iterator10 = _createForOfIteratorHelper(this.args),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _arg = _step10.value;\n            value = _arg.evaluate(ctx);\n            if (value === null) return 0;\n            var num = Number(value);\n            if (isNaN(num)) continue;\n            return num;\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        throw new RuntimeError("Could not convert ".concat(JSON.stringify(value), " to number."));\n      } else if (this.type.kind === \'formatted\') {\n        return Formatted.fromString(toString$1(this.args[0].evaluate(ctx)));\n      } else if (this.type.kind === \'resolvedImage\') {\n        return ResolvedImage.fromString(toString$1(this.args[0].evaluate(ctx)));\n      } else {\n        return toString$1(this.args[0].evaluate(ctx));\n      }\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      this.args.forEach(fn);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.args.every(function (arg) {\n        return arg.outputDefined();\n      });\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      if (this.type.kind === \'formatted\') {\n        return new FormatExpression([{\n          content: this.args[0],\n          scale: null,\n          font: null,\n          textColor: null\n        }]).serialize();\n      }\n\n      if (this.type.kind === \'resolvedImage\') {\n        return new ImageExpression(this.args[0]).serialize();\n      }\n\n      var serialized = ["to-".concat(this.type.kind)];\n      this.eachChild(function (child) {\n        serialized.push(child.serialize());\n      });\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 2) return context.error("Expected at least one argument.");\n      var name = args[0];\n      if ((name === \'to-boolean\' || name === \'to-string\') && args.length !== 2) return context.error("Expected one argument.");\n      var type = types$1[name];\n      var parsed = [];\n\n      for (var i = 1; i < args.length; i++) {\n        var input = context.parse(args[i], i, ValueType);\n        if (!input) return null;\n        parsed.push(input);\n      }\n\n      return new Coercion(type, parsed);\n    }\n  }]);\n\n  return Coercion;\n}();\n\nvar geometryTypes = [\'Unknown\', \'Point\', \'LineString\', \'Polygon\'];\n\nvar EvaluationContext = /*#__PURE__*/function () {\n  function EvaluationContext() {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, EvaluationContext);\n\n    this.globals = null;\n    this.feature = null;\n    this.featureState = null;\n    this.formattedSection = null;\n    this._parseColorCache = {};\n    this.availableImages = null;\n    this.canonical = null;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(EvaluationContext, [{\n    key: "id",\n    value: function id() {\n      return this.feature && \'id\' in this.feature ? this.feature.id : null;\n    }\n  }, {\n    key: "geometryType",\n    value: function geometryType() {\n      return this.feature ? typeof this.feature.type === \'number\' ? geometryTypes[this.feature.type] : this.feature.type : null;\n    }\n  }, {\n    key: "geometry",\n    value: function geometry() {\n      return this.feature && \'geometry\' in this.feature ? this.feature.geometry : null;\n    }\n  }, {\n    key: "canonicalID",\n    value: function canonicalID() {\n      return this.canonical;\n    }\n  }, {\n    key: "properties",\n    value: function properties() {\n      return this.feature && this.feature.properties || {};\n    }\n  }, {\n    key: "parseColor",\n    value: function parseColor(input) {\n      var cached = this._parseColorCache[input];\n\n      if (!cached) {\n        cached = this._parseColorCache[input] = Color.parse(input);\n      }\n\n      return cached;\n    }\n  }]);\n\n  return EvaluationContext;\n}();\n\nvar CompoundExpression = /*#__PURE__*/function () {\n  function CompoundExpression(name, type, evaluate, args) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, CompoundExpression);\n\n    this.name = name;\n    this.type = type;\n    this._evaluate = evaluate;\n    this.args = args;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(CompoundExpression, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      return this._evaluate(ctx, this.args);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      this.args.forEach(fn);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [this.name].concat(this.args.map(function (arg) {\n        return arg.serialize();\n      }));\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      var op = args[0];\n      var definition = CompoundExpression.definitions[op];\n\n      if (!definition) {\n        return context.error("Unknown expression \\"".concat(op, "\\". If you wanted a literal array, use [\\"literal\\", [...]]."), 0);\n      }\n\n      var type = Array.isArray(definition) ? definition[0] : definition.type;\n      var availableOverloads = Array.isArray(definition) ? [[definition[1], definition[2]]] : definition.overloads;\n      var overloads = availableOverloads.filter(function (_ref) {\n        var _ref2 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref, 1),\n            signature = _ref2[0];\n\n        return !Array.isArray(signature) || signature.length === args.length - 1;\n      });\n      var signatureContext = null;\n\n      var _iterator11 = _createForOfIteratorHelper(overloads),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step11.value, 2),\n              params = _step11$value[0],\n              evaluate = _step11$value[1];\n\n          signatureContext = new ParsingContext(context.registry, context.path, null, context.scope);\n          var parsedArgs = [];\n          var argParseFailed = false;\n\n          for (var _i3 = 1; _i3 < args.length; _i3++) {\n            var arg = args[_i3];\n            var expectedType = Array.isArray(params) ? params[_i3 - 1] : params.type;\n\n            var _parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);\n\n            if (!_parsed) {\n              argParseFailed = true;\n              break;\n            }\n\n            parsedArgs.push(_parsed);\n          }\n\n          if (argParseFailed) {\n            continue;\n          }\n\n          if (Array.isArray(params)) {\n            if (params.length !== parsedArgs.length) {\n              signatureContext.error("Expected ".concat(params.length, " arguments, but found ").concat(parsedArgs.length, " instead."));\n              continue;\n            }\n          }\n\n          for (var _i4 = 0; _i4 < parsedArgs.length; _i4++) {\n            var _expected = Array.isArray(params) ? params[_i4] : params.type;\n\n            var _arg2 = parsedArgs[_i4];\n            signatureContext.concat(_i4 + 1).checkSubtype(_expected, _arg2.type);\n          }\n\n          if (signatureContext.errors.length === 0) {\n            return new CompoundExpression(op, type, evaluate, parsedArgs);\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      if (overloads.length === 1) {\n        var _context$errors;\n\n        (_context$errors = context.errors).push.apply(_context$errors, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(signatureContext.errors));\n      } else {\n        var expected = overloads.length ? overloads : availableOverloads;\n        var signatures = expected.map(function (_ref3) {\n          var _ref4 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref3, 1),\n              params = _ref4[0];\n\n          return stringifySignature(params);\n        }).join(\' | \');\n        var actualTypes = [];\n\n        for (var i = 1; i < args.length; i++) {\n          var parsed = context.parse(args[i], 1 + actualTypes.length);\n          if (!parsed) return null;\n          actualTypes.push(toString(parsed.type));\n        }\n\n        context.error("Expected arguments of type ".concat(signatures, ", but found (").concat(actualTypes.join(\', \'), ") instead."));\n      }\n\n      return null;\n    }\n  }, {\n    key: "register",\n    value: function register(registry, definitions) {\n      CompoundExpression.definitions = definitions;\n\n      for (var name in definitions) {\n        registry[name] = CompoundExpression;\n      }\n    }\n  }]);\n\n  return CompoundExpression;\n}();\n\nfunction stringifySignature(signature) {\n  if (Array.isArray(signature)) {\n    return "(".concat(signature.map(toString).join(\', \'), ")");\n  } else {\n    return "(".concat(toString(signature.type), "...)");\n  }\n}\n\nvar CollatorExpression = /*#__PURE__*/function () {\n  function CollatorExpression(caseSensitive, diacriticSensitive, locale) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, CollatorExpression);\n\n    this.type = CollatorType;\n    this.locale = locale;\n    this.caseSensitive = caseSensitive;\n    this.diacriticSensitive = diacriticSensitive;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(CollatorExpression, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      return new Collator(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.caseSensitive);\n      fn(this.diacriticSensitive);\n\n      if (this.locale) {\n        fn(this.locale);\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var options = {};\n      options[\'case-sensitive\'] = this.caseSensitive.serialize();\n      options[\'diacritic-sensitive\'] = this.diacriticSensitive.serialize();\n\n      if (this.locale) {\n        options[\'locale\'] = this.locale.serialize();\n      }\n\n      return [\'collator\', options];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2) return context.error("Expected one argument.");\n      var options = args[1];\n      if (typeof options !== \'object\' || Array.isArray(options)) return context.error("Collator options argument must be an object.");\n      var caseSensitive = context.parse(options[\'case-sensitive\'] === undefined ? false : options[\'case-sensitive\'], 1, BooleanType);\n      if (!caseSensitive) return null;\n      var diacriticSensitive = context.parse(options[\'diacritic-sensitive\'] === undefined ? false : options[\'diacritic-sensitive\'], 1, BooleanType);\n      if (!diacriticSensitive) return null;\n      var locale = null;\n\n      if (options[\'locale\']) {\n        locale = context.parse(options[\'locale\'], 1, StringType);\n        if (!locale) return null;\n      }\n\n      return new CollatorExpression(caseSensitive, diacriticSensitive, locale);\n    }\n  }]);\n\n  return CollatorExpression;\n}();\n\nvar EXTENT = 8192;\n\nfunction updateBBox(bbox, coord) {\n  bbox[0] = Math.min(bbox[0], coord[0]);\n  bbox[1] = Math.min(bbox[1], coord[1]);\n  bbox[2] = Math.max(bbox[2], coord[0]);\n  bbox[3] = Math.max(bbox[3], coord[1]);\n}\n\nfunction mercatorXfromLng(lng) {\n  return (180 + lng) / 360;\n}\n\nfunction mercatorYfromLat(lat) {\n  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;\n}\n\nfunction boxWithinBox(bbox1, bbox2) {\n  if (bbox1[0] <= bbox2[0]) return false;\n  if (bbox1[2] >= bbox2[2]) return false;\n  if (bbox1[1] <= bbox2[1]) return false;\n  if (bbox1[3] >= bbox2[3]) return false;\n  return true;\n}\n\nfunction getTileCoordinates(p, canonical) {\n  var x = mercatorXfromLng(p[0]);\n  var y = mercatorYfromLat(p[1]);\n  var tilesAtZoom = Math.pow(2, canonical.z);\n  return [Math.round(x * tilesAtZoom * EXTENT), Math.round(y * tilesAtZoom * EXTENT)];\n}\n\nfunction onBoundary(p, p1, p2) {\n  var x1 = p[0] - p1[0];\n  var y1 = p[1] - p1[1];\n  var x2 = p[0] - p2[0];\n  var y2 = p[1] - p2[1];\n  return x1 * y2 - x2 * y1 === 0 && x1 * x2 <= 0 && y1 * y2 <= 0;\n}\n\nfunction rayIntersect(p, p1, p2) {\n  return p1[1] > p[1] !== p2[1] > p[1] && p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0];\n}\n\nfunction pointWithinPolygon(point, rings) {\n  var inside = false;\n\n  for (var i = 0, len = rings.length; i < len; i++) {\n    var ring = rings[i];\n\n    for (var j = 0, len2 = ring.length; j < len2 - 1; j++) {\n      if (onBoundary(point, ring[j], ring[j + 1])) return false;\n      if (rayIntersect(point, ring[j], ring[j + 1])) inside = !inside;\n    }\n  }\n\n  return inside;\n}\n\nfunction pointWithinPolygons(point, polygons) {\n  for (var i = 0; i < polygons.length; i++) {\n    if (pointWithinPolygon(point, polygons[i])) return true;\n  }\n\n  return false;\n}\n\nfunction perp(v1, v2) {\n  return v1[0] * v2[1] - v1[1] * v2[0];\n}\n\nfunction twoSided(p1, p2, q1, q2) {\n  var x1 = p1[0] - q1[0];\n  var y1 = p1[1] - q1[1];\n  var x2 = p2[0] - q1[0];\n  var y2 = p2[1] - q1[1];\n  var x3 = q2[0] - q1[0];\n  var y3 = q2[1] - q1[1];\n  var det1 = x1 * y3 - x3 * y1;\n  var det2 = x2 * y3 - x3 * y2;\n  if (det1 > 0 && det2 < 0 || det1 < 0 && det2 > 0) return true;\n  return false;\n}\n\nfunction lineIntersectLine(a, b, c, d) {\n  var vectorP = [b[0] - a[0], b[1] - a[1]];\n  var vectorQ = [d[0] - c[0], d[1] - c[1]];\n  if (perp(vectorQ, vectorP) === 0) return false;\n  if (twoSided(a, b, c, d) && twoSided(c, d, a, b)) return true;\n  return false;\n}\n\nfunction lineIntersectPolygon(p1, p2, polygon) {\n  var _iterator12 = _createForOfIteratorHelper(polygon),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var ring = _step12.value;\n\n      for (var j = 0; j < ring.length - 1; ++j) {\n        if (lineIntersectLine(p1, p2, ring[j], ring[j + 1])) {\n          return true;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n\n  return false;\n}\n\nfunction lineStringWithinPolygon(line, polygon) {\n  for (var i = 0; i < line.length; ++i) {\n    if (!pointWithinPolygon(line[i], polygon)) {\n      return false;\n    }\n  }\n\n  for (var _i5 = 0; _i5 < line.length - 1; ++_i5) {\n    if (lineIntersectPolygon(line[_i5], line[_i5 + 1], polygon)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction lineStringWithinPolygons(line, polygons) {\n  for (var i = 0; i < polygons.length; i++) {\n    if (lineStringWithinPolygon(line, polygons[i])) return true;\n  }\n\n  return false;\n}\n\nfunction getTilePolygon(coordinates, bbox, canonical) {\n  var polygon = [];\n\n  for (var i = 0; i < coordinates.length; i++) {\n    var ring = [];\n\n    for (var j = 0; j < coordinates[i].length; j++) {\n      var coord = getTileCoordinates(coordinates[i][j], canonical);\n      updateBBox(bbox, coord);\n      ring.push(coord);\n    }\n\n    polygon.push(ring);\n  }\n\n  return polygon;\n}\n\nfunction getTilePolygons(coordinates, bbox, canonical) {\n  var polygons = [];\n\n  for (var i = 0; i < coordinates.length; i++) {\n    var polygon = getTilePolygon(coordinates[i], bbox, canonical);\n    polygons.push(polygon);\n  }\n\n  return polygons;\n}\n\nfunction updatePoint(p, bbox, polyBBox, worldSize) {\n  if (p[0] < polyBBox[0] || p[0] > polyBBox[2]) {\n    var halfWorldSize = worldSize * 0.5;\n    var shift = p[0] - polyBBox[0] > halfWorldSize ? -worldSize : polyBBox[0] - p[0] > halfWorldSize ? worldSize : 0;\n\n    if (shift === 0) {\n      shift = p[0] - polyBBox[2] > halfWorldSize ? -worldSize : polyBBox[2] - p[0] > halfWorldSize ? worldSize : 0;\n    }\n\n    p[0] += shift;\n  }\n\n  updateBBox(bbox, p);\n}\n\nfunction resetBBox(bbox) {\n  bbox[0] = bbox[1] = Infinity;\n  bbox[2] = bbox[3] = -Infinity;\n}\n\nfunction getTilePoints(geometry, pointBBox, polyBBox, canonical) {\n  var worldSize = Math.pow(2, canonical.z) * EXTENT;\n  var shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n  var tilePoints = [];\n\n  var _iterator13 = _createForOfIteratorHelper(geometry),\n      _step13;\n\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var points = _step13.value;\n\n      var _iterator14 = _createForOfIteratorHelper(points),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var point = _step14.value;\n          var p = [point.x + shifts[0], point.y + shifts[1]];\n          updatePoint(p, pointBBox, polyBBox, worldSize);\n          tilePoints.push(p);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n\n  return tilePoints;\n}\n\nfunction getTileLines(geometry, lineBBox, polyBBox, canonical) {\n  var worldSize = Math.pow(2, canonical.z) * EXTENT;\n  var shifts = [canonical.x * EXTENT, canonical.y * EXTENT];\n  var tileLines = [];\n\n  var _iterator15 = _createForOfIteratorHelper(geometry),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var _line = _step15.value;\n      var tileLine = [];\n\n      var _iterator18 = _createForOfIteratorHelper(_line),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var point = _step18.value;\n          var _p = [point.x + shifts[0], point.y + shifts[1]];\n          updateBBox(lineBBox, _p);\n          tileLine.push(_p);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      tileLines.push(tileLine);\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n\n  if (lineBBox[2] - lineBBox[0] <= worldSize / 2) {\n    resetBBox(lineBBox);\n\n    var _iterator16 = _createForOfIteratorHelper(tileLines),\n        _step16;\n\n    try {\n      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n        var line = _step16.value;\n\n        var _iterator17 = _createForOfIteratorHelper(line),\n            _step17;\n\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var p = _step17.value;\n            updatePoint(p, lineBBox, polyBBox, worldSize);\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      }\n    } catch (err) {\n      _iterator16.e(err);\n    } finally {\n      _iterator16.f();\n    }\n  }\n\n  return tileLines;\n}\n\nfunction pointsWithinPolygons(ctx, polygonGeometry) {\n  var pointBBox = [Infinity, Infinity, -Infinity, -Infinity];\n  var polyBBox = [Infinity, Infinity, -Infinity, -Infinity];\n  var canonical = ctx.canonicalID();\n\n  if (polygonGeometry.type === \'Polygon\') {\n    var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n    var tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n    if (!boxWithinBox(pointBBox, polyBBox)) return false;\n\n    var _iterator19 = _createForOfIteratorHelper(tilePoints),\n        _step19;\n\n    try {\n      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n        var point = _step19.value;\n        if (!pointWithinPolygon(point, tilePolygon)) return false;\n      }\n    } catch (err) {\n      _iterator19.e(err);\n    } finally {\n      _iterator19.f();\n    }\n  }\n\n  if (polygonGeometry.type === \'MultiPolygon\') {\n    var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n\n    var _tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);\n\n    if (!boxWithinBox(pointBBox, polyBBox)) return false;\n\n    var _iterator20 = _createForOfIteratorHelper(_tilePoints),\n        _step20;\n\n    try {\n      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n        var _point = _step20.value;\n        if (!pointWithinPolygons(_point, tilePolygons)) return false;\n      }\n    } catch (err) {\n      _iterator20.e(err);\n    } finally {\n      _iterator20.f();\n    }\n  }\n\n  return true;\n}\n\nfunction linesWithinPolygons(ctx, polygonGeometry) {\n  var lineBBox = [Infinity, Infinity, -Infinity, -Infinity];\n  var polyBBox = [Infinity, Infinity, -Infinity, -Infinity];\n  var canonical = ctx.canonicalID();\n\n  if (polygonGeometry.type === \'Polygon\') {\n    var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);\n    var tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n    if (!boxWithinBox(lineBBox, polyBBox)) return false;\n\n    var _iterator21 = _createForOfIteratorHelper(tileLines),\n        _step21;\n\n    try {\n      for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n        var line = _step21.value;\n        if (!lineStringWithinPolygon(line, tilePolygon)) return false;\n      }\n    } catch (err) {\n      _iterator21.e(err);\n    } finally {\n      _iterator21.f();\n    }\n  }\n\n  if (polygonGeometry.type === \'MultiPolygon\') {\n    var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);\n\n    var _tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);\n\n    if (!boxWithinBox(lineBBox, polyBBox)) return false;\n\n    var _iterator22 = _createForOfIteratorHelper(_tileLines),\n        _step22;\n\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var _line2 = _step22.value;\n        if (!lineStringWithinPolygons(_line2, tilePolygons)) return false;\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n  }\n\n  return true;\n}\n\nvar Within = /*#__PURE__*/function () {\n  function Within(geojson, geometries) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Within);\n\n    this.type = BooleanType;\n    this.geojson = geojson;\n    this.geometries = geometries;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Within, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      if (ctx.geometry() != null && ctx.canonicalID() != null) {\n        if (ctx.geometryType() === \'Point\') {\n          return pointsWithinPolygons(ctx, this.geometries);\n        } else if (ctx.geometryType() === \'LineString\') {\n          return linesWithinPolygons(ctx, this.geometries);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild() {}\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return true;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'within\', this.geojson];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2) return context.error("\'within\' expression requires exactly one argument, but found ".concat(args.length - 1, " instead."));\n\n      if (isValue(args[1])) {\n        var geojson = args[1];\n\n        if (geojson.type === \'FeatureCollection\') {\n          for (var i = 0; i < geojson.features.length; ++i) {\n            var type = geojson.features[i].geometry.type;\n\n            if (type === \'Polygon\' || type === \'MultiPolygon\') {\n              return new Within(geojson, geojson.features[i].geometry);\n            }\n          }\n        } else if (geojson.type === \'Feature\') {\n          var _type2 = geojson.geometry.type;\n\n          if (_type2 === \'Polygon\' || _type2 === \'MultiPolygon\') {\n            return new Within(geojson, geojson.geometry);\n          }\n        } else if (geojson.type === \'Polygon\' || geojson.type === \'MultiPolygon\') {\n          return new Within(geojson, geojson);\n        }\n      }\n\n      return context.error("\'within\' expression requires valid geojson object that contains polygon geometry type.");\n    }\n  }]);\n\n  return Within;\n}();\n\nfunction isFeatureConstant(e) {\n  if (e instanceof CompoundExpression) {\n    if (e.name === \'get\' && e.args.length === 1) {\n      return false;\n    } else if (e.name === \'feature-state\') {\n      return false;\n    } else if (e.name === \'has\' && e.args.length === 1) {\n      return false;\n    } else if (e.name === \'properties\' || e.name === \'geometry-type\' || e.name === \'id\') {\n      return false;\n    } else if (/^filter-/.test(e.name)) {\n      return false;\n    }\n  }\n\n  if (e instanceof Within) {\n    return false;\n  }\n\n  var result = true;\n  e.eachChild(function (arg) {\n    if (result && !isFeatureConstant(arg)) {\n      result = false;\n    }\n  });\n  return result;\n}\n\nfunction isStateConstant(e) {\n  if (e instanceof CompoundExpression) {\n    if (e.name === \'feature-state\') {\n      return false;\n    }\n  }\n\n  var result = true;\n  e.eachChild(function (arg) {\n    if (result && !isStateConstant(arg)) {\n      result = false;\n    }\n  });\n  return result;\n}\n\nfunction isGlobalPropertyConstant(e, properties) {\n  if (e instanceof CompoundExpression && properties.indexOf(e.name) >= 0) {\n    return false;\n  }\n\n  var result = true;\n  e.eachChild(function (arg) {\n    if (result && !isGlobalPropertyConstant(arg, properties)) {\n      result = false;\n    }\n  });\n  return result;\n}\n\nvar Var = /*#__PURE__*/function () {\n  function Var(name, boundExpression) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Var);\n\n    this.type = boundExpression.type;\n    this.name = name;\n    this.boundExpression = boundExpression;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Var, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      return this.boundExpression.evaluate(ctx);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild() {}\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'var\', this.name];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2 || typeof args[1] !== \'string\') return context.error("\'var\' expression requires exactly one string literal argument.");\n      var name = args[1];\n\n      if (!context.scope.has(name)) {\n        return context.error("Unknown variable \\"".concat(name, "\\". Make sure \\"").concat(name, "\\" has been bound in an enclosing \\"let\\" expression before using it."), 1);\n      }\n\n      return new Var(name, context.scope.get(name));\n    }\n  }]);\n\n  return Var;\n}();\n\nvar ParsingContext = /*#__PURE__*/function () {\n  function ParsingContext(registry) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var expectedType = arguments.length > 2 ? arguments[2] : undefined;\n    var scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Scope();\n    var errors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ParsingContext);\n\n    this.registry = registry;\n    this.path = path;\n    this.key = path.map(function (part) {\n      return "[".concat(part, "]");\n    }).join(\'\');\n    this.scope = scope;\n    this.errors = errors;\n    this.expectedType = expectedType;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(ParsingContext, [{\n    key: "parse",\n    value: function parse(expr, index, expectedType, bindings) {\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      if (index) {\n        return this.concat(index, expectedType, bindings)._parse(expr, options);\n      }\n\n      return this._parse(expr, options);\n    }\n  }, {\n    key: "_parse",\n    value: function _parse(expr, options) {\n      if (expr === null || typeof expr === \'string\' || typeof expr === \'boolean\' || typeof expr === \'number\') {\n        expr = [\'literal\', expr];\n      }\n\n      function annotate(parsed, type, typeAnnotation) {\n        if (typeAnnotation === \'assert\') {\n          return new Assertion(type, [parsed]);\n        } else if (typeAnnotation === \'coerce\') {\n          return new Coercion(type, [parsed]);\n        } else {\n          return parsed;\n        }\n      }\n\n      if (Array.isArray(expr)) {\n        if (expr.length === 0) {\n          return this.error("Expected an array with at least one element. If you wanted a literal array, use [\\"literal\\", []].");\n        }\n\n        var op = expr[0];\n\n        if (typeof op !== \'string\') {\n          this.error("Expression name must be a string, but found ".concat(typeof op, " instead. If you wanted a literal array, use [\\"literal\\", [...]]."), 0);\n          return null;\n        }\n\n        var Expr = this.registry[op];\n\n        if (Expr) {\n          var parsed = Expr.parse(expr, this);\n          if (!parsed) return null;\n\n          if (this.expectedType) {\n            var expected = this.expectedType;\n            var actual = parsed.type;\n\n            if ((expected.kind === \'string\' || expected.kind === \'number\' || expected.kind === \'boolean\' || expected.kind === \'object\' || expected.kind === \'array\') && actual.kind === \'value\') {\n              parsed = annotate(parsed, expected, options.typeAnnotation || \'assert\');\n            } else if ((expected.kind === \'color\' || expected.kind === \'formatted\' || expected.kind === \'resolvedImage\') && (actual.kind === \'value\' || actual.kind === \'string\')) {\n              parsed = annotate(parsed, expected, options.typeAnnotation || \'coerce\');\n            } else if (this.checkSubtype(expected, actual)) {\n              return null;\n            }\n          }\n\n          if (!(parsed instanceof Literal) && parsed.type.kind !== \'resolvedImage\' && isConstant(parsed)) {\n            var ec = new EvaluationContext();\n\n            try {\n              parsed = new Literal(parsed.type, parsed.evaluate(ec));\n            } catch (e) {\n              this.error(e.message);\n              return null;\n            }\n          }\n\n          return parsed;\n        }\n\n        return this.error("Unknown expression \\"".concat(op, "\\". If you wanted a literal array, use [\\"literal\\", [...]]."), 0);\n      } else if (typeof expr === \'undefined\') {\n        return this.error("\'undefined\' value invalid. Use null instead.");\n      } else if (typeof expr === \'object\') {\n        return this.error("Bare objects invalid. Use [\\"literal\\", {...}] instead.");\n      } else {\n        return this.error("Expected an array, but found ".concat(typeof expr, " instead."));\n      }\n    }\n  }, {\n    key: "concat",\n    value: function concat(index, expectedType, bindings) {\n      var path = typeof index === \'number\' ? this.path.concat(index) : this.path;\n      var scope = bindings ? this.scope.concat(bindings) : this.scope;\n      return new ParsingContext(this.registry, path, expectedType || null, scope, this.errors);\n    }\n  }, {\n    key: "error",\n    value: function error(_error3) {\n      for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key4 = 1; _key4 < _len2; _key4++) {\n        keys[_key4 - 1] = arguments[_key4];\n      }\n\n      var key = "".concat(this.key).concat(keys.map(function (k) {\n        return "[".concat(k, "]");\n      }).join(\'\'));\n      this.errors.push(new ParsingError(key, _error3));\n    }\n  }, {\n    key: "checkSubtype",\n    value: function checkSubtype(expected, t) {\n      var error = _checkSubtype(expected, t);\n\n      if (error) this.error(error);\n      return error;\n    }\n  }]);\n\n  return ParsingContext;\n}();\n\nfunction isConstant(expression) {\n  if (expression instanceof Var) {\n    return isConstant(expression.boundExpression);\n  } else if (expression instanceof CompoundExpression && expression.name === \'error\') {\n    return false;\n  } else if (expression instanceof CollatorExpression) {\n    return false;\n  } else if (expression instanceof Within) {\n    return false;\n  }\n\n  var isTypeAnnotation = expression instanceof Coercion || expression instanceof Assertion;\n  var childrenConstant = true;\n  expression.eachChild(function (child) {\n    if (isTypeAnnotation) {\n      childrenConstant = childrenConstant && isConstant(child);\n    } else {\n      childrenConstant = childrenConstant && child instanceof Literal;\n    }\n  });\n\n  if (!childrenConstant) {\n    return false;\n  }\n\n  return isFeatureConstant(expression) && isGlobalPropertyConstant(expression, [\'zoom\', \'heatmap-density\', \'line-progress\', \'sky-radial-progress\', \'accumulated\', \'is-supported-script\']);\n}\n\nfunction findStopLessThanOrEqualTo(stops, input) {\n  var lastIndex = stops.length - 1;\n  var lowerIndex = 0;\n  var upperIndex = lastIndex;\n  var currentIndex = 0;\n  var currentValue, nextValue;\n\n  while (lowerIndex <= upperIndex) {\n    currentIndex = Math.floor((lowerIndex + upperIndex) / 2);\n    currentValue = stops[currentIndex];\n    nextValue = stops[currentIndex + 1];\n\n    if (currentValue <= input) {\n      if (currentIndex === lastIndex || input < nextValue) {\n        return currentIndex;\n      }\n\n      lowerIndex = currentIndex + 1;\n    } else if (currentValue > input) {\n      upperIndex = currentIndex - 1;\n    } else {\n      throw new RuntimeError(\'Input is not a number.\');\n    }\n  }\n\n  return 0;\n}\n\nvar Step = /*#__PURE__*/function () {\n  function Step(type, input, stops) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Step);\n\n    this.type = type;\n    this.input = input;\n    this.labels = [];\n    this.outputs = [];\n\n    var _iterator23 = _createForOfIteratorHelper(stops),\n        _step23;\n\n    try {\n      for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n        var _step23$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step23.value, 2),\n            label = _step23$value[0],\n            _expression2 = _step23$value[1];\n\n        this.labels.push(label);\n        this.outputs.push(_expression2);\n      }\n    } catch (err) {\n      _iterator23.e(err);\n    } finally {\n      _iterator23.f();\n    }\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Step, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var labels = this.labels;\n      var outputs = this.outputs;\n\n      if (labels.length === 1) {\n        return outputs[0].evaluate(ctx);\n      }\n\n      var value = this.input.evaluate(ctx);\n\n      if (value <= labels[0]) {\n        return outputs[0].evaluate(ctx);\n      }\n\n      var stopCount = labels.length;\n\n      if (value >= labels[stopCount - 1]) {\n        return outputs[stopCount - 1].evaluate(ctx);\n      }\n\n      var index = findStopLessThanOrEqualTo(labels, value);\n      return outputs[index].evaluate(ctx);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n\n      var _iterator24 = _createForOfIteratorHelper(this.outputs),\n          _step24;\n\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var _expression3 = _step24.value;\n          fn(_expression3);\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.outputs.every(function (out) {\n        return out.outputDefined();\n      });\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'step\', this.input.serialize()];\n\n      for (var i = 0; i < this.labels.length; i++) {\n        if (i > 0) {\n          serialized.push(this.labels[i]);\n        }\n\n        serialized.push(this.outputs[i].serialize());\n      }\n\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length - 1 < 4) {\n        return context.error("Expected at least 4 arguments, but found only ".concat(args.length - 1, "."));\n      }\n\n      if ((args.length - 1) % 2 !== 0) {\n        return context.error("Expected an even number of arguments.");\n      }\n\n      var input = context.parse(args[1], 1, NumberType);\n      if (!input) return null;\n      var stops = [];\n      var outputType = null;\n\n      if (context.expectedType && context.expectedType.kind !== \'value\') {\n        outputType = context.expectedType;\n      }\n\n      for (var i = 1; i < args.length; i += 2) {\n        var label = i === 1 ? -Infinity : args[i];\n        var value = args[i + 1];\n        var labelKey = i;\n        var valueKey = i + 1;\n\n        if (typeof label !== \'number\') {\n          return context.error(\'Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.\', labelKey);\n        }\n\n        if (stops.length && stops[stops.length - 1][0] >= label) {\n          return context.error(\'Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.\', labelKey);\n        }\n\n        var parsed = context.parse(value, valueKey, outputType);\n        if (!parsed) return null;\n        outputType = outputType || parsed.type;\n        stops.push([label, parsed]);\n      }\n\n      return new Step(outputType, input, stops);\n    }\n  }]);\n\n  return Step;\n}();\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS\'\' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Ported from Webkit\n * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h\n */\n\n\nvar unitbezier = UnitBezier;\n\nfunction UnitBezier(p1x, p1y, p2x, p2y) {\n  // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).\n  this.cx = 3.0 * p1x;\n  this.bx = 3.0 * (p2x - p1x) - this.cx;\n  this.ax = 1.0 - this.cx - this.bx;\n  this.cy = 3.0 * p1y;\n  this.by = 3.0 * (p2y - p1y) - this.cy;\n  this.ay = 1.0 - this.cy - this.by;\n  this.p1x = p1x;\n  this.p1y = p2y;\n  this.p2x = p2x;\n  this.p2y = p2y;\n}\n\nUnitBezier.prototype.sampleCurveX = function (t) {\n  // `ax t^3 + bx t^2 + cx t\' expanded using Horner\'s rule.\n  return ((this.ax * t + this.bx) * t + this.cx) * t;\n};\n\nUnitBezier.prototype.sampleCurveY = function (t) {\n  return ((this.ay * t + this.by) * t + this.cy) * t;\n};\n\nUnitBezier.prototype.sampleCurveDerivativeX = function (t) {\n  return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n};\n\nUnitBezier.prototype.solveCurveX = function (x, epsilon) {\n  if (typeof epsilon === \'undefined\') epsilon = 1e-6;\n  var t0, t1, t2, x2, i; // First try a few iterations of Newton\'s method -- normally very fast.\n\n  for (t2 = x, i = 0; i < 8; i++) {\n    x2 = this.sampleCurveX(t2) - x;\n    if (Math.abs(x2) < epsilon) return t2;\n    var d2 = this.sampleCurveDerivativeX(t2);\n    if (Math.abs(d2) < 1e-6) break;\n    t2 = t2 - x2 / d2;\n  } // Fall back to the bisection method for reliability.\n\n\n  t0 = 0.0;\n  t1 = 1.0;\n  t2 = x;\n  if (t2 < t0) return t0;\n  if (t2 > t1) return t1;\n\n  while (t0 < t1) {\n    x2 = this.sampleCurveX(t2);\n    if (Math.abs(x2 - x) < epsilon) return t2;\n\n    if (x > x2) {\n      t0 = t2;\n    } else {\n      t1 = t2;\n    }\n\n    t2 = (t1 - t0) * 0.5 + t0;\n  } // Failure.\n\n\n  return t2;\n};\n\nUnitBezier.prototype.solve = function (x, epsilon) {\n  return this.sampleCurveY(this.solveCurveX(x, epsilon));\n};\n\nfunction number(a, b, t) {\n  return a * (1 - t) + b * t;\n}\n\nfunction color(from, to, t) {\n  return new Color(number(from.r, to.r, t), number(from.g, to.g, t), number(from.b, to.b, t), number(from.a, to.a, t));\n}\n\nfunction array$1(from, to, t) {\n  return from.map(function (d, i) {\n    return number(d, to[i], t);\n  });\n}\n\nvar interpolate = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  number: number,\n  color: color,\n  array: array$1\n});\nvar Xn = 0.95047,\n    Yn = 1,\n    Zn = 1.08883,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1,\n    deg2rad = Math.PI / 180,\n    rad2deg = 180 / Math.PI;\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction xyz2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2xyz(x) {\n  x /= 255;\n  return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction rgbToLab(rgbColor) {\n  var b = rgb2xyz(rgbColor.r),\n      a = rgb2xyz(rgbColor.g),\n      l = rgb2xyz(rgbColor.b),\n      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn),\n      z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);\n  return {\n    l: 116 * y - 16,\n    a: 500 * (x - y),\n    b: 200 * (y - z),\n    alpha: rgbColor.a\n  };\n}\n\nfunction labToRgb(labColor) {\n  var y = (labColor.l + 16) / 116,\n      x = isNaN(labColor.a) ? y : y + labColor.a / 500,\n      z = isNaN(labColor.b) ? y : y - labColor.b / 200;\n  y = Yn * lab2xyz(y);\n  x = Xn * lab2xyz(x);\n  z = Zn * lab2xyz(z);\n  return new Color(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), labColor.alpha);\n}\n\nfunction interpolateLab(from, to, t) {\n  return {\n    l: number(from.l, to.l, t),\n    a: number(from.a, to.a, t),\n    b: number(from.b, to.b, t),\n    alpha: number(from.alpha, to.alpha, t)\n  };\n}\n\nfunction rgbToHcl(rgbColor) {\n  var _rgbToLab = rgbToLab(rgbColor),\n      l = _rgbToLab.l,\n      a = _rgbToLab.a,\n      b = _rgbToLab.b;\n\n  var h = Math.atan2(b, a) * rad2deg;\n  return {\n    h: h < 0 ? h + 360 : h,\n    c: Math.sqrt(a * a + b * b),\n    l: l,\n    alpha: rgbColor.a\n  };\n}\n\nfunction hclToRgb(hclColor) {\n  var h = hclColor.h * deg2rad,\n      c = hclColor.c,\n      l = hclColor.l;\n  return labToRgb({\n    l: l,\n    a: Math.cos(h) * c,\n    b: Math.sin(h) * c,\n    alpha: hclColor.alpha\n  });\n}\n\nfunction interpolateHue(a, b, t) {\n  var d = b - a;\n  return a + t * (d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d);\n}\n\nfunction interpolateHcl(from, to, t) {\n  return {\n    h: interpolateHue(from.h, to.h, t),\n    c: number(from.c, to.c, t),\n    l: number(from.l, to.l, t),\n    alpha: number(from.alpha, to.alpha, t)\n  };\n}\n\nvar lab = {\n  forward: rgbToLab,\n  reverse: labToRgb,\n  interpolate: interpolateLab\n};\nvar hcl = {\n  forward: rgbToHcl,\n  reverse: hclToRgb,\n  interpolate: interpolateHcl\n};\nvar colorSpaces = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  lab: lab,\n  hcl: hcl\n});\n\nvar Interpolate = /*#__PURE__*/function () {\n  function Interpolate(type, operator, interpolation, input, stops) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Interpolate);\n\n    this.type = type;\n    this.operator = operator;\n    this.interpolation = interpolation;\n    this.input = input;\n    this.labels = [];\n    this.outputs = [];\n\n    var _iterator25 = _createForOfIteratorHelper(stops),\n        _step25;\n\n    try {\n      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n        var _step25$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step25.value, 2),\n            label = _step25$value[0],\n            _expression4 = _step25$value[1];\n\n        this.labels.push(label);\n        this.outputs.push(_expression4);\n      }\n    } catch (err) {\n      _iterator25.e(err);\n    } finally {\n      _iterator25.f();\n    }\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Interpolate, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var labels = this.labels;\n      var outputs = this.outputs;\n\n      if (labels.length === 1) {\n        return outputs[0].evaluate(ctx);\n      }\n\n      var value = this.input.evaluate(ctx);\n\n      if (value <= labels[0]) {\n        return outputs[0].evaluate(ctx);\n      }\n\n      var stopCount = labels.length;\n\n      if (value >= labels[stopCount - 1]) {\n        return outputs[stopCount - 1].evaluate(ctx);\n      }\n\n      var index = findStopLessThanOrEqualTo(labels, value);\n      var lower = labels[index];\n      var upper = labels[index + 1];\n      var t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);\n      var outputLower = outputs[index].evaluate(ctx);\n      var outputUpper = outputs[index + 1].evaluate(ctx);\n\n      if (this.operator === \'interpolate\') {\n        return interpolate[this.type.kind.toLowerCase()](outputLower, outputUpper, t);\n      } else if (this.operator === \'interpolate-hcl\') {\n        return hcl.reverse(hcl.interpolate(hcl.forward(outputLower), hcl.forward(outputUpper), t));\n      } else {\n        return lab.reverse(lab.interpolate(lab.forward(outputLower), lab.forward(outputUpper), t));\n      }\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n\n      var _iterator26 = _createForOfIteratorHelper(this.outputs),\n          _step26;\n\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var _expression5 = _step26.value;\n          fn(_expression5);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.outputs.every(function (out) {\n        return out.outputDefined();\n      });\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var interpolation;\n\n      if (this.interpolation.name === \'linear\') {\n        interpolation = [\'linear\'];\n      } else if (this.interpolation.name === \'exponential\') {\n        if (this.interpolation.base === 1) {\n          interpolation = [\'linear\'];\n        } else {\n          interpolation = [\'exponential\', this.interpolation.base];\n        }\n      } else {\n        interpolation = [\'cubic-bezier\'].concat(this.interpolation.controlPoints);\n      }\n\n      var serialized = [this.operator, interpolation, this.input.serialize()];\n\n      for (var i = 0; i < this.labels.length; i++) {\n        serialized.push(this.labels[i], this.outputs[i].serialize());\n      }\n\n      return serialized;\n    }\n  }], [{\n    key: "interpolationFactor",\n    value: function interpolationFactor(interpolation, input, lower, upper) {\n      var t = 0;\n\n      if (interpolation.name === \'exponential\') {\n        t = exponentialInterpolation(input, interpolation.base, lower, upper);\n      } else if (interpolation.name === \'linear\') {\n        t = exponentialInterpolation(input, 1, lower, upper);\n      } else if (interpolation.name === \'cubic-bezier\') {\n        var c = interpolation.controlPoints;\n        var ub = new unitbezier(c[0], c[1], c[2], c[3]);\n        t = ub.solve(exponentialInterpolation(input, 1, lower, upper));\n      }\n\n      return t;\n    }\n  }, {\n    key: "parse",\n    value: function parse(args, context) {\n      var _args = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_8__/* .default */ .Z)(args),\n          operator = _args[0],\n          interpolation = _args[1],\n          input = _args[2],\n          rest = _args.slice(3);\n\n      if (!Array.isArray(interpolation) || interpolation.length === 0) {\n        return context.error("Expected an interpolation type expression.", 1);\n      }\n\n      if (interpolation[0] === \'linear\') {\n        interpolation = {\n          name: \'linear\'\n        };\n      } else if (interpolation[0] === \'exponential\') {\n        var base = interpolation[1];\n        if (typeof base !== \'number\') return context.error("Exponential interpolation requires a numeric base.", 1, 1);\n        interpolation = {\n          name: \'exponential\',\n          base: base\n        };\n      } else if (interpolation[0] === \'cubic-bezier\') {\n        var controlPoints = interpolation.slice(1);\n\n        if (controlPoints.length !== 4 || controlPoints.some(function (t) {\n          return typeof t !== \'number\' || t < 0 || t > 1;\n        })) {\n          return context.error(\'Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.\', 1);\n        }\n\n        interpolation = {\n          name: \'cubic-bezier\',\n          controlPoints: controlPoints\n        };\n      } else {\n        return context.error("Unknown interpolation type ".concat(String(interpolation[0])), 1, 0);\n      }\n\n      if (args.length - 1 < 4) {\n        return context.error("Expected at least 4 arguments, but found only ".concat(args.length - 1, "."));\n      }\n\n      if ((args.length - 1) % 2 !== 0) {\n        return context.error("Expected an even number of arguments.");\n      }\n\n      input = context.parse(input, 2, NumberType);\n      if (!input) return null;\n      var stops = [];\n      var outputType = null;\n\n      if (operator === \'interpolate-hcl\' || operator === \'interpolate-lab\') {\n        outputType = ColorType;\n      } else if (context.expectedType && context.expectedType.kind !== \'value\') {\n        outputType = context.expectedType;\n      }\n\n      for (var i = 0; i < rest.length; i += 2) {\n        var label = rest[i];\n        var value = rest[i + 1];\n        var labelKey = i + 3;\n        var valueKey = i + 4;\n\n        if (typeof label !== \'number\') {\n          return context.error(\'Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.\', labelKey);\n        }\n\n        if (stops.length && stops[stops.length - 1][0] >= label) {\n          return context.error(\'Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.\', labelKey);\n        }\n\n        var parsed = context.parse(value, valueKey, outputType);\n        if (!parsed) return null;\n        outputType = outputType || parsed.type;\n        stops.push([label, parsed]);\n      }\n\n      if (outputType.kind !== \'number\' && outputType.kind !== \'color\' && !(outputType.kind === \'array\' && outputType.itemType.kind === \'number\' && typeof outputType.N === \'number\')) {\n        return context.error("Type ".concat(toString(outputType), " is not interpolatable."));\n      }\n\n      return new Interpolate(outputType, operator, interpolation, input, stops);\n    }\n  }]);\n\n  return Interpolate;\n}();\n\nfunction exponentialInterpolation(input, base, lowerValue, upperValue) {\n  var difference = upperValue - lowerValue;\n  var progress = input - lowerValue;\n\n  if (difference === 0) {\n    return 0;\n  } else if (base === 1) {\n    return progress / difference;\n  } else {\n    return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n  }\n}\n\nvar Coalesce = /*#__PURE__*/function () {\n  function Coalesce(type, args) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Coalesce);\n\n    this.type = type;\n    this.args = args;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Coalesce, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var result = null;\n      var argCount = 0;\n      var requestedImageName;\n\n      var _iterator27 = _createForOfIteratorHelper(this.args),\n          _step27;\n\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var arg = _step27.value;\n          argCount++;\n          result = arg.evaluate(ctx);\n\n          if (result && result instanceof ResolvedImage && !result.available) {\n            if (!requestedImageName) {\n              requestedImageName = result.name;\n            }\n\n            result = null;\n\n            if (argCount === this.args.length) {\n              result = requestedImageName;\n            }\n          }\n\n          if (result !== null) break;\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      this.args.forEach(fn);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.args.every(function (arg) {\n        return arg.outputDefined();\n      });\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'coalesce\'];\n      this.eachChild(function (child) {\n        serialized.push(child.serialize());\n      });\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 2) {\n        return context.error(\'Expectected at least one argument.\');\n      }\n\n      var outputType = null;\n      var expectedType = context.expectedType;\n\n      if (expectedType && expectedType.kind !== \'value\') {\n        outputType = expectedType;\n      }\n\n      var parsedArgs = [];\n\n      var _iterator28 = _createForOfIteratorHelper(args.slice(1)),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var arg = _step28.value;\n          var parsed = context.parse(arg, 1 + parsedArgs.length, outputType, undefined, {\n            typeAnnotation: \'omit\'\n          });\n          if (!parsed) return null;\n          outputType = outputType || parsed.type;\n          parsedArgs.push(parsed);\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n\n      var needsAnnotation = expectedType && parsedArgs.some(function (arg) {\n        return _checkSubtype(expectedType, arg.type);\n      });\n      return needsAnnotation ? new Coalesce(ValueType, parsedArgs) : new Coalesce(outputType, parsedArgs);\n    }\n  }]);\n\n  return Coalesce;\n}();\n\nvar Let = /*#__PURE__*/function () {\n  function Let(bindings, result) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Let);\n\n    this.type = result.type;\n    this.bindings = [].concat(bindings);\n    this.result = result;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Let, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      return this.result.evaluate(ctx);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      var _iterator29 = _createForOfIteratorHelper(this.bindings),\n          _step29;\n\n      try {\n        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n          var binding = _step29.value;\n          fn(binding[1]);\n        }\n      } catch (err) {\n        _iterator29.e(err);\n      } finally {\n        _iterator29.f();\n      }\n\n      fn(this.result);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.result.outputDefined();\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'let\'];\n\n      var _iterator30 = _createForOfIteratorHelper(this.bindings),\n          _step30;\n\n      try {\n        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n          var _step30$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step30.value, 2),\n              name = _step30$value[0],\n              expr = _step30$value[1];\n\n          serialized.push(name, expr.serialize());\n        }\n      } catch (err) {\n        _iterator30.e(err);\n      } finally {\n        _iterator30.f();\n      }\n\n      serialized.push(this.result.serialize());\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 4) return context.error("Expected at least 3 arguments, but found ".concat(args.length - 1, " instead."));\n      var bindings = [];\n\n      for (var i = 1; i < args.length - 1; i += 2) {\n        var name = args[i];\n\n        if (typeof name !== \'string\') {\n          return context.error("Expected string, but found ".concat(typeof name, " instead."), i);\n        }\n\n        if (/[^a-zA-Z0-9_]/.test(name)) {\n          return context.error("Variable names must contain only alphanumeric characters or \'_\'.", i);\n        }\n\n        var value = context.parse(args[i + 1], i + 1);\n        if (!value) return null;\n        bindings.push([name, value]);\n      }\n\n      var result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);\n      if (!result) return null;\n      return new Let(bindings, result);\n    }\n  }]);\n\n  return Let;\n}();\n\nvar At = /*#__PURE__*/function () {\n  function At(type, index, input) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, At);\n\n    this.type = type;\n    this.index = index;\n    this.input = input;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(At, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var index = this.index.evaluate(ctx);\n      var array = this.input.evaluate(ctx);\n\n      if (index < 0) {\n        throw new RuntimeError("Array index out of bounds: ".concat(index, " < 0."));\n      }\n\n      if (index >= array.length) {\n        throw new RuntimeError("Array index out of bounds: ".concat(index, " > ").concat(array.length - 1, "."));\n      }\n\n      if (index !== Math.floor(index)) {\n        throw new RuntimeError("Array index must be an integer, but found ".concat(index, " instead."));\n      }\n\n      return array[index];\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.index);\n      fn(this.input);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'at\', this.index.serialize(), this.input.serialize()];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 3) return context.error("Expected 2 arguments, but found ".concat(args.length - 1, " instead."));\n      var index = context.parse(args[1], 1, NumberType);\n      var input = context.parse(args[2], 2, array(context.expectedType || ValueType));\n      if (!index || !input) return null;\n      var t = input.type;\n      return new At(t.itemType, index, input);\n    }\n  }]);\n\n  return At;\n}();\n\nvar In = /*#__PURE__*/function () {\n  function In(needle, haystack) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, In);\n\n    this.type = BooleanType;\n    this.needle = needle;\n    this.haystack = haystack;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(In, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var needle = this.needle.evaluate(ctx);\n      var haystack = this.haystack.evaluate(ctx);\n      if (!haystack) return false;\n\n      if (!isValidNativeType(needle, [\'boolean\', \'string\', \'number\', \'null\'])) {\n        throw new RuntimeError("Expected first argument to be of type boolean, string, number or null, but found ".concat(toString(typeOf(needle)), " instead."));\n      }\n\n      if (!isValidNativeType(haystack, [\'string\', \'array\'])) {\n        throw new RuntimeError("Expected second argument to be of type array or string, but found ".concat(toString(typeOf(haystack)), " instead."));\n      }\n\n      return haystack.indexOf(needle) >= 0;\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.needle);\n      fn(this.haystack);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return true;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      return [\'in\', this.needle.serialize(), this.haystack.serialize()];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 3) {\n        return context.error("Expected 2 arguments, but found ".concat(args.length - 1, " instead."));\n      }\n\n      var needle = context.parse(args[1], 1, ValueType);\n      var haystack = context.parse(args[2], 2, ValueType);\n      if (!needle || !haystack) return null;\n\n      if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n        return context.error("Expected first argument to be of type boolean, string, number or null, but found ".concat(toString(needle.type), " instead"));\n      }\n\n      return new In(needle, haystack);\n    }\n  }]);\n\n  return In;\n}();\n\nvar IndexOf = /*#__PURE__*/function () {\n  function IndexOf(needle, haystack, fromIndex) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, IndexOf);\n\n    this.type = NumberType;\n    this.needle = needle;\n    this.haystack = haystack;\n    this.fromIndex = fromIndex;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(IndexOf, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var needle = this.needle.evaluate(ctx);\n      var haystack = this.haystack.evaluate(ctx);\n\n      if (!isValidNativeType(needle, [\'boolean\', \'string\', \'number\', \'null\'])) {\n        throw new RuntimeError("Expected first argument to be of type boolean, string, number or null, but found ".concat(toString(typeOf(needle)), " instead."));\n      }\n\n      if (!isValidNativeType(haystack, [\'string\', \'array\'])) {\n        throw new RuntimeError("Expected second argument to be of type array or string, but found ".concat(toString(typeOf(haystack)), " instead."));\n      }\n\n      if (this.fromIndex) {\n        var fromIndex = this.fromIndex.evaluate(ctx);\n        return haystack.indexOf(needle, fromIndex);\n      }\n\n      return haystack.indexOf(needle);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.needle);\n      fn(this.haystack);\n\n      if (this.fromIndex) {\n        fn(this.fromIndex);\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      if (this.fromIndex != null && this.fromIndex !== undefined) {\n        var fromIndex = this.fromIndex.serialize();\n        return [\'index-of\', this.needle.serialize(), this.haystack.serialize(), fromIndex];\n      }\n\n      return [\'index-of\', this.needle.serialize(), this.haystack.serialize()];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length <= 2 || args.length >= 5) {\n        return context.error("Expected 3 or 4 arguments, but found ".concat(args.length - 1, " instead."));\n      }\n\n      var needle = context.parse(args[1], 1, ValueType);\n      var haystack = context.parse(args[2], 2, ValueType);\n      if (!needle || !haystack) return null;\n\n      if (!isValidType(needle.type, [BooleanType, StringType, NumberType, NullType, ValueType])) {\n        return context.error("Expected first argument to be of type boolean, string, number or null, but found ".concat(toString(needle.type), " instead"));\n      }\n\n      if (args.length === 4) {\n        var fromIndex = context.parse(args[3], 3, NumberType);\n        if (!fromIndex) return null;\n        return new IndexOf(needle, haystack, fromIndex);\n      } else {\n        return new IndexOf(needle, haystack);\n      }\n    }\n  }]);\n\n  return IndexOf;\n}();\n\nvar Match = /*#__PURE__*/function () {\n  function Match(inputType, outputType, input, cases, outputs, otherwise) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Match);\n\n    this.inputType = inputType;\n    this.type = outputType;\n    this.input = input;\n    this.cases = cases;\n    this.outputs = outputs;\n    this.otherwise = otherwise;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Match, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var input = this.input.evaluate(ctx);\n      var output = typeOf(input) === this.inputType && this.outputs[this.cases[input]] || this.otherwise;\n      return output.evaluate(ctx);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n      this.outputs.forEach(fn);\n      fn(this.otherwise);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.outputs.every(function (out) {\n        return out.outputDefined();\n      }) && this.otherwise.outputDefined();\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var _this2 = this;\n\n      var serialized = [\'match\', this.input.serialize()];\n      var sortedLabels = Object.keys(this.cases).sort();\n      var groupedByOutput = [];\n      var outputLookup = {};\n\n      var _iterator31 = _createForOfIteratorHelper(sortedLabels),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var label = _step31.value;\n          var _outputIndex = outputLookup[this.cases[label]];\n\n          if (_outputIndex === undefined) {\n            outputLookup[this.cases[label]] = groupedByOutput.length;\n            groupedByOutput.push([this.cases[label], [label]]);\n          } else {\n            groupedByOutput[_outputIndex][1].push(label);\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      var coerceLabel = function coerceLabel(label) {\n        return _this2.inputType.kind === \'number\' ? Number(label) : label;\n      };\n\n      for (var _i6 = 0, _groupedByOutput = groupedByOutput; _i6 < _groupedByOutput.length; _i6++) {\n        var _groupedByOutput$_i = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_groupedByOutput[_i6], 2),\n            outputIndex = _groupedByOutput$_i[0],\n            labels = _groupedByOutput$_i[1];\n\n        if (labels.length === 1) {\n          serialized.push(coerceLabel(labels[0]));\n        } else {\n          serialized.push(labels.map(coerceLabel));\n        }\n\n        serialized.push(this.outputs[outputIndex].serialize());\n      }\n\n      serialized.push(this.otherwise.serialize());\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 5) return context.error("Expected at least 4 arguments, but found only ".concat(args.length - 1, "."));\n      if (args.length % 2 !== 1) return context.error("Expected an even number of arguments.");\n      var inputType;\n      var outputType;\n\n      if (context.expectedType && context.expectedType.kind !== \'value\') {\n        outputType = context.expectedType;\n      }\n\n      var cases = {};\n      var outputs = [];\n\n      for (var i = 2; i < args.length - 1; i += 2) {\n        var labels = args[i];\n        var value = args[i + 1];\n\n        if (!Array.isArray(labels)) {\n          labels = [labels];\n        }\n\n        var labelContext = context.concat(i);\n\n        if (labels.length === 0) {\n          return labelContext.error(\'Expected at least one branch label.\');\n        }\n\n        var _iterator32 = _createForOfIteratorHelper(labels),\n            _step32;\n\n        try {\n          for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n            var label = _step32.value;\n\n            if (typeof label !== \'number\' && typeof label !== \'string\') {\n              return labelContext.error("Branch labels must be numbers or strings.");\n            } else if (typeof label === \'number\' && Math.abs(label) > Number.MAX_SAFE_INTEGER) {\n              return labelContext.error("Branch labels must be integers no larger than ".concat(Number.MAX_SAFE_INTEGER, "."));\n            } else if (typeof label === \'number\' && Math.floor(label) !== label) {\n              return labelContext.error("Numeric branch labels must be integer values.");\n            } else if (!inputType) {\n              inputType = typeOf(label);\n            } else if (labelContext.checkSubtype(inputType, typeOf(label))) {\n              return null;\n            }\n\n            if (typeof cases[String(label)] !== \'undefined\') {\n              return labelContext.error(\'Branch labels must be unique.\');\n            }\n\n            cases[String(label)] = outputs.length;\n          }\n        } catch (err) {\n          _iterator32.e(err);\n        } finally {\n          _iterator32.f();\n        }\n\n        var result = context.parse(value, i, outputType);\n        if (!result) return null;\n        outputType = outputType || result.type;\n        outputs.push(result);\n      }\n\n      var input = context.parse(args[1], 1, ValueType);\n      if (!input) return null;\n      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n      if (!otherwise) return null;\n\n      if (input.type.kind !== \'value\' && context.concat(1).checkSubtype(inputType, input.type)) {\n        return null;\n      }\n\n      return new Match(inputType, outputType, input, cases, outputs, otherwise);\n    }\n  }]);\n\n  return Match;\n}();\n\nvar Case = /*#__PURE__*/function () {\n  function Case(type, branches, otherwise) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Case);\n\n    this.type = type;\n    this.branches = branches;\n    this.otherwise = otherwise;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Case, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var _iterator33 = _createForOfIteratorHelper(this.branches),\n          _step33;\n\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var _step33$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step33.value, 2),\n              test = _step33$value[0],\n              _expression6 = _step33$value[1];\n\n          if (test.evaluate(ctx)) {\n            return _expression6.evaluate(ctx);\n          }\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n\n      return this.otherwise.evaluate(ctx);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      var _iterator34 = _createForOfIteratorHelper(this.branches),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var _step34$value = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_step34.value, 2),\n              test = _step34$value[0],\n              _expression7 = _step34$value[1];\n\n          fn(test);\n          fn(_expression7);\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n\n      fn(this.otherwise);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return this.branches.every(function (_ref5) {\n        var _ref6 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref5, 2),\n            _ = _ref6[0],\n            out = _ref6[1];\n\n        return out.outputDefined();\n      }) && this.otherwise.outputDefined();\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'case\'];\n      this.eachChild(function (child) {\n        serialized.push(child.serialize());\n      });\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length < 4) return context.error("Expected at least 3 arguments, but found only ".concat(args.length - 1, "."));\n      if (args.length % 2 !== 0) return context.error("Expected an odd number of arguments.");\n      var outputType;\n\n      if (context.expectedType && context.expectedType.kind !== \'value\') {\n        outputType = context.expectedType;\n      }\n\n      var branches = [];\n\n      for (var i = 1; i < args.length - 1; i += 2) {\n        var test = context.parse(args[i], i, BooleanType);\n        if (!test) return null;\n        var result = context.parse(args[i + 1], i + 1, outputType);\n        if (!result) return null;\n        branches.push([test, result]);\n        outputType = outputType || result.type;\n      }\n\n      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);\n      if (!otherwise) return null;\n      return new Case(outputType, branches, otherwise);\n    }\n  }]);\n\n  return Case;\n}();\n\nvar Slice = /*#__PURE__*/function () {\n  function Slice(type, input, beginIndex, endIndex) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Slice);\n\n    this.type = type;\n    this.input = input;\n    this.beginIndex = beginIndex;\n    this.endIndex = endIndex;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Slice, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var input = this.input.evaluate(ctx);\n      var beginIndex = this.beginIndex.evaluate(ctx);\n\n      if (!isValidNativeType(input, [\'string\', \'array\'])) {\n        throw new RuntimeError("Expected first argument to be of type array or string, but found ".concat(toString(typeOf(input)), " instead."));\n      }\n\n      if (this.endIndex) {\n        var endIndex = this.endIndex.evaluate(ctx);\n        return input.slice(beginIndex, endIndex);\n      }\n\n      return input.slice(beginIndex);\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n      fn(this.beginIndex);\n\n      if (this.endIndex) {\n        fn(this.endIndex);\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      if (this.endIndex != null && this.endIndex !== undefined) {\n        var endIndex = this.endIndex.serialize();\n        return [\'slice\', this.input.serialize(), this.beginIndex.serialize(), endIndex];\n      }\n\n      return [\'slice\', this.input.serialize(), this.beginIndex.serialize()];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length <= 2 || args.length >= 5) {\n        return context.error("Expected 3 or 4 arguments, but found ".concat(args.length - 1, " instead."));\n      }\n\n      var input = context.parse(args[1], 1, ValueType);\n      var beginIndex = context.parse(args[2], 2, NumberType);\n      if (!input || !beginIndex) return null;\n\n      if (!isValidType(input.type, [array(ValueType), StringType, ValueType])) {\n        return context.error("Expected first argument to be of type array or string, but found ".concat(toString(input.type), " instead"));\n      }\n\n      if (args.length === 4) {\n        var endIndex = context.parse(args[3], 3, NumberType);\n        if (!endIndex) return null;\n        return new Slice(input.type, input, beginIndex, endIndex);\n      } else {\n        return new Slice(input.type, input, beginIndex);\n      }\n    }\n  }]);\n\n  return Slice;\n}();\n\nfunction isComparableType(op, type) {\n  if (op === \'==\' || op === \'!=\') {\n    return type.kind === \'boolean\' || type.kind === \'string\' || type.kind === \'number\' || type.kind === \'null\' || type.kind === \'value\';\n  } else {\n    return type.kind === \'string\' || type.kind === \'number\' || type.kind === \'value\';\n  }\n}\n\nfunction eq(ctx, a, b) {\n  return a === b;\n}\n\nfunction neq(ctx, a, b) {\n  return a !== b;\n}\n\nfunction lt(ctx, a, b) {\n  return a < b;\n}\n\nfunction gt(ctx, a, b) {\n  return a > b;\n}\n\nfunction lteq(ctx, a, b) {\n  return a <= b;\n}\n\nfunction gteq(ctx, a, b) {\n  return a >= b;\n}\n\nfunction eqCollate(ctx, a, b, c) {\n  return c.compare(a, b) === 0;\n}\n\nfunction neqCollate(ctx, a, b, c) {\n  return !eqCollate(ctx, a, b, c);\n}\n\nfunction ltCollate(ctx, a, b, c) {\n  return c.compare(a, b) < 0;\n}\n\nfunction gtCollate(ctx, a, b, c) {\n  return c.compare(a, b) > 0;\n}\n\nfunction lteqCollate(ctx, a, b, c) {\n  return c.compare(a, b) <= 0;\n}\n\nfunction gteqCollate(ctx, a, b, c) {\n  return c.compare(a, b) >= 0;\n}\n\nfunction makeComparison(op, compareBasic, compareWithCollator) {\n  var isOrderComparison = op !== \'==\' && op !== \'!=\';\n  return /*#__PURE__*/function () {\n    function Comparison(lhs, rhs, collator) {\n      (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Comparison);\n\n      this.type = BooleanType;\n      this.lhs = lhs;\n      this.rhs = rhs;\n      this.collator = collator;\n      this.hasUntypedArgument = lhs.type.kind === \'value\' || rhs.type.kind === \'value\';\n    }\n\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Comparison, [{\n      key: "evaluate",\n      value: function evaluate(ctx) {\n        var lhs = this.lhs.evaluate(ctx);\n        var rhs = this.rhs.evaluate(ctx);\n\n        if (isOrderComparison && this.hasUntypedArgument) {\n          var _lt = typeOf(lhs);\n\n          var rt = typeOf(rhs);\n\n          if (_lt.kind !== rt.kind || !(_lt.kind === \'string\' || _lt.kind === \'number\')) {\n            throw new RuntimeError("Expected arguments for \\"".concat(op, "\\" to be (string, string) or (number, number), but found (").concat(_lt.kind, ", ").concat(rt.kind, ") instead."));\n          }\n        }\n\n        if (this.collator && !isOrderComparison && this.hasUntypedArgument) {\n          var _lt2 = typeOf(lhs);\n\n          var _rt = typeOf(rhs);\n\n          if (_lt2.kind !== \'string\' || _rt.kind !== \'string\') {\n            return compareBasic(ctx, lhs, rhs);\n          }\n        }\n\n        return this.collator ? compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) : compareBasic(ctx, lhs, rhs);\n      }\n    }, {\n      key: "eachChild",\n      value: function eachChild(fn) {\n        fn(this.lhs);\n        fn(this.rhs);\n\n        if (this.collator) {\n          fn(this.collator);\n        }\n      }\n    }, {\n      key: "outputDefined",\n      value: function outputDefined() {\n        return true;\n      }\n    }, {\n      key: "serialize",\n      value: function serialize() {\n        var serialized = [op];\n        this.eachChild(function (child) {\n          serialized.push(child.serialize());\n        });\n        return serialized;\n      }\n    }], [{\n      key: "parse",\n      value: function parse(args, context) {\n        if (args.length !== 3 && args.length !== 4) return context.error("Expected two or three arguments.");\n        var op = args[0];\n        var lhs = context.parse(args[1], 1, ValueType);\n        if (!lhs) return null;\n\n        if (!isComparableType(op, lhs.type)) {\n          return context.concat(1).error("\\"".concat(op, "\\" comparisons are not supported for type \'").concat(toString(lhs.type), "\'."));\n        }\n\n        var rhs = context.parse(args[2], 2, ValueType);\n        if (!rhs) return null;\n\n        if (!isComparableType(op, rhs.type)) {\n          return context.concat(2).error("\\"".concat(op, "\\" comparisons are not supported for type \'").concat(toString(rhs.type), "\'."));\n        }\n\n        if (lhs.type.kind !== rhs.type.kind && lhs.type.kind !== \'value\' && rhs.type.kind !== \'value\') {\n          return context.error("Cannot compare types \'".concat(toString(lhs.type), "\' and \'").concat(toString(rhs.type), "\'."));\n        }\n\n        if (isOrderComparison) {\n          if (lhs.type.kind === \'value\' && rhs.type.kind !== \'value\') {\n            lhs = new Assertion(rhs.type, [lhs]);\n          } else if (lhs.type.kind !== \'value\' && rhs.type.kind === \'value\') {\n            rhs = new Assertion(lhs.type, [rhs]);\n          }\n        }\n\n        var collator = null;\n\n        if (args.length === 4) {\n          if (lhs.type.kind !== \'string\' && rhs.type.kind !== \'string\' && lhs.type.kind !== \'value\' && rhs.type.kind !== \'value\') {\n            return context.error("Cannot use collator to compare non-string types.");\n          }\n\n          collator = context.parse(args[3], 3, CollatorType);\n          if (!collator) return null;\n        }\n\n        return new Comparison(lhs, rhs, collator);\n      }\n    }]);\n\n    return Comparison;\n  }();\n}\n\nvar Equals = makeComparison(\'==\', eq, eqCollate);\nvar NotEquals = makeComparison(\'!=\', neq, neqCollate);\nvar LessThan = makeComparison(\'<\', lt, ltCollate);\nvar GreaterThan = makeComparison(\'>\', gt, gtCollate);\nvar LessThanOrEqual = makeComparison(\'<=\', lteq, lteqCollate);\nvar GreaterThanOrEqual = makeComparison(\'>=\', gteq, gteqCollate);\n\nvar NumberFormat = /*#__PURE__*/function () {\n  function NumberFormat(number, locale, currency, minFractionDigits, maxFractionDigits) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, NumberFormat);\n\n    this.type = StringType;\n    this.number = number;\n    this.locale = locale;\n    this.currency = currency;\n    this.minFractionDigits = minFractionDigits;\n    this.maxFractionDigits = maxFractionDigits;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(NumberFormat, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [], {\n        style: this.currency ? \'currency\' : \'decimal\',\n        currency: this.currency ? this.currency.evaluate(ctx) : undefined,\n        minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : undefined,\n        maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : undefined\n      }).format(this.number.evaluate(ctx));\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.number);\n\n      if (this.locale) {\n        fn(this.locale);\n      }\n\n      if (this.currency) {\n        fn(this.currency);\n      }\n\n      if (this.minFractionDigits) {\n        fn(this.minFractionDigits);\n      }\n\n      if (this.maxFractionDigits) {\n        fn(this.maxFractionDigits);\n      }\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var options = {};\n\n      if (this.locale) {\n        options[\'locale\'] = this.locale.serialize();\n      }\n\n      if (this.currency) {\n        options[\'currency\'] = this.currency.serialize();\n      }\n\n      if (this.minFractionDigits) {\n        options[\'min-fraction-digits\'] = this.minFractionDigits.serialize();\n      }\n\n      if (this.maxFractionDigits) {\n        options[\'max-fraction-digits\'] = this.maxFractionDigits.serialize();\n      }\n\n      return [\'number-format\', this.number.serialize(), options];\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 3) return context.error("Expected two arguments.");\n      var number = context.parse(args[1], 1, NumberType);\n      if (!number) return null;\n      var options = args[2];\n      if (typeof options !== \'object\' || Array.isArray(options)) return context.error("NumberFormat options argument must be an object.");\n      var locale = null;\n\n      if (options[\'locale\']) {\n        locale = context.parse(options[\'locale\'], 1, StringType);\n        if (!locale) return null;\n      }\n\n      var currency = null;\n\n      if (options[\'currency\']) {\n        currency = context.parse(options[\'currency\'], 1, StringType);\n        if (!currency) return null;\n      }\n\n      var minFractionDigits = null;\n\n      if (options[\'min-fraction-digits\']) {\n        minFractionDigits = context.parse(options[\'min-fraction-digits\'], 1, NumberType);\n        if (!minFractionDigits) return null;\n      }\n\n      var maxFractionDigits = null;\n\n      if (options[\'max-fraction-digits\']) {\n        maxFractionDigits = context.parse(options[\'max-fraction-digits\'], 1, NumberType);\n        if (!maxFractionDigits) return null;\n      }\n\n      return new NumberFormat(number, locale, currency, minFractionDigits, maxFractionDigits);\n    }\n  }]);\n\n  return NumberFormat;\n}();\n\nvar Length = /*#__PURE__*/function () {\n  function Length(input) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, Length);\n\n    this.type = NumberType;\n    this.input = input;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(Length, [{\n    key: "evaluate",\n    value: function evaluate(ctx) {\n      var input = this.input.evaluate(ctx);\n\n      if (typeof input === \'string\') {\n        return input.length;\n      } else if (Array.isArray(input)) {\n        return input.length;\n      } else {\n        throw new RuntimeError("Expected value to be of type string or array, but found ".concat(toString(typeOf(input)), " instead."));\n      }\n    }\n  }, {\n    key: "eachChild",\n    value: function eachChild(fn) {\n      fn(this.input);\n    }\n  }, {\n    key: "outputDefined",\n    value: function outputDefined() {\n      return false;\n    }\n  }, {\n    key: "serialize",\n    value: function serialize() {\n      var serialized = [\'length\'];\n      this.eachChild(function (child) {\n        serialized.push(child.serialize());\n      });\n      return serialized;\n    }\n  }], [{\n    key: "parse",\n    value: function parse(args, context) {\n      if (args.length !== 2) return context.error("Expected 1 argument, but found ".concat(args.length - 1, " instead."));\n      var input = context.parse(args[1], 1);\n      if (!input) return null;\n      if (input.type.kind !== \'array\' && input.type.kind !== \'string\' && input.type.kind !== \'value\') return context.error("Expected argument of type string or array, but found ".concat(toString(input.type), " instead."));\n      return new Length(input);\n    }\n  }]);\n\n  return Length;\n}();\n\nvar expressions = {\n  \'==\': Equals,\n  \'!=\': NotEquals,\n  \'>\': GreaterThan,\n  \'<\': LessThan,\n  \'>=\': GreaterThanOrEqual,\n  \'<=\': LessThanOrEqual,\n  \'array\': Assertion,\n  \'at\': At,\n  \'boolean\': Assertion,\n  \'case\': Case,\n  \'coalesce\': Coalesce,\n  \'collator\': CollatorExpression,\n  \'format\': FormatExpression,\n  \'image\': ImageExpression,\n  \'in\': In,\n  \'index-of\': IndexOf,\n  \'interpolate\': Interpolate,\n  \'interpolate-hcl\': Interpolate,\n  \'interpolate-lab\': Interpolate,\n  \'length\': Length,\n  \'let\': Let,\n  \'literal\': Literal,\n  \'match\': Match,\n  \'number\': Assertion,\n  \'number-format\': NumberFormat,\n  \'object\': Assertion,\n  \'slice\': Slice,\n  \'step\': Step,\n  \'string\': Assertion,\n  \'to-boolean\': Coercion,\n  \'to-color\': Coercion,\n  \'to-number\': Coercion,\n  \'to-string\': Coercion,\n  \'var\': Var,\n  \'within\': Within\n};\n\nfunction rgba(ctx, _ref7) {\n  var _ref8 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref7, 4),\n      r = _ref8[0],\n      g = _ref8[1],\n      b = _ref8[2],\n      a = _ref8[3];\n\n  r = r.evaluate(ctx);\n  g = g.evaluate(ctx);\n  b = b.evaluate(ctx);\n  var alpha = a ? a.evaluate(ctx) : 1;\n  var error = validateRGBA(r, g, b, alpha);\n  if (error) throw new RuntimeError(error);\n  return new Color(r / 255 * alpha, g / 255 * alpha, b / 255 * alpha, alpha);\n}\n\nfunction has(key, obj) {\n  return key in obj;\n}\n\nfunction get(key, obj) {\n  var v = obj[key];\n  return typeof v === \'undefined\' ? null : v;\n}\n\nfunction binarySearch(v, a, i, j) {\n  while (i <= j) {\n    var m = i + j >> 1;\n    if (a[m] === v) return true;\n    if (a[m] > v) j = m - 1;else i = m + 1;\n  }\n\n  return false;\n}\n\nfunction varargs(type) {\n  return {\n    type: type\n  };\n}\n\nCompoundExpression.register(expressions, {\n  \'error\': [ErrorType, [StringType], function (ctx, _ref9) {\n    var _ref10 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref9, 1),\n        v = _ref10[0];\n\n    throw new RuntimeError(v.evaluate(ctx));\n  }],\n  \'typeof\': [StringType, [ValueType], function (ctx, _ref11) {\n    var _ref12 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref11, 1),\n        v = _ref12[0];\n\n    return toString(typeOf(v.evaluate(ctx)));\n  }],\n  \'to-rgba\': [array(NumberType, 4), [ColorType], function (ctx, _ref13) {\n    var _ref14 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref13, 1),\n        v = _ref14[0];\n\n    return v.evaluate(ctx).toArray();\n  }],\n  \'rgb\': [ColorType, [NumberType, NumberType, NumberType], rgba],\n  \'rgba\': [ColorType, [NumberType, NumberType, NumberType, NumberType], rgba],\n  \'has\': {\n    type: BooleanType,\n    overloads: [[[StringType], function (ctx, _ref15) {\n      var _ref16 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref15, 1),\n          key = _ref16[0];\n\n      return has(key.evaluate(ctx), ctx.properties());\n    }], [[StringType, ObjectType], function (ctx, _ref17) {\n      var _ref18 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref17, 2),\n          key = _ref18[0],\n          obj = _ref18[1];\n\n      return has(key.evaluate(ctx), obj.evaluate(ctx));\n    }]]\n  },\n  \'get\': {\n    type: ValueType,\n    overloads: [[[StringType], function (ctx, _ref19) {\n      var _ref20 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref19, 1),\n          key = _ref20[0];\n\n      return get(key.evaluate(ctx), ctx.properties());\n    }], [[StringType, ObjectType], function (ctx, _ref21) {\n      var _ref22 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref21, 2),\n          key = _ref22[0],\n          obj = _ref22[1];\n\n      return get(key.evaluate(ctx), obj.evaluate(ctx));\n    }]]\n  },\n  \'feature-state\': [ValueType, [StringType], function (ctx, _ref23) {\n    var _ref24 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref23, 1),\n        key = _ref24[0];\n\n    return get(key.evaluate(ctx), ctx.featureState || {});\n  }],\n  \'properties\': [ObjectType, [], function (ctx) {\n    return ctx.properties();\n  }],\n  \'geometry-type\': [StringType, [], function (ctx) {\n    return ctx.geometryType();\n  }],\n  \'id\': [ValueType, [], function (ctx) {\n    return ctx.id();\n  }],\n  \'zoom\': [NumberType, [], function (ctx) {\n    return ctx.globals.zoom;\n  }],\n  \'heatmap-density\': [NumberType, [], function (ctx) {\n    return ctx.globals.heatmapDensity || 0;\n  }],\n  \'line-progress\': [NumberType, [], function (ctx) {\n    return ctx.globals.lineProgress || 0;\n  }],\n  \'sky-radial-progress\': [NumberType, [], function (ctx) {\n    return ctx.globals.skyRadialProgress || 0;\n  }],\n  \'accumulated\': [ValueType, [], function (ctx) {\n    return ctx.globals.accumulated === undefined ? null : ctx.globals.accumulated;\n  }],\n  \'+\': [NumberType, varargs(NumberType), function (ctx, args) {\n    var result = 0;\n\n    var _iterator35 = _createForOfIteratorHelper(args),\n        _step35;\n\n    try {\n      for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n        var arg = _step35.value;\n        result += arg.evaluate(ctx);\n      }\n    } catch (err) {\n      _iterator35.e(err);\n    } finally {\n      _iterator35.f();\n    }\n\n    return result;\n  }],\n  \'*\': [NumberType, varargs(NumberType), function (ctx, args) {\n    var result = 1;\n\n    var _iterator36 = _createForOfIteratorHelper(args),\n        _step36;\n\n    try {\n      for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n        var arg = _step36.value;\n        result *= arg.evaluate(ctx);\n      }\n    } catch (err) {\n      _iterator36.e(err);\n    } finally {\n      _iterator36.f();\n    }\n\n    return result;\n  }],\n  \'-\': {\n    type: NumberType,\n    overloads: [[[NumberType, NumberType], function (ctx, _ref25) {\n      var _ref26 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref25, 2),\n          a = _ref26[0],\n          b = _ref26[1];\n\n      return a.evaluate(ctx) - b.evaluate(ctx);\n    }], [[NumberType], function (ctx, _ref27) {\n      var _ref28 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref27, 1),\n          a = _ref28[0];\n\n      return -a.evaluate(ctx);\n    }]]\n  },\n  \'/\': [NumberType, [NumberType, NumberType], function (ctx, _ref29) {\n    var _ref30 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref29, 2),\n        a = _ref30[0],\n        b = _ref30[1];\n\n    return a.evaluate(ctx) / b.evaluate(ctx);\n  }],\n  \'%\': [NumberType, [NumberType, NumberType], function (ctx, _ref31) {\n    var _ref32 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref31, 2),\n        a = _ref32[0],\n        b = _ref32[1];\n\n    return a.evaluate(ctx) % b.evaluate(ctx);\n  }],\n  \'ln2\': [NumberType, [], function () {\n    return Math.LN2;\n  }],\n  \'pi\': [NumberType, [], function () {\n    return Math.PI;\n  }],\n  \'e\': [NumberType, [], function () {\n    return Math.E;\n  }],\n  \'^\': [NumberType, [NumberType, NumberType], function (ctx, _ref33) {\n    var _ref34 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref33, 2),\n        b = _ref34[0],\n        e = _ref34[1];\n\n    return Math.pow(b.evaluate(ctx), e.evaluate(ctx));\n  }],\n  \'sqrt\': [NumberType, [NumberType], function (ctx, _ref35) {\n    var _ref36 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref35, 1),\n        x = _ref36[0];\n\n    return Math.sqrt(x.evaluate(ctx));\n  }],\n  \'log10\': [NumberType, [NumberType], function (ctx, _ref37) {\n    var _ref38 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref37, 1),\n        n = _ref38[0];\n\n    return Math.log(n.evaluate(ctx)) / Math.LN10;\n  }],\n  \'ln\': [NumberType, [NumberType], function (ctx, _ref39) {\n    var _ref40 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref39, 1),\n        n = _ref40[0];\n\n    return Math.log(n.evaluate(ctx));\n  }],\n  \'log2\': [NumberType, [NumberType], function (ctx, _ref41) {\n    var _ref42 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref41, 1),\n        n = _ref42[0];\n\n    return Math.log(n.evaluate(ctx)) / Math.LN2;\n  }],\n  \'sin\': [NumberType, [NumberType], function (ctx, _ref43) {\n    var _ref44 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref43, 1),\n        n = _ref44[0];\n\n    return Math.sin(n.evaluate(ctx));\n  }],\n  \'cos\': [NumberType, [NumberType], function (ctx, _ref45) {\n    var _ref46 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref45, 1),\n        n = _ref46[0];\n\n    return Math.cos(n.evaluate(ctx));\n  }],\n  \'tan\': [NumberType, [NumberType], function (ctx, _ref47) {\n    var _ref48 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref47, 1),\n        n = _ref48[0];\n\n    return Math.tan(n.evaluate(ctx));\n  }],\n  \'asin\': [NumberType, [NumberType], function (ctx, _ref49) {\n    var _ref50 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref49, 1),\n        n = _ref50[0];\n\n    return Math.asin(n.evaluate(ctx));\n  }],\n  \'acos\': [NumberType, [NumberType], function (ctx, _ref51) {\n    var _ref52 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref51, 1),\n        n = _ref52[0];\n\n    return Math.acos(n.evaluate(ctx));\n  }],\n  \'atan\': [NumberType, [NumberType], function (ctx, _ref53) {\n    var _ref54 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref53, 1),\n        n = _ref54[0];\n\n    return Math.atan(n.evaluate(ctx));\n  }],\n  \'min\': [NumberType, varargs(NumberType), function (ctx, args) {\n    return Math.min.apply(Math, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(args.map(function (arg) {\n      return arg.evaluate(ctx);\n    })));\n  }],\n  \'max\': [NumberType, varargs(NumberType), function (ctx, args) {\n    return Math.max.apply(Math, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(args.map(function (arg) {\n      return arg.evaluate(ctx);\n    })));\n  }],\n  \'abs\': [NumberType, [NumberType], function (ctx, _ref55) {\n    var _ref56 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref55, 1),\n        n = _ref56[0];\n\n    return Math.abs(n.evaluate(ctx));\n  }],\n  \'round\': [NumberType, [NumberType], function (ctx, _ref57) {\n    var _ref58 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref57, 1),\n        n = _ref58[0];\n\n    var v = n.evaluate(ctx);\n    return v < 0 ? -Math.round(-v) : Math.round(v);\n  }],\n  \'floor\': [NumberType, [NumberType], function (ctx, _ref59) {\n    var _ref60 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref59, 1),\n        n = _ref60[0];\n\n    return Math.floor(n.evaluate(ctx));\n  }],\n  \'ceil\': [NumberType, [NumberType], function (ctx, _ref61) {\n    var _ref62 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref61, 1),\n        n = _ref62[0];\n\n    return Math.ceil(n.evaluate(ctx));\n  }],\n  \'filter-==\': [BooleanType, [StringType, ValueType], function (ctx, _ref63) {\n    var _ref64 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref63, 2),\n        k = _ref64[0],\n        v = _ref64[1];\n\n    return ctx.properties()[k.value] === v.value;\n  }],\n  \'filter-id-==\': [BooleanType, [ValueType], function (ctx, _ref65) {\n    var _ref66 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref65, 1),\n        v = _ref66[0];\n\n    return ctx.id() === v.value;\n  }],\n  \'filter-type-==\': [BooleanType, [StringType], function (ctx, _ref67) {\n    var _ref68 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref67, 1),\n        v = _ref68[0];\n\n    return ctx.geometryType() === v.value;\n  }],\n  \'filter-<\': [BooleanType, [StringType, ValueType], function (ctx, _ref69) {\n    var _ref70 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref69, 2),\n        k = _ref70[0],\n        v = _ref70[1];\n\n    var a = ctx.properties()[k.value];\n    var b = v.value;\n    return typeof a === typeof b && a < b;\n  }],\n  \'filter-id-<\': [BooleanType, [ValueType], function (ctx, _ref71) {\n    var _ref72 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref71, 1),\n        v = _ref72[0];\n\n    var a = ctx.id();\n    var b = v.value;\n    return typeof a === typeof b && a < b;\n  }],\n  \'filter->\': [BooleanType, [StringType, ValueType], function (ctx, _ref73) {\n    var _ref74 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref73, 2),\n        k = _ref74[0],\n        v = _ref74[1];\n\n    var a = ctx.properties()[k.value];\n    var b = v.value;\n    return typeof a === typeof b && a > b;\n  }],\n  \'filter-id->\': [BooleanType, [ValueType], function (ctx, _ref75) {\n    var _ref76 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref75, 1),\n        v = _ref76[0];\n\n    var a = ctx.id();\n    var b = v.value;\n    return typeof a === typeof b && a > b;\n  }],\n  \'filter-<=\': [BooleanType, [StringType, ValueType], function (ctx, _ref77) {\n    var _ref78 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref77, 2),\n        k = _ref78[0],\n        v = _ref78[1];\n\n    var a = ctx.properties()[k.value];\n    var b = v.value;\n    return typeof a === typeof b && a <= b;\n  }],\n  \'filter-id-<=\': [BooleanType, [ValueType], function (ctx, _ref79) {\n    var _ref80 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref79, 1),\n        v = _ref80[0];\n\n    var a = ctx.id();\n    var b = v.value;\n    return typeof a === typeof b && a <= b;\n  }],\n  \'filter->=\': [BooleanType, [StringType, ValueType], function (ctx, _ref81) {\n    var _ref82 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref81, 2),\n        k = _ref82[0],\n        v = _ref82[1];\n\n    var a = ctx.properties()[k.value];\n    var b = v.value;\n    return typeof a === typeof b && a >= b;\n  }],\n  \'filter-id->=\': [BooleanType, [ValueType], function (ctx, _ref83) {\n    var _ref84 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref83, 1),\n        v = _ref84[0];\n\n    var a = ctx.id();\n    var b = v.value;\n    return typeof a === typeof b && a >= b;\n  }],\n  \'filter-has\': [BooleanType, [ValueType], function (ctx, _ref85) {\n    var _ref86 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref85, 1),\n        k = _ref86[0];\n\n    return k.value in ctx.properties();\n  }],\n  \'filter-has-id\': [BooleanType, [], function (ctx) {\n    return ctx.id() !== null && ctx.id() !== undefined;\n  }],\n  \'filter-type-in\': [BooleanType, [array(StringType)], function (ctx, _ref87) {\n    var _ref88 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref87, 1),\n        v = _ref88[0];\n\n    return v.value.indexOf(ctx.geometryType()) >= 0;\n  }],\n  \'filter-id-in\': [BooleanType, [array(ValueType)], function (ctx, _ref89) {\n    var _ref90 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref89, 1),\n        v = _ref90[0];\n\n    return v.value.indexOf(ctx.id()) >= 0;\n  }],\n  \'filter-in-small\': [BooleanType, [StringType, array(ValueType)], function (ctx, _ref91) {\n    var _ref92 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref91, 2),\n        k = _ref92[0],\n        v = _ref92[1];\n\n    return v.value.indexOf(ctx.properties()[k.value]) >= 0;\n  }],\n  \'filter-in-large\': [BooleanType, [StringType, array(ValueType)], function (ctx, _ref93) {\n    var _ref94 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref93, 2),\n        k = _ref94[0],\n        v = _ref94[1];\n\n    return binarySearch(ctx.properties()[k.value], v.value, 0, v.value.length - 1);\n  }],\n  \'all\': {\n    type: BooleanType,\n    overloads: [[[BooleanType, BooleanType], function (ctx, _ref95) {\n      var _ref96 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref95, 2),\n          a = _ref96[0],\n          b = _ref96[1];\n\n      return a.evaluate(ctx) && b.evaluate(ctx);\n    }], [varargs(BooleanType), function (ctx, args) {\n      var _iterator37 = _createForOfIteratorHelper(args),\n          _step37;\n\n      try {\n        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n          var arg = _step37.value;\n          if (!arg.evaluate(ctx)) return false;\n        }\n      } catch (err) {\n        _iterator37.e(err);\n      } finally {\n        _iterator37.f();\n      }\n\n      return true;\n    }]]\n  },\n  \'any\': {\n    type: BooleanType,\n    overloads: [[[BooleanType, BooleanType], function (ctx, _ref97) {\n      var _ref98 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref97, 2),\n          a = _ref98[0],\n          b = _ref98[1];\n\n      return a.evaluate(ctx) || b.evaluate(ctx);\n    }], [varargs(BooleanType), function (ctx, args) {\n      var _iterator38 = _createForOfIteratorHelper(args),\n          _step38;\n\n      try {\n        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n          var arg = _step38.value;\n          if (arg.evaluate(ctx)) return true;\n        }\n      } catch (err) {\n        _iterator38.e(err);\n      } finally {\n        _iterator38.f();\n      }\n\n      return false;\n    }]]\n  },\n  \'!\': [BooleanType, [BooleanType], function (ctx, _ref99) {\n    var _ref100 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref99, 1),\n        b = _ref100[0];\n\n    return !b.evaluate(ctx);\n  }],\n  \'is-supported-script\': [BooleanType, [StringType], function (ctx, _ref101) {\n    var _ref102 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref101, 1),\n        s = _ref102[0];\n\n    var isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;\n\n    if (isSupportedScript) {\n      return isSupportedScript(s.evaluate(ctx));\n    }\n\n    return true;\n  }],\n  \'upcase\': [StringType, [StringType], function (ctx, _ref103) {\n    var _ref104 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref103, 1),\n        s = _ref104[0];\n\n    return s.evaluate(ctx).toUpperCase();\n  }],\n  \'downcase\': [StringType, [StringType], function (ctx, _ref105) {\n    var _ref106 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref105, 1),\n        s = _ref106[0];\n\n    return s.evaluate(ctx).toLowerCase();\n  }],\n  \'concat\': [StringType, varargs(ValueType), function (ctx, args) {\n    return args.map(function (arg) {\n      return toString$1(arg.evaluate(ctx));\n    }).join(\'\');\n  }],\n  \'resolved-locale\': [StringType, [CollatorType], function (ctx, _ref107) {\n    var _ref108 = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(_ref107, 1),\n        collator = _ref108[0];\n\n    return collator.evaluate(ctx).resolvedLocale();\n  }]\n});\n\nfunction success(value) {\n  return {\n    result: \'success\',\n    value: value\n  };\n}\n\nfunction error(value) {\n  return {\n    result: \'error\',\n    value: value\n  };\n}\n\nfunction supportsPropertyExpression(spec) {\n  return spec[\'property-type\'] === \'data-driven\' || spec[\'property-type\'] === \'cross-faded-data-driven\';\n}\n\nfunction supportsZoomExpression(spec) {\n  return !!spec.expression && spec.expression.parameters.indexOf(\'zoom\') > -1;\n}\n\nfunction supportsInterpolation(spec) {\n  return !!spec.expression && spec.expression.interpolated;\n}\n\nfunction getType(val) {\n  if (val instanceof Number) {\n    return \'number\';\n  } else if (val instanceof String) {\n    return \'string\';\n  } else if (val instanceof Boolean) {\n    return \'boolean\';\n  } else if (Array.isArray(val)) {\n    return \'array\';\n  } else if (val === null) {\n    return \'null\';\n  } else {\n    return typeof val;\n  }\n}\n\nfunction isFunction$1(value) {\n  return typeof value === \'object\' && value !== null && !Array.isArray(value);\n}\n\nfunction identityFunction(x) {\n  return x;\n}\n\nfunction createFunction(parameters, propertySpec) {\n  var isColor = propertySpec.type === \'color\';\n  var zoomAndFeatureDependent = parameters.stops && typeof parameters.stops[0][0] === \'object\';\n  var featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n  var zoomDependent = zoomAndFeatureDependent || !featureDependent;\n  var type = parameters.type || (supportsInterpolation(propertySpec) ? \'exponential\' : \'interval\');\n\n  if (isColor) {\n    parameters = extend({}, parameters);\n\n    if (parameters.stops) {\n      parameters.stops = parameters.stops.map(function (stop) {\n        return [stop[0], Color.parse(stop[1])];\n      });\n    }\n\n    if (parameters.default) {\n      parameters.default = Color.parse(parameters.default);\n    } else {\n      parameters.default = Color.parse(propertySpec.default);\n    }\n  }\n\n  if (parameters.colorSpace && parameters.colorSpace !== \'rgb\' && !colorSpaces[parameters.colorSpace]) {\n    throw new Error("Unknown color space: ".concat(parameters.colorSpace));\n  }\n\n  var innerFun;\n  var hashedStops;\n  var categoricalKeyType;\n\n  if (type === \'exponential\') {\n    innerFun = evaluateExponentialFunction;\n  } else if (type === \'interval\') {\n    innerFun = evaluateIntervalFunction;\n  } else if (type === \'categorical\') {\n    innerFun = evaluateCategoricalFunction;\n    hashedStops = Object.create(null);\n\n    var _iterator39 = _createForOfIteratorHelper(parameters.stops),\n        _step39;\n\n    try {\n      for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n        var stop = _step39.value;\n        hashedStops[stop[0]] = stop[1];\n      }\n    } catch (err) {\n      _iterator39.e(err);\n    } finally {\n      _iterator39.f();\n    }\n\n    categoricalKeyType = typeof parameters.stops[0][0];\n  } else if (type === \'identity\') {\n    innerFun = evaluateIdentityFunction;\n  } else {\n    throw new Error("Unknown function type \\"".concat(type, "\\""));\n  }\n\n  if (zoomAndFeatureDependent) {\n    var featureFunctions = {};\n    var zoomStops = [];\n\n    for (var s = 0; s < parameters.stops.length; s++) {\n      var _stop = parameters.stops[s];\n      var zoom = _stop[0].zoom;\n\n      if (featureFunctions[zoom] === undefined) {\n        featureFunctions[zoom] = {\n          zoom: zoom,\n          type: parameters.type,\n          property: parameters.property,\n          default: parameters.default,\n          stops: []\n        };\n        zoomStops.push(zoom);\n      }\n\n      featureFunctions[zoom].stops.push([_stop[0].value, _stop[1]]);\n    }\n\n    var featureFunctionStops = [];\n\n    for (var _i7 = 0, _zoomStops = zoomStops; _i7 < _zoomStops.length; _i7++) {\n      var z = _zoomStops[_i7];\n      featureFunctionStops.push([featureFunctions[z].zoom, createFunction(featureFunctions[z], propertySpec)]);\n    }\n\n    var interpolationType = {\n      name: \'linear\'\n    };\n    return {\n      kind: \'composite\',\n      interpolationType: interpolationType,\n      interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),\n      zoomStops: featureFunctionStops.map(function (s) {\n        return s[0];\n      }),\n      evaluate: function evaluate(_ref109, properties) {\n        var zoom = _ref109.zoom;\n        return evaluateExponentialFunction({\n          stops: featureFunctionStops,\n          base: parameters.base\n        }, propertySpec, zoom).evaluate(zoom, properties);\n      }\n    };\n  } else if (zoomDependent) {\n    var _interpolationType = type === \'exponential\' ? {\n      name: \'exponential\',\n      base: parameters.base !== undefined ? parameters.base : 1\n    } : null;\n\n    return {\n      kind: \'camera\',\n      interpolationType: _interpolationType,\n      interpolationFactor: Interpolate.interpolationFactor.bind(undefined, _interpolationType),\n      zoomStops: parameters.stops.map(function (s) {\n        return s[0];\n      }),\n      evaluate: function evaluate(_ref110) {\n        var zoom = _ref110.zoom;\n        return innerFun(parameters, propertySpec, zoom, hashedStops, categoricalKeyType);\n      }\n    };\n  } else {\n    return {\n      kind: \'source\',\n      evaluate: function evaluate(_, feature) {\n        var value = feature && feature.properties ? feature.properties[parameters.property] : undefined;\n\n        if (value === undefined) {\n          return coalesce(parameters.default, propertySpec.default);\n        }\n\n        return innerFun(parameters, propertySpec, value, hashedStops, categoricalKeyType);\n      }\n    };\n  }\n}\n\nfunction coalesce(a, b, c) {\n  if (a !== undefined) return a;\n  if (b !== undefined) return b;\n  if (c !== undefined) return c;\n}\n\nfunction evaluateCategoricalFunction(parameters, propertySpec, input, hashedStops, keyType) {\n  var evaluated = typeof input === keyType ? hashedStops[input] : undefined;\n  return coalesce(evaluated, parameters.default, propertySpec.default);\n}\n\nfunction evaluateIntervalFunction(parameters, propertySpec, input) {\n  if (getType(input) !== \'number\') return coalesce(parameters.default, propertySpec.default);\n  var n = parameters.stops.length;\n  if (n === 1) return parameters.stops[0][1];\n  if (input <= parameters.stops[0][0]) return parameters.stops[0][1];\n  if (input >= parameters.stops[n - 1][0]) return parameters.stops[n - 1][1];\n  var index = findStopLessThanOrEqualTo(parameters.stops.map(function (stop) {\n    return stop[0];\n  }), input);\n  return parameters.stops[index][1];\n}\n\nfunction evaluateExponentialFunction(parameters, propertySpec, input) {\n  var base = parameters.base !== undefined ? parameters.base : 1;\n  if (getType(input) !== \'number\') return coalesce(parameters.default, propertySpec.default);\n  var n = parameters.stops.length;\n  if (n === 1) return parameters.stops[0][1];\n  if (input <= parameters.stops[0][0]) return parameters.stops[0][1];\n  if (input >= parameters.stops[n - 1][0]) return parameters.stops[n - 1][1];\n  var index = findStopLessThanOrEqualTo(parameters.stops.map(function (stop) {\n    return stop[0];\n  }), input);\n  var t = interpolationFactor(input, base, parameters.stops[index][0], parameters.stops[index + 1][0]);\n  var outputLower = parameters.stops[index][1];\n  var outputUpper = parameters.stops[index + 1][1];\n  var interp = interpolate[propertySpec.type] || identityFunction;\n\n  if (parameters.colorSpace && parameters.colorSpace !== \'rgb\') {\n    var colorspace = colorSpaces[parameters.colorSpace];\n\n    interp = function interp(a, b) {\n      return colorspace.reverse(colorspace.interpolate(colorspace.forward(a), colorspace.forward(b), t));\n    };\n  }\n\n  if (typeof outputLower.evaluate === \'function\') {\n    return {\n      evaluate: function evaluate() {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        var evaluatedLower = outputLower.evaluate.apply(undefined, args);\n        var evaluatedUpper = outputUpper.evaluate.apply(undefined, args);\n\n        if (evaluatedLower === undefined || evaluatedUpper === undefined) {\n          return undefined;\n        }\n\n        return interp(evaluatedLower, evaluatedUpper, t);\n      }\n    };\n  }\n\n  return interp(outputLower, outputUpper, t);\n}\n\nfunction evaluateIdentityFunction(parameters, propertySpec, input) {\n  if (propertySpec.type === \'color\') {\n    input = Color.parse(input);\n  } else if (propertySpec.type === \'formatted\') {\n    input = Formatted.fromString(input.toString());\n  } else if (propertySpec.type === \'resolvedImage\') {\n    input = ResolvedImage.fromString(input.toString());\n  } else if (getType(input) !== propertySpec.type && (propertySpec.type !== \'enum\' || !propertySpec.values[input])) {\n    input = undefined;\n  }\n\n  return coalesce(input, parameters.default, propertySpec.default);\n}\n\nfunction interpolationFactor(input, base, lowerValue, upperValue) {\n  var difference = upperValue - lowerValue;\n  var progress = input - lowerValue;\n\n  if (difference === 0) {\n    return 0;\n  } else if (base === 1) {\n    return progress / difference;\n  } else {\n    return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);\n  }\n}\n\nvar StyleExpression = /*#__PURE__*/function () {\n  function StyleExpression(expression, propertySpec) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, StyleExpression);\n\n    this.expression = expression;\n    this._warningHistory = {};\n    this._evaluator = new EvaluationContext();\n    this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;\n    this._enumValues = propertySpec && propertySpec.type === \'enum\' ? propertySpec.values : null;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(StyleExpression, [{\n    key: "evaluateWithoutErrorHandling",\n    value: function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      this._evaluator.globals = globals;\n      this._evaluator.feature = feature;\n      this._evaluator.featureState = featureState;\n      this._evaluator.canonical = canonical;\n      this._evaluator.availableImages = availableImages || null;\n      this._evaluator.formattedSection = formattedSection;\n      return this.expression.evaluate(this._evaluator);\n    }\n  }, {\n    key: "evaluate",\n    value: function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      this._evaluator.globals = globals;\n      this._evaluator.feature = feature || null;\n      this._evaluator.featureState = featureState || null;\n      this._evaluator.canonical = canonical;\n      this._evaluator.availableImages = availableImages || null;\n      this._evaluator.formattedSection = formattedSection || null;\n\n      try {\n        var val = this.expression.evaluate(this._evaluator);\n\n        if (val === null || val === undefined || typeof val === \'number\' && val !== val) {\n          return this._defaultValue;\n        }\n\n        if (this._enumValues && !(val in this._enumValues)) {\n          throw new RuntimeError("Expected value to be one of ".concat(Object.keys(this._enumValues).map(function (v) {\n            return JSON.stringify(v);\n          }).join(\', \'), ", but found ").concat(JSON.stringify(val), " instead."));\n        }\n\n        return val;\n      } catch (e) {\n        if (!this._warningHistory[e.message]) {\n          this._warningHistory[e.message] = true;\n\n          if (typeof console !== \'undefined\') {\n            console.warn(e.message);\n          }\n        }\n\n        return this._defaultValue;\n      }\n    }\n  }]);\n\n  return StyleExpression;\n}();\n\nfunction isExpression(expression) {\n  return Array.isArray(expression) && expression.length > 0 && typeof expression[0] === \'string\' && expression[0] in expressions;\n}\n\nfunction createExpression(expression, propertySpec) {\n  var parser = new ParsingContext(expressions, [], propertySpec ? getExpectedType(propertySpec) : undefined);\n  var parsed = parser.parse(expression, undefined, undefined, undefined, propertySpec && propertySpec.type === \'string\' ? {\n    typeAnnotation: \'coerce\'\n  } : undefined);\n\n  if (!parsed) {\n    return error(parser.errors);\n  }\n\n  return success(new StyleExpression(parsed, propertySpec));\n}\n\nvar ZoomConstantExpression = /*#__PURE__*/function () {\n  function ZoomConstantExpression(kind, expression) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ZoomConstantExpression);\n\n    this.kind = kind;\n    this._styleExpression = expression;\n    this.isStateDependent = kind !== \'constant\' && !isStateConstant(expression.expression);\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(ZoomConstantExpression, [{\n    key: "evaluateWithoutErrorHandling",\n    value: function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n  }, {\n    key: "evaluate",\n    value: function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n  }]);\n\n  return ZoomConstantExpression;\n}();\n\nvar ZoomDependentExpression = /*#__PURE__*/function () {\n  function ZoomDependentExpression(kind, expression, zoomStops, interpolationType) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ZoomDependentExpression);\n\n    this.kind = kind;\n    this.zoomStops = zoomStops;\n    this._styleExpression = expression;\n    this.isStateDependent = kind !== \'camera\' && !isStateConstant(expression.expression);\n    this.interpolationType = interpolationType;\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(ZoomDependentExpression, [{\n    key: "evaluateWithoutErrorHandling",\n    value: function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n  }, {\n    key: "evaluate",\n    value: function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {\n      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);\n    }\n  }, {\n    key: "interpolationFactor",\n    value: function interpolationFactor(input, lower, upper) {\n      if (this.interpolationType) {\n        return Interpolate.interpolationFactor(this.interpolationType, input, lower, upper);\n      } else {\n        return 0;\n      }\n    }\n  }]);\n\n  return ZoomDependentExpression;\n}();\n\nfunction createPropertyExpression(expression, propertySpec) {\n  expression = createExpression(expression, propertySpec);\n\n  if (expression.result === \'error\') {\n    return expression;\n  }\n\n  var parsed = expression.value.expression;\n  var isFeatureConstant$1 = isFeatureConstant(parsed);\n\n  if (!isFeatureConstant$1 && !supportsPropertyExpression(propertySpec)) {\n    return error([new ParsingError(\'\', \'data expressions not supported\')]);\n  }\n\n  var isZoomConstant = isGlobalPropertyConstant(parsed, [\'zoom\']);\n\n  if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {\n    return error([new ParsingError(\'\', \'zoom expressions not supported\')]);\n  }\n\n  var zoomCurve = findZoomCurve(parsed);\n\n  if (!zoomCurve && !isZoomConstant) {\n    return error([new ParsingError(\'\', \'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.\')]);\n  } else if (zoomCurve instanceof ParsingError) {\n    return error([zoomCurve]);\n  } else if (zoomCurve instanceof Interpolate && !supportsInterpolation(propertySpec)) {\n    return error([new ParsingError(\'\', \'"interpolate" expressions cannot be used with this property\')]);\n  }\n\n  if (!zoomCurve) {\n    return success(isFeatureConstant$1 ? new ZoomConstantExpression(\'constant\', expression.value) : new ZoomConstantExpression(\'source\', expression.value));\n  }\n\n  var interpolationType = zoomCurve instanceof Interpolate ? zoomCurve.interpolation : undefined;\n  return success(isFeatureConstant$1 ? new ZoomDependentExpression(\'camera\', expression.value, zoomCurve.labels, interpolationType) : new ZoomDependentExpression(\'composite\', expression.value, zoomCurve.labels, interpolationType));\n}\n\nvar StylePropertyFunction = /*#__PURE__*/function () {\n  function StylePropertyFunction(parameters, specification) {\n    (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, StylePropertyFunction);\n\n    this._parameters = parameters;\n    this._specification = specification;\n    extend(this, createFunction(this._parameters, this._specification));\n  }\n\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z)(StylePropertyFunction, null, [{\n    key: "deserialize",\n    value: function deserialize(serialized) {\n      return new StylePropertyFunction(serialized._parameters, serialized._specification);\n    }\n  }, {\n    key: "serialize",\n    value: function serialize(input) {\n      return {\n        _parameters: input._parameters,\n        _specification: input._specification\n      };\n    }\n  }]);\n\n  return StylePropertyFunction;\n}();\n\nfunction normalizePropertyExpression(value, specification) {\n  if (isFunction$1(value)) {\n    return new StylePropertyFunction(value, specification);\n  } else if (isExpression(value)) {\n    var _expression8 = createPropertyExpression(value, specification);\n\n    if (_expression8.result === \'error\') {\n      throw new Error(_expression8.value.map(function (err) {\n        return "".concat(err.key, ": ").concat(err.message);\n      }).join(\', \'));\n    }\n\n    return _expression8.value;\n  } else {\n    var constant = value;\n\n    if (typeof value === \'string\' && specification.type === \'color\') {\n      constant = Color.parse(value);\n    }\n\n    return {\n      kind: \'constant\',\n      evaluate: function evaluate() {\n        return constant;\n      }\n    };\n  }\n}\n\nfunction findZoomCurve(expression) {\n  var result = null;\n\n  if (expression instanceof Let) {\n    result = findZoomCurve(expression.result);\n  } else if (expression instanceof Coalesce) {\n    var _iterator40 = _createForOfIteratorHelper(expression.args),\n        _step40;\n\n    try {\n      for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n        var arg = _step40.value;\n        result = findZoomCurve(arg);\n\n        if (result) {\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator40.e(err);\n    } finally {\n      _iterator40.f();\n    }\n  } else if ((expression instanceof Step || expression instanceof Interpolate) && expression.input instanceof CompoundExpression && expression.input.name === \'zoom\') {\n    result = expression;\n  }\n\n  if (result instanceof ParsingError) {\n    return result;\n  }\n\n  expression.eachChild(function (child) {\n    var childResult = findZoomCurve(child);\n\n    if (childResult instanceof ParsingError) {\n      result = childResult;\n    } else if (!result && childResult) {\n      result = new ParsingError(\'\', \'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.\');\n    } else if (result && childResult && result !== childResult) {\n      result = new ParsingError(\'\', \'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.\');\n    }\n  });\n  return result;\n}\n\nfunction getExpectedType(spec) {\n  var types = {\n    color: ColorType,\n    string: StringType,\n    number: NumberType,\n    enum: StringType,\n    boolean: BooleanType,\n    formatted: FormattedType,\n    resolvedImage: ResolvedImageType\n  };\n\n  if (spec.type === \'array\') {\n    return array(types[spec.value] || ValueType, spec.length);\n  }\n\n  return types[spec.type];\n}\n\nfunction getDefaultValue(spec) {\n  if (spec.type === \'color\' && isFunction$1(spec.default)) {\n    return new Color(0, 0, 0, 0);\n  } else if (spec.type === \'color\') {\n    return Color.parse(spec.default) || null;\n  } else if (spec.default === undefined) {\n    return null;\n  } else {\n    return spec.default;\n  }\n}\n\nfunction convertLiteral(value) {\n  return typeof value === \'object\' ? [\'literal\', value] : value;\n}\n\nfunction convertFunction(parameters, propertySpec) {\n  var stops = parameters.stops;\n\n  if (!stops) {\n    return convertIdentityFunction(parameters, propertySpec);\n  }\n\n  var zoomAndFeatureDependent = stops && typeof stops[0][0] === \'object\';\n  var featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;\n  var zoomDependent = zoomAndFeatureDependent || !featureDependent;\n  stops = stops.map(function (stop) {\n    if (!featureDependent && propertySpec.tokens && typeof stop[1] === \'string\') {\n      return [stop[0], convertTokenString(stop[1])];\n    }\n\n    return [stop[0], convertLiteral(stop[1])];\n  });\n\n  if (zoomAndFeatureDependent) {\n    return convertZoomAndPropertyFunction(parameters, propertySpec, stops);\n  } else if (zoomDependent) {\n    return convertZoomFunction(parameters, propertySpec, stops);\n  } else {\n    return convertPropertyFunction(parameters, propertySpec, stops);\n  }\n}\n\nfunction convertIdentityFunction(parameters, propertySpec) {\n  var get = [\'get\', parameters.property];\n\n  if (parameters.default === undefined) {\n    return propertySpec.type === \'string\' ? [\'string\', get] : get;\n  } else if (propertySpec.type === \'enum\') {\n    return [\'match\', get, Object.keys(propertySpec.values), get, parameters.default];\n  } else {\n    var _expression9 = [propertySpec.type === \'color\' ? \'to-color\' : propertySpec.type, get, convertLiteral(parameters.default)];\n\n    if (propertySpec.type === \'array\') {\n      _expression9.splice(1, 0, propertySpec.value, propertySpec.length || null);\n    }\n\n    return _expression9;\n  }\n}\n\nfunction getInterpolateOperator(parameters) {\n  switch (parameters.colorSpace) {\n    case \'hcl\':\n      return \'interpolate-hcl\';\n\n    case \'lab\':\n      return \'interpolate-lab\';\n\n    default:\n      return \'interpolate\';\n  }\n}\n\nfunction convertZoomAndPropertyFunction(parameters, propertySpec, stops) {\n  var featureFunctionParameters = {};\n  var featureFunctionStops = {};\n  var zoomStops = [];\n\n  for (var s = 0; s < stops.length; s++) {\n    var stop = stops[s];\n    var zoom = stop[0].zoom;\n\n    if (featureFunctionParameters[zoom] === undefined) {\n      featureFunctionParameters[zoom] = {\n        zoom: zoom,\n        type: parameters.type,\n        property: parameters.property,\n        default: parameters.default\n      };\n      featureFunctionStops[zoom] = [];\n      zoomStops.push(zoom);\n    }\n\n    featureFunctionStops[zoom].push([stop[0].value, stop[1]]);\n  }\n\n  var functionType = getFunctionType({}, propertySpec);\n\n  if (functionType === \'exponential\') {\n    var _expression10 = [getInterpolateOperator(parameters), [\'linear\'], [\'zoom\']];\n\n    var _iterator41 = _createForOfIteratorHelper(zoomStops),\n        _step41;\n\n    try {\n      for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n        var z = _step41.value;\n        var output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);\n        appendStopPair(_expression10, z, output, false);\n      }\n    } catch (err) {\n      _iterator41.e(err);\n    } finally {\n      _iterator41.f();\n    }\n\n    return _expression10;\n  } else {\n    var _expression11 = [\'step\', [\'zoom\']];\n\n    var _iterator42 = _createForOfIteratorHelper(zoomStops),\n        _step42;\n\n    try {\n      for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n        var _z = _step42.value;\n\n        var _output = convertPropertyFunction(featureFunctionParameters[_z], propertySpec, featureFunctionStops[_z]);\n\n        appendStopPair(_expression11, _z, _output, true);\n      }\n    } catch (err) {\n      _iterator42.e(err);\n    } finally {\n      _iterator42.f();\n    }\n\n    fixupDegenerateStepCurve(_expression11);\n    return _expression11;\n  }\n}\n\nfunction coalesce$1(a, b) {\n  if (a !== undefined) return a;\n  if (b !== undefined) return b;\n}\n\nfunction getFallback(parameters, propertySpec) {\n  var defaultValue = convertLiteral(coalesce$1(parameters.default, propertySpec.default));\n\n  if (defaultValue === undefined && propertySpec.type === \'resolvedImage\') {\n    return \'\';\n  }\n\n  return defaultValue;\n}\n\nfunction convertPropertyFunction(parameters, propertySpec, stops) {\n  var type = getFunctionType(parameters, propertySpec);\n  var get = [\'get\', parameters.property];\n\n  if (type === \'categorical\' && typeof stops[0][0] === \'boolean\') {\n    var _expression12 = [\'case\'];\n\n    var _iterator43 = _createForOfIteratorHelper(stops),\n        _step43;\n\n    try {\n      for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n        var stop = _step43.value;\n\n        _expression12.push([\'==\', get, stop[0]], stop[1]);\n      }\n    } catch (err) {\n      _iterator43.e(err);\n    } finally {\n      _iterator43.f();\n    }\n\n    _expression12.push(getFallback(parameters, propertySpec));\n\n    return _expression12;\n  } else if (type === \'categorical\') {\n    var _expression13 = [\'match\', get];\n\n    var _iterator44 = _createForOfIteratorHelper(stops),\n        _step44;\n\n    try {\n      for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n        var _stop2 = _step44.value;\n        appendStopPair(_expression13, _stop2[0], _stop2[1], false);\n      }\n    } catch (err) {\n      _iterator44.e(err);\n    } finally {\n      _iterator44.f();\n    }\n\n    _expression13.push(getFallback(parameters, propertySpec));\n\n    return _expression13;\n  } else if (type === \'interval\') {\n    var _expression14 = [\'step\', [\'number\', get]];\n\n    var _iterator45 = _createForOfIteratorHelper(stops),\n        _step45;\n\n    try {\n      for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n        var _stop3 = _step45.value;\n        appendStopPair(_expression14, _stop3[0], _stop3[1], true);\n      }\n    } catch (err) {\n      _iterator45.e(err);\n    } finally {\n      _iterator45.f();\n    }\n\n    fixupDegenerateStepCurve(_expression14);\n    return parameters.default === undefined ? _expression14 : [\'case\', [\'==\', [\'typeof\', get], \'number\'], _expression14, convertLiteral(parameters.default)];\n  } else if (type === \'exponential\') {\n    var base = parameters.base !== undefined ? parameters.base : 1;\n    var _expression15 = [getInterpolateOperator(parameters), base === 1 ? [\'linear\'] : [\'exponential\', base], [\'number\', get]];\n\n    var _iterator46 = _createForOfIteratorHelper(stops),\n        _step46;\n\n    try {\n      for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n        var _stop4 = _step46.value;\n        appendStopPair(_expression15, _stop4[0], _stop4[1], false);\n      }\n    } catch (err) {\n      _iterator46.e(err);\n    } finally {\n      _iterator46.f();\n    }\n\n    return parameters.default === undefined ? _expression15 : [\'case\', [\'==\', [\'typeof\', get], \'number\'], _expression15, convertLiteral(parameters.default)];\n  } else {\n    throw new Error("Unknown property function type ".concat(type));\n  }\n}\n\nfunction convertZoomFunction(parameters, propertySpec, stops) {\n  var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [\'zoom\'];\n  var type = getFunctionType(parameters, propertySpec);\n  var expression;\n  var isStep = false;\n\n  if (type === \'interval\') {\n    expression = [\'step\', input];\n    isStep = true;\n  } else if (type === \'exponential\') {\n    var base = parameters.base !== undefined ? parameters.base : 1;\n    expression = [getInterpolateOperator(parameters), base === 1 ? [\'linear\'] : [\'exponential\', base], input];\n  } else {\n    throw new Error("Unknown zoom function type \\"".concat(type, "\\""));\n  }\n\n  var _iterator47 = _createForOfIteratorHelper(stops),\n      _step47;\n\n  try {\n    for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n      var stop = _step47.value;\n      appendStopPair(expression, stop[0], stop[1], isStep);\n    }\n  } catch (err) {\n    _iterator47.e(err);\n  } finally {\n    _iterator47.f();\n  }\n\n  fixupDegenerateStepCurve(expression);\n  return expression;\n}\n\nfunction fixupDegenerateStepCurve(expression) {\n  if (expression[0] === \'step\' && expression.length === 3) {\n    expression.push(0);\n    expression.push(expression[3]);\n  }\n}\n\nfunction appendStopPair(curve, input, output, isStep) {\n  if (curve.length > 3 && input === curve[curve.length - 2]) {\n    return;\n  }\n\n  if (!(isStep && curve.length === 2)) {\n    curve.push(input);\n  }\n\n  curve.push(output);\n}\n\nfunction getFunctionType(parameters, propertySpec) {\n  if (parameters.type) {\n    return parameters.type;\n  } else {\n    return propertySpec.expression.interpolated ? \'exponential\' : \'interval\';\n  }\n}\n\nfunction convertTokenString(s) {\n  var result = [\'concat\'];\n  var re = /{([^{}]+)}/g;\n  var pos = 0;\n\n  for (var match = re.exec(s); match !== null; match = re.exec(s)) {\n    var literal = s.slice(pos, re.lastIndex - match[0].length);\n    pos = re.lastIndex;\n    if (literal.length > 0) result.push(literal);\n    result.push([\'get\', match[1]]);\n  }\n\n  if (result.length === 1) {\n    return s;\n  }\n\n  if (pos < s.length) {\n    result.push(s.slice(pos));\n  } else if (result.length === 2) {\n    return [\'to-string\', result[1]];\n  }\n\n  return result;\n}\n\nfunction isExpressionFilter(filter) {\n  if (filter === true || filter === false) {\n    return true;\n  }\n\n  if (!Array.isArray(filter) || filter.length === 0) {\n    return false;\n  }\n\n  switch (filter[0]) {\n    case \'has\':\n      return filter.length >= 2 && filter[1] !== \'$id\' && filter[1] !== \'$type\';\n\n    case \'in\':\n      return filter.length >= 3 && (typeof filter[1] !== \'string\' || Array.isArray(filter[2]));\n\n    case \'!in\':\n    case \'!has\':\n    case \'none\':\n      return false;\n\n    case \'==\':\n    case \'!=\':\n    case \'>\':\n    case \'>=\':\n    case \'<\':\n    case \'<=\':\n      return filter.length !== 3 || Array.isArray(filter[1]) || Array.isArray(filter[2]);\n\n    case \'any\':\n    case \'all\':\n      var _iterator48 = _createForOfIteratorHelper(filter.slice(1)),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var f = _step48.value;\n\n          if (!isExpressionFilter(f) && typeof f !== \'boolean\') {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n\n      return true;\n\n    default:\n      return true;\n  }\n}\n\nvar filterSpec = {\n  \'type\': \'boolean\',\n  \'default\': false,\n  \'transition\': false,\n  \'property-type\': \'data-driven\',\n  \'expression\': {\n    \'interpolated\': false,\n    \'parameters\': [\'zoom\', \'feature\']\n  }\n};\n\nfunction createFilter(filter) {\n  if (filter === null || filter === undefined) {\n    return {\n      filter: function filter() {\n        return true;\n      },\n      needGeometry: false\n    };\n  }\n\n  if (!isExpressionFilter(filter)) {\n    filter = convertFilter(filter);\n  }\n\n  var compiled = createExpression(filter, filterSpec);\n\n  if (compiled.result === \'error\') {\n    throw new Error(compiled.value.map(function (err) {\n      return "".concat(err.key, ": ").concat(err.message);\n    }).join(\', \'));\n  } else {\n    var needGeometry = geometryNeeded(filter);\n    return {\n      filter: function filter(globalProperties, feature, canonical) {\n        return compiled.value.evaluate(globalProperties, feature, {}, canonical);\n      },\n      needGeometry: needGeometry\n    };\n  }\n}\n\nfunction compare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\nfunction geometryNeeded(filter) {\n  if (!Array.isArray(filter)) return false;\n  if (filter[0] === \'within\') return true;\n\n  for (var index = 1; index < filter.length; index++) {\n    if (geometryNeeded(filter[index])) return true;\n  }\n\n  return false;\n}\n\nfunction convertFilter(filter) {\n  if (!filter) return true;\n  var op = filter[0];\n  if (filter.length <= 1) return op !== \'any\';\n  var converted = op === \'==\' ? convertComparisonOp(filter[1], filter[2], \'==\') : op === \'!=\' ? convertNegation(convertComparisonOp(filter[1], filter[2], \'==\')) : op === \'<\' || op === \'>\' || op === \'<=\' || op === \'>=\' ? convertComparisonOp(filter[1], filter[2], op) : op === \'any\' ? convertDisjunctionOp(filter.slice(1)) : op === \'all\' ? [\'all\'].concat(filter.slice(1).map(convertFilter)) : op === \'none\' ? [\'all\'].concat(filter.slice(1).map(convertFilter).map(convertNegation)) : op === \'in\' ? convertInOp(filter[1], filter.slice(2)) : op === \'!in\' ? convertNegation(convertInOp(filter[1], filter.slice(2))) : op === \'has\' ? convertHasOp(filter[1]) : op === \'!has\' ? convertNegation(convertHasOp(filter[1])) : op === \'within\' ? filter : true;\n  return converted;\n}\n\nfunction convertComparisonOp(property, value, op) {\n  switch (property) {\n    case \'$type\':\n      return ["filter-type-".concat(op), value];\n\n    case \'$id\':\n      return ["filter-id-".concat(op), value];\n\n    default:\n      return ["filter-".concat(op), property, value];\n  }\n}\n\nfunction convertDisjunctionOp(filters) {\n  return [\'any\'].concat(filters.map(convertFilter));\n}\n\nfunction convertInOp(property, values) {\n  if (values.length === 0) {\n    return false;\n  }\n\n  switch (property) {\n    case \'$type\':\n      return ["filter-type-in", [\'literal\', values]];\n\n    case \'$id\':\n      return ["filter-id-in", [\'literal\', values]];\n\n    default:\n      if (values.length > 200 && !values.some(function (v) {\n        return typeof v !== typeof values[0];\n      })) {\n        return [\'filter-in-large\', property, [\'literal\', values.sort(compare)]];\n      } else {\n        return [\'filter-in-small\', property, [\'literal\', values]];\n      }\n\n  }\n}\n\nfunction convertHasOp(property) {\n  switch (property) {\n    case \'$type\':\n      return true;\n\n    case \'$id\':\n      return ["filter-has-id"];\n\n    default:\n      return ["filter-has", property];\n  }\n}\n\nfunction convertNegation(filter) {\n  return [\'!\', filter];\n}\n\nfunction convertFilter$1(filter) {\n  return _convertFilter(filter, {});\n}\n\nfunction _convertFilter(filter, expectedTypes) {\n  if (isExpressionFilter(filter)) {\n    return filter;\n  }\n\n  if (!filter) return true;\n  var op = filter[0];\n  if (filter.length <= 1) return op !== \'any\';\n  var converted;\n\n  if (op === \'==\' || op === \'!=\' || op === \'<\' || op === \'>\' || op === \'<=\' || op === \'>=\') {\n    var _filter = _slicedToArray(filter, 3),\n        property = _filter[1],\n        value = _filter[2];\n\n    converted = convertComparisonOp$1(property, value, op, expectedTypes);\n  } else if (op === \'any\') {\n    var children = filter.slice(1).map(function (f) {\n      var types = {};\n\n      var child = _convertFilter(f, types);\n\n      var typechecks = runtimeTypeChecks(types);\n      return typechecks === true ? child : [\'case\', typechecks, child, false];\n    });\n    return [\'any\'].concat(children);\n  } else if (op === \'all\') {\n    var _ref111;\n\n    var _children = filter.slice(1).map(function (f) {\n      return _convertFilter(f, expectedTypes);\n    });\n\n    return _children.length > 1 ? [\'all\'].concat(_children) : (_ref111 = []).concat.apply(_ref111, _toConsumableArray(_children));\n  } else if (op === \'none\') {\n    return [\'!\', _convertFilter([\'any\'].concat(filter.slice(1)), {})];\n  } else if (op === \'in\') {\n    converted = convertInOp$1(filter[1], filter.slice(2));\n  } else if (op === \'!in\') {\n    converted = convertInOp$1(filter[1], filter.slice(2), true);\n  } else if (op === \'has\') {\n    converted = convertHasOp$1(filter[1]);\n  } else if (op === \'!has\') {\n    converted = [\'!\', convertHasOp$1(filter[1])];\n  } else {\n    converted = true;\n  }\n\n  return converted;\n}\n\nfunction runtimeTypeChecks(expectedTypes) {\n  var conditions = [];\n\n  for (var property in expectedTypes) {\n    var _get = property === \'$id\' ? [\'id\'] : [\'get\', property];\n\n    conditions.push([\'==\', [\'typeof\', _get], expectedTypes[property]]);\n  }\n\n  if (conditions.length === 0) return true;\n  if (conditions.length === 1) return conditions[0];\n  return [\'all\'].concat(conditions);\n}\n\nfunction convertComparisonOp$1(property, value, op, expectedTypes) {\n  var get;\n\n  if (property === \'$type\') {\n    return [op, [\'geometry-type\'], value];\n  } else if (property === \'$id\') {\n    get = [\'id\'];\n  } else {\n    get = [\'get\', property];\n  }\n\n  if (expectedTypes && value !== null) {\n    var type = typeof value;\n    expectedTypes[property] = type;\n  }\n\n  if (op === \'==\' && property !== \'$id\' && value === null) {\n    return [\'all\', [\'has\', property], [\'==\', get, null]];\n  } else if (op === \'!=\' && property !== \'$id\' && value === null) {\n    return [\'any\', [\'!\', [\'has\', property]], [\'!=\', get, null]];\n  }\n\n  return [op, get, value];\n}\n\nfunction convertInOp$1(property, values) {\n  var negate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (values.length === 0) return negate;\n  var get;\n\n  if (property === \'$type\') {\n    get = [\'geometry-type\'];\n  } else if (property === \'$id\') {\n    get = [\'id\'];\n  } else {\n    get = [\'get\', property];\n  }\n\n  var uniformTypes = true;\n  var type = typeof values[0];\n\n  var _iterator49 = _createForOfIteratorHelper(values),\n      _step49;\n\n  try {\n    for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n      var value = _step49.value;\n\n      if (typeof value !== type) {\n        uniformTypes = false;\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator49.e(err);\n  } finally {\n    _iterator49.f();\n  }\n\n  if (uniformTypes && (type === \'string\' || type === \'number\')) {\n    var uniqueValues = values.sort().filter(function (v, i) {\n      return i === 0 || values[i - 1] !== v;\n    });\n    return [\'match\', get, uniqueValues, !negate, negate];\n  }\n\n  return [negate ? \'all\' : \'any\'].concat(values.map(function (v) {\n    return [negate ? \'!=\' : \'==\', get, v];\n  }));\n}\n\nfunction convertHasOp$1(property) {\n  if (property === \'$type\') {\n    return true;\n  } else if (property === \'$id\') {\n    return [\'!=\', [\'id\'], null];\n  } else {\n    return [\'has\', property];\n  }\n}\n\nfunction migrateToExpressions(style) {\n  var converted = [];\n  eachLayer(style, function (layer) {\n    if (layer.filter) {\n      layer.filter = convertFilter$1(layer.filter);\n    }\n  });\n  eachProperty(style, {\n    paint: true,\n    layout: true\n  }, function (_ref112) {\n    var path = _ref112.path,\n        value = _ref112.value,\n        reference = _ref112.reference,\n        set = _ref112.set;\n    if (isExpression(value)) return;\n\n    if (typeof value === \'object\' && !Array.isArray(value)) {\n      set(convertFunction(value, reference));\n      converted.push(path.join(\'.\'));\n    } else if (reference.tokens && typeof value === \'string\') {\n      set(convertTokenString(value));\n    }\n  });\n  return style;\n}\n\nfunction migrate(style) {\n  var migrated = false;\n\n  if (style.version === 7) {\n    style = migrateToV8(style);\n    migrated = true;\n  }\n\n  if (style.version === 8) {\n    migrated = migrateToExpressions(style);\n    migrated = true;\n  }\n\n  if (!migrated) {\n    throw new Error(\'cannot migrate from\', style.version);\n  }\n\n  return style;\n}\n\nfunction composite(style) {\n  var styleIDs = [];\n  var sourceIDs = [];\n  var compositedSourceLayers = [];\n\n  for (var id in style.sources) {\n    var _source = style.sources[id];\n    if (_source.type !== \'vector\') continue;\n    var match = /^mapbox:\\/\\/(.*)/.exec(_source.url);\n    if (!match) continue;\n    styleIDs.push(id);\n    sourceIDs.push(match[1]);\n  }\n\n  if (styleIDs.length < 2) return style;\n  styleIDs.forEach(function (id) {\n    delete style.sources[id];\n  });\n  var compositeID = sourceIDs.join(\',\');\n  style.sources[compositeID] = {\n    \'type\': \'vector\',\n    \'url\': "mapbox://".concat(compositeID)\n  };\n  style.layers.forEach(function (layer) {\n    if (styleIDs.indexOf(layer.source) >= 0) {\n      layer.source = compositeID;\n\n      if (\'source-layer\' in layer) {\n        if (compositedSourceLayers.indexOf(layer[\'source-layer\']) >= 0) {\n          throw new Error(\'Conflicting source layer names\');\n        } else {\n          compositedSourceLayers.push(layer[\'source-layer\']);\n        }\n      }\n    }\n  });\n  return style;\n}\n\nvar refProperties = [\'type\', \'source\', \'source-layer\', \'minzoom\', \'maxzoom\', \'filter\', \'layout\'];\n\nfunction deref(layer, parent) {\n  var result = {};\n\n  for (var k in layer) {\n    if (k !== \'ref\') {\n      result[k] = layer[k];\n    }\n  }\n\n  refProperties.forEach(function (k) {\n    if (k in parent) {\n      result[k] = parent[k];\n    }\n  });\n  return result;\n}\n\nfunction derefLayers(layers) {\n  layers = layers.slice();\n  var map = Object.create(null);\n\n  for (var i = 0; i < layers.length; i++) {\n    map[layers[i].id] = layers[i];\n  }\n\n  for (var _i8 = 0; _i8 < layers.length; _i8++) {\n    if (\'ref\' in layers[_i8]) {\n      layers[_i8] = deref(layers[_i8], map[layers[_i8].ref]);\n    }\n  }\n\n  return layers;\n}\n\nfunction deepEqual(a, b) {\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) return false;\n    }\n\n    return true;\n  }\n\n  if (typeof a === \'object\' && a !== null && b !== null) {\n    if (!(typeof b === \'object\')) return false;\n    var keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length) return false;\n\n    for (var key in a) {\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a === b;\n}\n\nvar operations = {\n  setStyle: \'setStyle\',\n  addLayer: \'addLayer\',\n  removeLayer: \'removeLayer\',\n  setPaintProperty: \'setPaintProperty\',\n  setLayoutProperty: \'setLayoutProperty\',\n  setFilter: \'setFilter\',\n  addSource: \'addSource\',\n  removeSource: \'removeSource\',\n  setGeoJSONSourceData: \'setGeoJSONSourceData\',\n  setLayerZoomRange: \'setLayerZoomRange\',\n  setLayerProperty: \'setLayerProperty\',\n  setCenter: \'setCenter\',\n  setZoom: \'setZoom\',\n  setBearing: \'setBearing\',\n  setPitch: \'setPitch\',\n  setSprite: \'setSprite\',\n  setGlyphs: \'setGlyphs\',\n  setTransition: \'setTransition\',\n  setLight: \'setLight\',\n  setTerrain: \'setTerrain\',\n  setFog: \'setFog\'\n};\n\nfunction addSource(sourceId, after, commands) {\n  commands.push({\n    command: operations.addSource,\n    args: [sourceId, after[sourceId]]\n  });\n}\n\nfunction removeSource(sourceId, commands, sourcesRemoved) {\n  commands.push({\n    command: operations.removeSource,\n    args: [sourceId]\n  });\n  sourcesRemoved[sourceId] = true;\n}\n\nfunction updateSource(sourceId, after, commands, sourcesRemoved) {\n  removeSource(sourceId, commands, sourcesRemoved);\n  addSource(sourceId, after, commands);\n}\n\nfunction canUpdateGeoJSON(before, after, sourceId) {\n  var prop;\n\n  for (prop in before[sourceId]) {\n    if (!before[sourceId].hasOwnProperty(prop)) continue;\n\n    if (prop !== \'data\' && !deepEqual(before[sourceId][prop], after[sourceId][prop])) {\n      return false;\n    }\n  }\n\n  for (prop in after[sourceId]) {\n    if (!after[sourceId].hasOwnProperty(prop)) continue;\n\n    if (prop !== \'data\' && !deepEqual(before[sourceId][prop], after[sourceId][prop])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction diffSources(before, after, commands, sourcesRemoved) {\n  before = before || {};\n  after = after || {};\n  var sourceId;\n\n  for (sourceId in before) {\n    if (!before.hasOwnProperty(sourceId)) continue;\n\n    if (!after.hasOwnProperty(sourceId)) {\n      removeSource(sourceId, commands, sourcesRemoved);\n    }\n  }\n\n  for (sourceId in after) {\n    if (!after.hasOwnProperty(sourceId)) continue;\n\n    if (!before.hasOwnProperty(sourceId)) {\n      addSource(sourceId, after, commands);\n    } else if (!deepEqual(before[sourceId], after[sourceId])) {\n      if (before[sourceId].type === \'geojson\' && after[sourceId].type === \'geojson\' && canUpdateGeoJSON(before, after, sourceId)) {\n        commands.push({\n          command: operations.setGeoJSONSourceData,\n          args: [sourceId, after[sourceId].data]\n        });\n      } else {\n        updateSource(sourceId, after, commands, sourcesRemoved);\n      }\n    }\n  }\n}\n\nfunction diffLayerPropertyChanges(before, after, commands, layerId, klass, command) {\n  before = before || {};\n  after = after || {};\n  var prop;\n\n  for (prop in before) {\n    if (!before.hasOwnProperty(prop)) continue;\n\n    if (!deepEqual(before[prop], after[prop])) {\n      commands.push({\n        command: command,\n        args: [layerId, prop, after[prop], klass]\n      });\n    }\n  }\n\n  for (prop in after) {\n    if (!after.hasOwnProperty(prop) || before.hasOwnProperty(prop)) continue;\n\n    if (!deepEqual(before[prop], after[prop])) {\n      commands.push({\n        command: command,\n        args: [layerId, prop, after[prop], klass]\n      });\n    }\n  }\n}\n\nfunction pluckId(layer) {\n  return layer.id;\n}\n\nfunction indexById(group, layer) {\n  group[layer.id] = layer;\n  return group;\n}\n\nfunction diffLayers(before, after, commands) {\n  before = before || [];\n  after = after || [];\n  var beforeOrder = before.map(pluckId);\n  var afterOrder = after.map(pluckId);\n  var beforeIndex = before.reduce(indexById, {});\n  var afterIndex = after.reduce(indexById, {});\n  var tracker = beforeOrder.slice();\n  var clean = Object.create(null);\n  var i, d, layerId, beforeLayer, afterLayer, insertBeforeLayerId, prop;\n\n  for (i = 0, d = 0; i < beforeOrder.length; i++) {\n    layerId = beforeOrder[i];\n\n    if (!afterIndex.hasOwnProperty(layerId)) {\n      commands.push({\n        command: operations.removeLayer,\n        args: [layerId]\n      });\n      tracker.splice(tracker.indexOf(layerId, d), 1);\n    } else {\n      d++;\n    }\n  }\n\n  for (i = 0, d = 0; i < afterOrder.length; i++) {\n    layerId = afterOrder[afterOrder.length - 1 - i];\n    if (tracker[tracker.length - 1 - i] === layerId) continue;\n\n    if (beforeIndex.hasOwnProperty(layerId)) {\n      commands.push({\n        command: operations.removeLayer,\n        args: [layerId]\n      });\n      tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);\n    } else {\n      d++;\n    }\n\n    insertBeforeLayerId = tracker[tracker.length - i];\n    commands.push({\n      command: operations.addLayer,\n      args: [afterIndex[layerId], insertBeforeLayerId]\n    });\n    tracker.splice(tracker.length - i, 0, layerId);\n    clean[layerId] = true;\n  }\n\n  for (i = 0; i < afterOrder.length; i++) {\n    layerId = afterOrder[i];\n    beforeLayer = beforeIndex[layerId];\n    afterLayer = afterIndex[layerId];\n    if (clean[layerId] || deepEqual(beforeLayer, afterLayer)) continue;\n\n    if (!deepEqual(beforeLayer.source, afterLayer.source) || !deepEqual(beforeLayer[\'source-layer\'], afterLayer[\'source-layer\']) || !deepEqual(beforeLayer.type, afterLayer.type)) {\n      commands.push({\n        command: operations.removeLayer,\n        args: [layerId]\n      });\n      insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];\n      commands.push({\n        command: operations.addLayer,\n        args: [afterLayer, insertBeforeLayerId]\n      });\n      continue;\n    }\n\n    diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, operations.setLayoutProperty);\n    diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, operations.setPaintProperty);\n\n    if (!deepEqual(beforeLayer.filter, afterLayer.filter)) {\n      commands.push({\n        command: operations.setFilter,\n        args: [layerId, afterLayer.filter]\n      });\n    }\n\n    if (!deepEqual(beforeLayer.minzoom, afterLayer.minzoom) || !deepEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {\n      commands.push({\n        command: operations.setLayerZoomRange,\n        args: [layerId, afterLayer.minzoom, afterLayer.maxzoom]\n      });\n    }\n\n    for (prop in beforeLayer) {\n      if (!beforeLayer.hasOwnProperty(prop)) continue;\n      if (prop === \'layout\' || prop === \'paint\' || prop === \'filter\' || prop === \'metadata\' || prop === \'minzoom\' || prop === \'maxzoom\') continue;\n\n      if (prop.indexOf(\'paint.\') === 0) {\n        diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\n      } else if (!deepEqual(beforeLayer[prop], afterLayer[prop])) {\n        commands.push({\n          command: operations.setLayerProperty,\n          args: [layerId, prop, afterLayer[prop]]\n        });\n      }\n    }\n\n    for (prop in afterLayer) {\n      if (!afterLayer.hasOwnProperty(prop) || beforeLayer.hasOwnProperty(prop)) continue;\n      if (prop === \'layout\' || prop === \'paint\' || prop === \'filter\' || prop === \'metadata\' || prop === \'minzoom\' || prop === \'maxzoom\') continue;\n\n      if (prop.indexOf(\'paint.\') === 0) {\n        diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);\n      } else if (!deepEqual(beforeLayer[prop], afterLayer[prop])) {\n        commands.push({\n          command: operations.setLayerProperty,\n          args: [layerId, prop, afterLayer[prop]]\n        });\n      }\n    }\n  }\n}\n\nfunction diffStyles(before, after) {\n  if (!before) return [{\n    command: operations.setStyle,\n    args: [after]\n  }];\n  var commands = [];\n\n  try {\n    if (!deepEqual(before.version, after.version)) {\n      return [{\n        command: operations.setStyle,\n        args: [after]\n      }];\n    }\n\n    if (!deepEqual(before.center, after.center)) {\n      commands.push({\n        command: operations.setCenter,\n        args: [after.center]\n      });\n    }\n\n    if (!deepEqual(before.zoom, after.zoom)) {\n      commands.push({\n        command: operations.setZoom,\n        args: [after.zoom]\n      });\n    }\n\n    if (!deepEqual(before.bearing, after.bearing)) {\n      commands.push({\n        command: operations.setBearing,\n        args: [after.bearing]\n      });\n    }\n\n    if (!deepEqual(before.pitch, after.pitch)) {\n      commands.push({\n        command: operations.setPitch,\n        args: [after.pitch]\n      });\n    }\n\n    if (!deepEqual(before.sprite, after.sprite)) {\n      commands.push({\n        command: operations.setSprite,\n        args: [after.sprite]\n      });\n    }\n\n    if (!deepEqual(before.glyphs, after.glyphs)) {\n      commands.push({\n        command: operations.setGlyphs,\n        args: [after.glyphs]\n      });\n    }\n\n    if (!deepEqual(before.transition, after.transition)) {\n      commands.push({\n        command: operations.setTransition,\n        args: [after.transition]\n      });\n    }\n\n    if (!deepEqual(before.light, after.light)) {\n      commands.push({\n        command: operations.setLight,\n        args: [after.light]\n      });\n    }\n\n    if (!deepEqual(before.fog, after.fog)) {\n      commands.push({\n        command: operations.setFog,\n        args: [after.fog]\n      });\n    }\n\n    var sourcesRemoved = {};\n    var removeOrAddSourceCommands = [];\n    diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);\n    var beforeLayers = [];\n\n    if (before.layers) {\n      before.layers.forEach(function (layer) {\n        if (sourcesRemoved[layer.source]) {\n          commands.push({\n            command: operations.removeLayer,\n            args: [layer.id]\n          });\n        } else {\n          beforeLayers.push(layer);\n        }\n      });\n    }\n\n    var beforeTerrain = before.terrain;\n\n    if (beforeTerrain) {\n      if (sourcesRemoved[beforeTerrain.source]) {\n        commands.push({\n          command: operations.setTerrain,\n          args: [undefined]\n        });\n        beforeTerrain = undefined;\n      }\n    }\n\n    commands = commands.concat(removeOrAddSourceCommands);\n\n    if (!deepEqual(beforeTerrain, after.terrain)) {\n      commands.push({\n        command: operations.setTerrain,\n        args: [after.terrain]\n      });\n    }\n\n    diffLayers(beforeLayers, after.layers, commands);\n  } catch (e) {\n    console.warn(\'Unable to compute style diff:\', e);\n    commands = [{\n      command: operations.setStyle,\n      args: [after]\n    }];\n  }\n\n  return commands;\n}\n\nvar ValidationError = function ValidationError(key, value, message, identifier) {\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ValidationError);\n\n  this.message = (key ? "".concat(key, ": ") : \'\') + message;\n  if (identifier) this.identifier = identifier;\n\n  if (value !== null && value !== undefined && value.__line__) {\n    this.line = value.__line__;\n  }\n};\n\nvar ParsingError$1 = function ParsingError$1(error) {\n  (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)(this, ParsingError$1);\n\n  this.error = error;\n  this.message = error.message;\n  var match = error.message.match(/line (\\d+)/);\n  this.line = match ? parseInt(match[1], 10) : 0;\n};\n\nfunction validateConstants(options) {\n  var key = options.key;\n  var constants = options.value;\n\n  if (constants) {\n    return [new ValidationError(key, constants, \'constants have been deprecated as of v8\')];\n  } else {\n    return [];\n  }\n}\n\nfunction unbundle(value) {\n  if (value instanceof Number || value instanceof String || value instanceof Boolean) {\n    return value.valueOf();\n  } else {\n    return value;\n  }\n}\n\nfunction deepUnbundle(value) {\n  if (Array.isArray(value)) {\n    return value.map(deepUnbundle);\n  } else if (value instanceof Object && !(value instanceof Number || value instanceof String || value instanceof Boolean)) {\n    var unbundledValue = {};\n\n    for (var key in value) {\n      unbundledValue[key] = deepUnbundle(value[key]);\n    }\n\n    return unbundledValue;\n  }\n\n  return unbundle(value);\n}\n\nfunction validateObject(options) {\n  var key = options.key;\n  var object = options.value;\n  var elementSpecs = options.valueSpec || {};\n  var elementValidators = options.objectElementValidators || {};\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n  var errors = [];\n  var type = getType(object);\n\n  if (type !== \'object\') {\n    return [new ValidationError(key, object, "object expected, ".concat(type, " found"))];\n  }\n\n  for (var objectKey in object) {\n    var elementSpecKey = objectKey.split(\'.\')[0];\n    var elementSpec = elementSpecs[elementSpecKey] || elementSpecs[\'*\'];\n    var validateElement = void 0;\n\n    if (elementValidators[elementSpecKey]) {\n      validateElement = elementValidators[elementSpecKey];\n    } else if (elementSpecs[elementSpecKey]) {\n      validateElement = validate;\n    } else if (elementValidators[\'*\']) {\n      validateElement = elementValidators[\'*\'];\n    } else if (elementSpecs[\'*\']) {\n      validateElement = validate;\n    } else {\n      errors.push(new ValidationError(key, object[objectKey], "unknown property \\"".concat(objectKey, "\\"")));\n      continue;\n    }\n\n    errors = errors.concat(validateElement({\n      key: (key ? "".concat(key, ".") : key) + objectKey,\n      value: object[objectKey],\n      valueSpec: elementSpec,\n      style: style,\n      styleSpec: styleSpec,\n      object: object,\n      objectKey: objectKey\n    }, object));\n  }\n\n  for (var _elementSpecKey in elementSpecs) {\n    if (elementValidators[_elementSpecKey]) {\n      continue;\n    }\n\n    if (elementSpecs[_elementSpecKey].required && elementSpecs[_elementSpecKey][\'default\'] === undefined && object[_elementSpecKey] === undefined) {\n      errors.push(new ValidationError(key, object, "missing required property \\"".concat(_elementSpecKey, "\\"")));\n    }\n  }\n\n  return errors;\n}\n\nfunction validateArray(options) {\n  var array = options.value;\n  var arraySpec = options.valueSpec;\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n  var key = options.key;\n  var validateArrayElement = options.arrayElementValidator || validate;\n\n  if (getType(array) !== \'array\') {\n    return [new ValidationError(key, array, "array expected, ".concat(getType(array), " found"))];\n  }\n\n  if (arraySpec.length && array.length !== arraySpec.length) {\n    return [new ValidationError(key, array, "array length ".concat(arraySpec.length, " expected, length ").concat(array.length, " found"))];\n  }\n\n  if (arraySpec[\'min-length\'] && array.length < arraySpec[\'min-length\']) {\n    return [new ValidationError(key, array, "array length at least ".concat(arraySpec[\'min-length\'], " expected, length ").concat(array.length, " found"))];\n  }\n\n  var arrayElementSpec = {\n    \'type\': arraySpec.value,\n    \'values\': arraySpec.values,\n    \'minimum\': arraySpec.minimum,\n    \'maximum\': arraySpec.maximum\n  };\n\n  if (styleSpec.$version < 7) {\n    arrayElementSpec.function = arraySpec.function;\n  }\n\n  if (getType(arraySpec.value) === \'object\') {\n    arrayElementSpec = arraySpec.value;\n  }\n\n  var errors = [];\n\n  for (var i = 0; i < array.length; i++) {\n    errors = errors.concat(validateArrayElement({\n      array: array,\n      arrayIndex: i,\n      value: array[i],\n      valueSpec: arrayElementSpec,\n      style: style,\n      styleSpec: styleSpec,\n      key: "".concat(key, "[").concat(i, "]")\n    }));\n  }\n\n  return errors;\n}\n\nfunction validateNumber(options) {\n  var key = options.key;\n  var value = options.value;\n  var valueSpec = options.valueSpec;\n  var type = getType(value);\n\n  if (type === \'number\' && value !== value) {\n    type = \'NaN\';\n  }\n\n  if (type !== \'number\') {\n    return [new ValidationError(key, value, "number expected, ".concat(type, " found"))];\n  }\n\n  if (\'minimum\' in valueSpec) {\n    var specMin = valueSpec.minimum;\n\n    if (getType(valueSpec.minimum) === \'array\') {\n      var i = options.arrayIndex;\n      specMin = valueSpec.minimum[i];\n    }\n\n    if (value < specMin) {\n      return [new ValidationError(key, value, "".concat(value, " is less than the minimum value ").concat(specMin))];\n    }\n  }\n\n  if (\'maximum\' in valueSpec) {\n    var specMax = valueSpec.maximum;\n\n    if (getType(valueSpec.maximum) === \'array\') {\n      var _i9 = options.arrayIndex;\n      specMax = valueSpec.maximum[_i9];\n    }\n\n    if (value > specMax) {\n      return [new ValidationError(key, value, "".concat(value, " is greater than the maximum value ").concat(specMax))];\n    }\n  }\n\n  return [];\n}\n\nfunction validateFunction(options) {\n  var functionValueSpec = options.valueSpec;\n  var functionType = unbundle(options.value.type);\n  var stopKeyType;\n  var stopDomainValues = {};\n  var previousStopDomainValue;\n  var previousStopDomainZoom;\n  var isZoomFunction = functionType !== \'categorical\' && options.value.property === undefined;\n  var isPropertyFunction = !isZoomFunction;\n  var isZoomAndPropertyFunction = getType(options.value.stops) === \'array\' && getType(options.value.stops[0]) === \'array\' && getType(options.value.stops[0][0]) === \'object\';\n  var errors = validateObject({\n    key: options.key,\n    value: options.value,\n    valueSpec: options.styleSpec.function,\n    style: options.style,\n    styleSpec: options.styleSpec,\n    objectElementValidators: {\n      stops: validateFunctionStops,\n      default: validateFunctionDefault\n    }\n  });\n\n  if (functionType === \'identity\' && isZoomFunction) {\n    errors.push(new ValidationError(options.key, options.value, \'missing required property "property"\'));\n  }\n\n  if (functionType !== \'identity\' && !options.value.stops) {\n    errors.push(new ValidationError(options.key, options.value, \'missing required property "stops"\'));\n  }\n\n  if (functionType === \'exponential\' && options.valueSpec.expression && !supportsInterpolation(options.valueSpec)) {\n    errors.push(new ValidationError(options.key, options.value, \'exponential functions not supported\'));\n  }\n\n  if (options.styleSpec.$version >= 8) {\n    if (isPropertyFunction && !supportsPropertyExpression(options.valueSpec)) {\n      errors.push(new ValidationError(options.key, options.value, \'property functions not supported\'));\n    } else if (isZoomFunction && !supportsZoomExpression(options.valueSpec)) {\n      errors.push(new ValidationError(options.key, options.value, \'zoom functions not supported\'));\n    }\n  }\n\n  if ((functionType === \'categorical\' || isZoomAndPropertyFunction) && options.value.property === undefined) {\n    errors.push(new ValidationError(options.key, options.value, \'"property" property is required\'));\n  }\n\n  return errors;\n\n  function validateFunctionStops(options) {\n    if (functionType === \'identity\') {\n      return [new ValidationError(options.key, options.value, \'identity function may not have a "stops" property\')];\n    }\n\n    var errors = [];\n    var value = options.value;\n    errors = errors.concat(validateArray({\n      key: options.key,\n      value: value,\n      valueSpec: options.valueSpec,\n      style: options.style,\n      styleSpec: options.styleSpec,\n      arrayElementValidator: validateFunctionStop\n    }));\n\n    if (getType(value) === \'array\' && value.length === 0) {\n      errors.push(new ValidationError(options.key, value, \'array must have at least one stop\'));\n    }\n\n    return errors;\n  }\n\n  function validateFunctionStop(options) {\n    var errors = [];\n    var value = options.value;\n    var key = options.key;\n\n    if (getType(value) !== \'array\') {\n      return [new ValidationError(key, value, "array expected, ".concat(getType(value), " found"))];\n    }\n\n    if (value.length !== 2) {\n      return [new ValidationError(key, value, "array length 2 expected, length ".concat(value.length, " found"))];\n    }\n\n    if (isZoomAndPropertyFunction) {\n      if (getType(value[0]) !== \'object\') {\n        return [new ValidationError(key, value, "object expected, ".concat(getType(value[0]), " found"))];\n      }\n\n      if (value[0].zoom === undefined) {\n        return [new ValidationError(key, value, \'object stop key must have zoom\')];\n      }\n\n      if (value[0].value === undefined) {\n        return [new ValidationError(key, value, \'object stop key must have value\')];\n      }\n\n      if (previousStopDomainZoom && previousStopDomainZoom > unbundle(value[0].zoom)) {\n        return [new ValidationError(key, value[0].zoom, \'stop zoom values must appear in ascending order\')];\n      }\n\n      if (unbundle(value[0].zoom) !== previousStopDomainZoom) {\n        previousStopDomainZoom = unbundle(value[0].zoom);\n        previousStopDomainValue = undefined;\n        stopDomainValues = {};\n      }\n\n      errors = errors.concat(validateObject({\n        key: "".concat(key, "[0]"),\n        value: value[0],\n        valueSpec: {\n          zoom: {}\n        },\n        style: options.style,\n        styleSpec: options.styleSpec,\n        objectElementValidators: {\n          zoom: validateNumber,\n          value: validateStopDomainValue\n        }\n      }));\n    } else {\n      errors = errors.concat(validateStopDomainValue({\n        key: "".concat(key, "[0]"),\n        value: value[0],\n        valueSpec: {},\n        style: options.style,\n        styleSpec: options.styleSpec\n      }, value));\n    }\n\n    if (isExpression(deepUnbundle(value[1]))) {\n      return errors.concat([new ValidationError("".concat(key, "[1]"), value[1], \'expressions are not allowed in function stops.\')]);\n    }\n\n    return errors.concat(validate({\n      key: "".concat(key, "[1]"),\n      value: value[1],\n      valueSpec: functionValueSpec,\n      style: options.style,\n      styleSpec: options.styleSpec\n    }));\n  }\n\n  function validateStopDomainValue(options, stop) {\n    var type = getType(options.value);\n    var value = unbundle(options.value);\n    var reportValue = options.value !== null ? options.value : stop;\n\n    if (!stopKeyType) {\n      stopKeyType = type;\n    } else if (type !== stopKeyType) {\n      return [new ValidationError(options.key, reportValue, "".concat(type, " stop domain type must match previous stop domain type ").concat(stopKeyType))];\n    }\n\n    if (type !== \'number\' && type !== \'string\' && type !== \'boolean\') {\n      return [new ValidationError(options.key, reportValue, \'stop domain value must be a number, string, or boolean\')];\n    }\n\n    if (type !== \'number\' && functionType !== \'categorical\') {\n      var message = "number expected, ".concat(type, " found");\n\n      if (supportsPropertyExpression(functionValueSpec) && functionType === undefined) {\n        message += \'\\nIf you intended to use a categorical function, specify `"type": "categorical"`.\';\n      }\n\n      return [new ValidationError(options.key, reportValue, message)];\n    }\n\n    if (functionType === \'categorical\' && type === \'number\' && (!isFinite(value) || Math.floor(value) !== value)) {\n      return [new ValidationError(options.key, reportValue, "integer expected, found ".concat(value))];\n    }\n\n    if (functionType !== \'categorical\' && type === \'number\' && previousStopDomainValue !== undefined && value < previousStopDomainValue) {\n      return [new ValidationError(options.key, reportValue, \'stop domain values must appear in ascending order\')];\n    } else {\n      previousStopDomainValue = value;\n    }\n\n    if (functionType === \'categorical\' && value in stopDomainValues) {\n      return [new ValidationError(options.key, reportValue, \'stop domain values must be unique\')];\n    } else {\n      stopDomainValues[value] = true;\n    }\n\n    return [];\n  }\n\n  function validateFunctionDefault(options) {\n    return validate({\n      key: options.key,\n      value: options.value,\n      valueSpec: functionValueSpec,\n      style: options.style,\n      styleSpec: options.styleSpec\n    });\n  }\n}\n\nfunction validateExpression(options) {\n  var expression = (options.expressionContext === \'property\' ? createPropertyExpression : createExpression)(deepUnbundle(options.value), options.valueSpec);\n\n  if (expression.result === \'error\') {\n    return expression.value.map(function (error) {\n      return new ValidationError("".concat(options.key).concat(error.key), options.value, error.message);\n    });\n  }\n\n  var expressionObj = expression.value.expression || expression.value._styleExpression.expression;\n\n  if (options.expressionContext === \'property\' && options.propertyKey === \'text-font\' && !expressionObj.outputDefined()) {\n    return [new ValidationError(options.key, options.value, "Invalid data expression for \\"".concat(options.propertyKey, "\\". Output values must be contained as literals within the expression."))];\n  }\n\n  if (options.expressionContext === \'property\' && options.propertyType === \'layout\' && !isStateConstant(expressionObj)) {\n    return [new ValidationError(options.key, options.value, \'"feature-state" data expressions are not supported with layout properties.\')];\n  }\n\n  if (options.expressionContext === \'filter\' && !isStateConstant(expressionObj)) {\n    return [new ValidationError(options.key, options.value, \'"feature-state" data expressions are not supported with filters.\')];\n  }\n\n  if (options.expressionContext && options.expressionContext.indexOf(\'cluster\') === 0) {\n    if (!isGlobalPropertyConstant(expressionObj, [\'zoom\', \'feature-state\'])) {\n      return [new ValidationError(options.key, options.value, \'"zoom" and "feature-state" expressions are not supported with cluster properties.\')];\n    }\n\n    if (options.expressionContext === \'cluster-initial\' && !isFeatureConstant(expressionObj)) {\n      return [new ValidationError(options.key, options.value, \'Feature data expressions are not supported with initial expression part of cluster properties.\')];\n    }\n  }\n\n  return [];\n}\n\nfunction validateBoolean(options) {\n  var value = options.value;\n  var key = options.key;\n  var type = getType(value);\n\n  if (type !== \'boolean\') {\n    return [new ValidationError(key, value, "boolean expected, ".concat(type, " found"))];\n  }\n\n  return [];\n}\n\nfunction validateColor(options) {\n  var key = options.key;\n  var value = options.value;\n  var type = getType(value);\n\n  if (type !== \'string\') {\n    return [new ValidationError(key, value, "color expected, ".concat(type, " found"))];\n  }\n\n  if (csscolorparser.parseCSSColor(value) === null) {\n    return [new ValidationError(key, value, "color expected, \\"".concat(value, "\\" found"))];\n  }\n\n  return [];\n}\n\nfunction validateEnum(options) {\n  var key = options.key;\n  var value = options.value;\n  var valueSpec = options.valueSpec;\n  var errors = [];\n\n  if (Array.isArray(valueSpec.values)) {\n    if (valueSpec.values.indexOf(unbundle(value)) === -1) {\n      errors.push(new ValidationError(key, value, "expected one of [".concat(valueSpec.values.join(\', \'), "], ").concat(JSON.stringify(value), " found")));\n    }\n  } else {\n    if (Object.keys(valueSpec.values).indexOf(unbundle(value)) === -1) {\n      errors.push(new ValidationError(key, value, "expected one of [".concat(Object.keys(valueSpec.values).join(\', \'), "], ").concat(JSON.stringify(value), " found")));\n    }\n  }\n\n  return errors;\n}\n\nfunction validateFilter(options) {\n  if (isExpressionFilter(deepUnbundle(options.value))) {\n    return validateExpression(extend({}, options, {\n      expressionContext: \'filter\',\n      valueSpec: {\n        value: \'boolean\'\n      }\n    }));\n  } else {\n    return validateNonExpressionFilter(options);\n  }\n}\n\nfunction validateNonExpressionFilter(options) {\n  var value = options.value;\n  var key = options.key;\n\n  if (getType(value) !== \'array\') {\n    return [new ValidationError(key, value, "array expected, ".concat(getType(value), " found"))];\n  }\n\n  var styleSpec = options.styleSpec;\n  var type;\n  var errors = [];\n\n  if (value.length < 1) {\n    return [new ValidationError(key, value, \'filter array must have at least 1 element\')];\n  }\n\n  errors = errors.concat(validateEnum({\n    key: "".concat(key, "[0]"),\n    value: value[0],\n    valueSpec: styleSpec.filter_operator,\n    style: options.style,\n    styleSpec: options.styleSpec\n  }));\n\n  switch (unbundle(value[0])) {\n    case \'<\':\n    case \'<=\':\n    case \'>\':\n    case \'>=\':\n      if (value.length >= 2 && unbundle(value[1]) === \'$type\') {\n        errors.push(new ValidationError(key, value, "\\"$type\\" cannot be use with operator \\"".concat(value[0], "\\"")));\n      }\n\n    case \'==\':\n    case \'!=\':\n      if (value.length !== 3) {\n        errors.push(new ValidationError(key, value, "filter array for operator \\"".concat(value[0], "\\" must have 3 elements")));\n      }\n\n    case \'in\':\n    case \'!in\':\n      if (value.length >= 2) {\n        type = getType(value[1]);\n\n        if (type !== \'string\') {\n          errors.push(new ValidationError("".concat(key, "[1]"), value[1], "string expected, ".concat(type, " found")));\n        }\n      }\n\n      for (var i = 2; i < value.length; i++) {\n        type = getType(value[i]);\n\n        if (unbundle(value[1]) === \'$type\') {\n          errors = errors.concat(validateEnum({\n            key: "".concat(key, "[").concat(i, "]"),\n            value: value[i],\n            valueSpec: styleSpec.geometry_type,\n            style: options.style,\n            styleSpec: options.styleSpec\n          }));\n        } else if (type !== \'string\' && type !== \'number\' && type !== \'boolean\') {\n          errors.push(new ValidationError("".concat(key, "[").concat(i, "]"), value[i], "string, number, or boolean expected, ".concat(type, " found")));\n        }\n      }\n\n      break;\n\n    case \'any\':\n    case \'all\':\n    case \'none\':\n      for (var _i10 = 1; _i10 < value.length; _i10++) {\n        errors = errors.concat(validateNonExpressionFilter({\n          key: "".concat(key, "[").concat(_i10, "]"),\n          value: value[_i10],\n          style: options.style,\n          styleSpec: options.styleSpec\n        }));\n      }\n\n      break;\n\n    case \'has\':\n    case \'!has\':\n      type = getType(value[1]);\n\n      if (value.length !== 2) {\n        errors.push(new ValidationError(key, value, "filter array for \\"".concat(value[0], "\\" operator must have 2 elements")));\n      } else if (type !== \'string\') {\n        errors.push(new ValidationError("".concat(key, "[1]"), value[1], "string expected, ".concat(type, " found")));\n      }\n\n      break;\n\n    case \'within\':\n      type = getType(value[1]);\n\n      if (value.length !== 2) {\n        errors.push(new ValidationError(key, value, "filter array for \\"".concat(value[0], "\\" operator must have 2 elements")));\n      } else if (type !== \'object\') {\n        errors.push(new ValidationError("".concat(key, "[1]"), value[1], "object expected, ".concat(type, " found")));\n      }\n\n      break;\n  }\n\n  return errors;\n}\n\nfunction validateProperty(options, propertyType) {\n  var key = options.key;\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n  var value = options.value;\n  var propertyKey = options.objectKey;\n  var layerSpec = styleSpec["".concat(propertyType, "_").concat(options.layerType)];\n  if (!layerSpec) return [];\n  var transitionMatch = propertyKey.match(/^(.*)-transition$/);\n\n  if (propertyType === \'paint\' && transitionMatch && layerSpec[transitionMatch[1]] && layerSpec[transitionMatch[1]].transition) {\n    return validate({\n      key: key,\n      value: value,\n      valueSpec: styleSpec.transition,\n      style: style,\n      styleSpec: styleSpec\n    });\n  }\n\n  var valueSpec = options.valueSpec || layerSpec[propertyKey];\n\n  if (!valueSpec) {\n    return [new ValidationError(key, value, "unknown property \\"".concat(propertyKey, "\\""))];\n  }\n\n  var tokenMatch;\n\n  if (getType(value) === \'string\' && supportsPropertyExpression(valueSpec) && !valueSpec.tokens && (tokenMatch = /^{([^}]+)}$/.exec(value))) {\n    return [new ValidationError(key, value, "\\"".concat(propertyKey, "\\" does not support interpolation syntax\\n") + "Use an identity property function instead: `{ \\"type\\": \\"identity\\", \\"property\\": ".concat(JSON.stringify(tokenMatch[1]), " }`."))];\n  }\n\n  var errors = [];\n\n  if (options.layerType === \'symbol\') {\n    if (propertyKey === \'text-field\' && style && !style.glyphs) {\n      errors.push(new ValidationError(key, value, \'use of "text-field" requires a style "glyphs" property\'));\n    }\n\n    if (propertyKey === \'text-font\' && isFunction$1(deepUnbundle(value)) && unbundle(value.type) === \'identity\') {\n      errors.push(new ValidationError(key, value, \'"text-font" does not support identity functions\'));\n    }\n  }\n\n  return errors.concat(validate({\n    key: options.key,\n    value: value,\n    valueSpec: valueSpec,\n    style: style,\n    styleSpec: styleSpec,\n    expressionContext: \'property\',\n    propertyType: propertyType,\n    propertyKey: propertyKey\n  }));\n}\n\nfunction validatePaintProperty(options) {\n  return validateProperty(options, \'paint\');\n}\n\nfunction validateLayoutProperty(options) {\n  return validateProperty(options, \'layout\');\n}\n\nfunction validateLayer(options) {\n  var errors = [];\n  var layer = options.value;\n  var key = options.key;\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n\n  if (!layer.type && !layer.ref) {\n    errors.push(new ValidationError(key, layer, \'either "type" or "ref" is required\'));\n  }\n\n  var type = unbundle(layer.type);\n  var ref = unbundle(layer.ref);\n\n  if (layer.id) {\n    var layerId = unbundle(layer.id);\n\n    for (var i = 0; i < options.arrayIndex; i++) {\n      var otherLayer = style.layers[i];\n\n      if (unbundle(otherLayer.id) === layerId) {\n        errors.push(new ValidationError(key, layer.id, "duplicate layer id \\"".concat(layer.id, "\\", previously used at line ").concat(otherLayer.id.__line__)));\n      }\n    }\n  }\n\n  if (\'ref\' in layer) {\n    [\'type\', \'source\', \'source-layer\', \'filter\', \'layout\'].forEach(function (p) {\n      if (p in layer) {\n        errors.push(new ValidationError(key, layer[p], "\\"".concat(p, "\\" is prohibited for ref layers")));\n      }\n    });\n    var parent;\n    style.layers.forEach(function (layer) {\n      if (unbundle(layer.id) === ref) parent = layer;\n    });\n\n    if (!parent) {\n      errors.push(new ValidationError(key, layer.ref, "ref layer \\"".concat(ref, "\\" not found")));\n    } else if (parent.ref) {\n      errors.push(new ValidationError(key, layer.ref, \'ref cannot reference another ref layer\'));\n    } else {\n      type = unbundle(parent.type);\n    }\n  } else if (!(type === \'background\' || type === \'sky\')) {\n    if (!layer.source) {\n      errors.push(new ValidationError(key, layer, \'missing required property "source"\'));\n    } else {\n      var _source2 = style.sources && style.sources[layer.source];\n\n      var sourceType = _source2 && unbundle(_source2.type);\n\n      if (!_source2) {\n        errors.push(new ValidationError(key, layer.source, "source \\"".concat(layer.source, "\\" not found")));\n      } else if (sourceType === \'vector\' && type === \'raster\') {\n        errors.push(new ValidationError(key, layer.source, "layer \\"".concat(layer.id, "\\" requires a raster source")));\n      } else if (sourceType === \'raster\' && type !== \'raster\') {\n        errors.push(new ValidationError(key, layer.source, "layer \\"".concat(layer.id, "\\" requires a vector source")));\n      } else if (sourceType === \'vector\' && !layer[\'source-layer\']) {\n        errors.push(new ValidationError(key, layer, "layer \\"".concat(layer.id, "\\" must specify a \\"source-layer\\"")));\n      } else if (sourceType === \'raster-dem\' && type !== \'hillshade\') {\n        errors.push(new ValidationError(key, layer.source, \'raster-dem source can only be used with layer type \\\'hillshade\\\'.\'));\n      } else if (type === \'line\' && layer.paint && layer.paint[\'line-gradient\'] && (sourceType !== \'geojson\' || !_source2.lineMetrics)) {\n        errors.push(new ValidationError(key, layer, "layer \\"".concat(layer.id, "\\" specifies a line-gradient, which requires a GeoJSON source with `lineMetrics` enabled.")));\n      }\n    }\n  }\n\n  errors = errors.concat(validateObject({\n    key: key,\n    value: layer,\n    valueSpec: styleSpec.layer,\n    style: options.style,\n    styleSpec: options.styleSpec,\n    objectElementValidators: {\n      \'*\': function _() {\n        return [];\n      },\n      type: function type() {\n        return validate({\n          key: "".concat(key, ".type"),\n          value: layer.type,\n          valueSpec: styleSpec.layer.type,\n          style: options.style,\n          styleSpec: options.styleSpec,\n          object: layer,\n          objectKey: \'type\'\n        });\n      },\n      filter: validateFilter,\n      layout: function layout(options) {\n        return validateObject({\n          layer: layer,\n          key: options.key,\n          value: options.value,\n          style: options.style,\n          styleSpec: options.styleSpec,\n          objectElementValidators: {\n            \'*\': function _(options) {\n              return validateLayoutProperty(extend({\n                layerType: type\n              }, options));\n            }\n          }\n        });\n      },\n      paint: function paint(options) {\n        return validateObject({\n          layer: layer,\n          key: options.key,\n          value: options.value,\n          style: options.style,\n          styleSpec: options.styleSpec,\n          objectElementValidators: {\n            \'*\': function _(options) {\n              return validatePaintProperty(extend({\n                layerType: type\n              }, options));\n            }\n          }\n        });\n      }\n    }\n  }));\n  return errors;\n}\n\nfunction validateString(options) {\n  var value = options.value;\n  var key = options.key;\n  var type = getType(value);\n\n  if (type !== \'string\') {\n    return [new ValidationError(key, value, "string expected, ".concat(type, " found"))];\n  }\n\n  return [];\n}\n\nvar objectElementValidators = {\n  promoteId: validatePromoteId\n};\n\nfunction validateSource(options) {\n  var value = options.value;\n  var key = options.key;\n  var styleSpec = options.styleSpec;\n  var style = options.style;\n\n  if (!value.type) {\n    return [new ValidationError(key, value, \'"type" is required\')];\n  }\n\n  var type = unbundle(value.type);\n  var errors;\n\n  switch (type) {\n    case \'vector\':\n    case \'raster\':\n    case \'raster-dem\':\n      errors = validateObject({\n        key: key,\n        value: value,\n        valueSpec: styleSpec["source_".concat(type.replace(\'-\', \'_\'))],\n        style: options.style,\n        styleSpec: styleSpec,\n        objectElementValidators: objectElementValidators\n      });\n      return errors;\n\n    case \'geojson\':\n      errors = validateObject({\n        key: key,\n        value: value,\n        valueSpec: styleSpec.source_geojson,\n        style: style,\n        styleSpec: styleSpec,\n        objectElementValidators: objectElementValidators\n      });\n\n      if (value.cluster) {\n        for (var prop in value.clusterProperties) {\n          var _errors, _errors2;\n\n          var _value$clusterPropert = (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(value.clusterProperties[prop], 2),\n              operator = _value$clusterPropert[0],\n              mapExpr = _value$clusterPropert[1];\n\n          var reduceExpr = typeof operator === \'string\' ? [operator, [\'accumulated\'], [\'get\', prop]] : operator;\n\n          (_errors = errors).push.apply(_errors, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(validateExpression({\n            key: "".concat(key, ".").concat(prop, ".map"),\n            value: mapExpr,\n            expressionContext: \'cluster-map\'\n          })));\n\n          (_errors2 = errors).push.apply(_errors2, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(validateExpression({\n            key: "".concat(key, ".").concat(prop, ".reduce"),\n            value: reduceExpr,\n            expressionContext: \'cluster-reduce\'\n          })));\n        }\n      }\n\n      return errors;\n\n    case \'video\':\n      return validateObject({\n        key: key,\n        value: value,\n        valueSpec: styleSpec.source_video,\n        style: style,\n        styleSpec: styleSpec\n      });\n\n    case \'image\':\n      return validateObject({\n        key: key,\n        value: value,\n        valueSpec: styleSpec.source_image,\n        style: style,\n        styleSpec: styleSpec\n      });\n\n    case \'canvas\':\n      return [new ValidationError(key, null, "Please use runtime APIs to add canvas sources, rather than including them in stylesheets.", \'source.canvas\')];\n\n    default:\n      return validateEnum({\n        key: "".concat(key, ".type"),\n        value: value.type,\n        valueSpec: {\n          values: [\'vector\', \'raster\', \'raster-dem\', \'geojson\', \'video\', \'image\']\n        },\n        style: style,\n        styleSpec: styleSpec\n      });\n  }\n}\n\nfunction validatePromoteId(_ref113) {\n  var key = _ref113.key,\n      value = _ref113.value;\n\n  if (getType(value) === \'string\') {\n    return validateString({\n      key: key,\n      value: value\n    });\n  } else {\n    var errors = [];\n\n    for (var prop in value) {\n      errors.push.apply(errors, (0,_home_runner_work_justice40_tool_justice40_tool_client_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z)(validateString({\n        key: "".concat(key, ".").concat(prop),\n        value: value[prop]\n      })));\n    }\n\n    return errors;\n  }\n}\n\nfunction validateLight(options) {\n  var light = options.value;\n  var styleSpec = options.styleSpec;\n  var lightSpec = styleSpec.light;\n  var style = options.style;\n  var errors = [];\n  var rootType = getType(light);\n\n  if (light === undefined) {\n    return errors;\n  } else if (rootType !== \'object\') {\n    errors = errors.concat([new ValidationError(\'light\', light, "object expected, ".concat(rootType, " found"))]);\n    return errors;\n  }\n\n  for (var key in light) {\n    var transitionMatch = key.match(/^(.*)-transition$/);\n\n    if (transitionMatch && lightSpec[transitionMatch[1]] && lightSpec[transitionMatch[1]].transition) {\n      errors = errors.concat(validate({\n        key: key,\n        value: light[key],\n        valueSpec: styleSpec.transition,\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else if (lightSpec[key]) {\n      errors = errors.concat(validate({\n        key: key,\n        value: light[key],\n        valueSpec: lightSpec[key],\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else {\n      errors = errors.concat([new ValidationError(key, light[key], "unknown property \\"".concat(key, "\\""))]);\n    }\n  }\n\n  return errors;\n}\n\nfunction validateTerrain(options) {\n  var terrain = options.value;\n  var key = options.key;\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n  var terrainSpec = styleSpec.terrain;\n  var errors = [];\n  var rootType = getType(terrain);\n\n  if (terrain === undefined) {\n    return errors;\n  } else if (rootType !== \'object\') {\n    errors = errors.concat([new ValidationError(\'terrain\', terrain, "object expected, ".concat(rootType, " found"))]);\n    return errors;\n  }\n\n  for (var _key6 in terrain) {\n    var transitionMatch = _key6.match(/^(.*)-transition$/);\n\n    if (transitionMatch && terrainSpec[transitionMatch[1]] && terrainSpec[transitionMatch[1]].transition) {\n      errors = errors.concat(validate({\n        key: _key6,\n        value: terrain[_key6],\n        valueSpec: styleSpec.transition,\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else if (terrainSpec[_key6]) {\n      errors = errors.concat(validate({\n        key: _key6,\n        value: terrain[_key6],\n        valueSpec: terrainSpec[_key6],\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else {\n      errors = errors.concat([new ValidationError(_key6, terrain[_key6], "unknown property \\"".concat(_key6, "\\""))]);\n    }\n  }\n\n  if (!terrain.source) {\n    errors.push(new ValidationError(key, terrain, "terrain is missing required property \\"source\\""));\n  } else {\n    var _source3 = style.sources && style.sources[terrain.source];\n\n    var sourceType = _source3 && unbundle(_source3.type);\n\n    if (!_source3) {\n      errors.push(new ValidationError(key, terrain.source, "source \\"".concat(terrain.source, "\\" not found")));\n    } else if (sourceType !== \'raster-dem\') {\n      errors.push(new ValidationError(key, terrain.source, "terrain cannot be used with a source of type ".concat(sourceType, ", it only be used with a \\"raster-dem\\" source type")));\n    }\n  }\n\n  return errors;\n}\n\nfunction validateFog(options) {\n  var fog = options.value;\n  var style = options.style;\n  var styleSpec = options.styleSpec;\n  var fogSpec = styleSpec.fog;\n  var errors = [];\n  var rootType = getType(fog);\n\n  if (fog === undefined) {\n    return errors;\n  } else if (rootType !== \'object\') {\n    errors = errors.concat([new ValidationError(\'fog\', fog, "object expected, ".concat(rootType, " found"))]);\n    return errors;\n  }\n\n  if (fog.range && !isExpression(deepUnbundle(fog.range)) && fog.range[0] >= fog.range[1]) {\n    errors = errors.concat([new ValidationError(\'fog\', fog, \'fog.range[0] can\\\'t be greater than or equal to fog.range[1]\')]);\n  }\n\n  for (var key in fog) {\n    var transitionMatch = key.match(/^(.*)-transition$/);\n\n    if (transitionMatch && fogSpec[transitionMatch[1]] && fogSpec[transitionMatch[1]].transition) {\n      errors = errors.concat(validate({\n        key: key,\n        value: fog[key],\n        valueSpec: styleSpec.transition,\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else if (fogSpec[key]) {\n      errors = errors.concat(validate({\n        key: key,\n        value: fog[key],\n        valueSpec: fogSpec[key],\n        style: style,\n        styleSpec: styleSpec\n      }));\n    } else {\n      errors = errors.concat([new ValidationError(key, fog[key], "unknown property \\"".concat(key, "\\""))]);\n    }\n  }\n\n  return errors;\n}\n\nfunction validateFormatted(options) {\n  if (validateString(options).length === 0) {\n    return [];\n  }\n\n  return validateExpression(options);\n}\n\nfunction validateImage(options) {\n  if (validateString(options).length === 0) {\n    return [];\n  }\n\n  return validateExpression(options);\n}\n\nvar VALIDATORS = {\n  \'*\': function _() {\n    return [];\n  },\n  \'array\': validateArray,\n  \'boolean\': validateBoolean,\n  \'number\': validateNumber,\n  \'color\': validateColor,\n  \'constants\': validateConstants,\n  \'enum\': validateEnum,\n  \'filter\': validateFilter,\n  \'function\': validateFunction,\n  \'layer\': validateLayer,\n  \'object\': validateObject,\n  \'source\': validateSource,\n  \'light\': validateLight,\n  \'terrain\': validateTerrain,\n  \'fog\': validateFog,\n  \'string\': validateString,\n  \'formatted\': validateFormatted,\n  \'resolvedImage\': validateImage\n};\n\nfunction validate(options) {\n  var value = options.value;\n  var valueSpec = options.valueSpec;\n  var styleSpec = options.styleSpec;\n\n  if (valueSpec.expression && isFunction$1(unbundle(value))) {\n    return validateFunction(options);\n  } else if (valueSpec.expression && isExpression(deepUnbundle(value))) {\n    return validateExpression(options);\n  } else if (valueSpec.type && VALIDATORS[valueSpec.type]) {\n    return VALIDATORS[valueSpec.type](options);\n  } else {\n    var valid = validateObject(extend({}, options, {\n      valueSpec: valueSpec.type ? styleSpec[valueSpec.type] : valueSpec\n    }));\n    return valid;\n  }\n}\n\nfunction validateGlyphsURL(options) {\n  var value = options.value;\n  var key = options.key;\n  var errors = validateString(options);\n  if (errors.length) return errors;\n\n  if (value.indexOf(\'{fontstack}\') === -1) {\n    errors.push(new ValidationError(key, value, \'"glyphs" url must include a "{fontstack}" token\'));\n  }\n\n  if (value.indexOf(\'{range}\') === -1) {\n    errors.push(new ValidationError(key, value, \'"glyphs" url must include a "{range}" token\'));\n  }\n\n  return errors;\n}\n\nfunction validateStyleMin(style) {\n  var styleSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : v8;\n  var errors = [];\n  errors = errors.concat(validate({\n    key: \'\',\n    value: style,\n    valueSpec: styleSpec.$root,\n    styleSpec: styleSpec,\n    style: style,\n    objectElementValidators: {\n      glyphs: validateGlyphsURL,\n      \'*\': function _() {\n        return [];\n      }\n    }\n  }));\n\n  if (style.constants) {\n    errors = errors.concat(validateConstants({\n      key: \'constants\',\n      value: style.constants,\n      style: style,\n      styleSpec: styleSpec\n    }));\n  }\n\n  return sortErrors(errors);\n}\n\nvalidateStyleMin.source = wrapCleanErrors(validateSource);\nvalidateStyleMin.light = wrapCleanErrors(validateLight);\nvalidateStyleMin.terrain = wrapCleanErrors(validateTerrain);\nvalidateStyleMin.fog = wrapCleanErrors(validateFog);\nvalidateStyleMin.layer = wrapCleanErrors(validateLayer);\nvalidateStyleMin.filter = wrapCleanErrors(validateFilter);\nvalidateStyleMin.paintProperty = wrapCleanErrors(validatePaintProperty);\nvalidateStyleMin.layoutProperty = wrapCleanErrors(validateLayoutProperty);\n\nfunction sortErrors(errors) {\n  return [].concat(errors).sort(function (a, b) {\n    return a.line - b.line;\n  });\n}\n\nfunction wrapCleanErrors(inner) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    return sortErrors(inner.apply(this, args));\n  };\n}\n/* parser generated by jison 0.4.15 */\n\n\nvar jsonlint = createCommonjsModule(function (module, exports) {\n  /*\n    Returns a Parser object of the following structure:\n  \n    Parser: {\n      yy: {}\n    }\n  \n    Parser.prototype: {\n      yy: {},\n      trace: function(),\n      symbols_: {associative list: name ==> number},\n      terminals_: {associative list: number ==> name},\n      productions_: [...],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n      table: [...],\n      defaultActions: {...},\n      parseError: function(str, hash),\n      parse: function(input),\n  \n      lexer: {\n          EOF: 1,\n          parseError: function(str, hash),\n          setInput: function(input),\n          input: function(),\n          unput: function(str),\n          more: function(),\n          less: function(n),\n          pastInput: function(),\n          upcomingInput: function(),\n          showPosition: function(),\n          test_match: function(regex_match_array, rule_index),\n          next: function(),\n          lex: function(),\n          begin: function(condition),\n          popState: function(),\n          _currentRules: function(),\n          topState: function(),\n          pushState: function(condition),\n  \n          options: {\n              ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n          },\n  \n          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n          rules: [...],\n          conditions: {associative list: name ==> set},\n      }\n    }\n  \n  \n    token location info (@$, _$, etc.): {\n      first_line: n,\n      last_line: n,\n      first_column: n,\n      last_column: n,\n      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n    }\n  \n  \n    the parseError function receives a \'hash\' object with these members for lexer and parser errors: {\n      text:        (matched text)\n      token:       (the produced terminal token, if any)\n      line:        (yylineno)\n    }\n    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n      loc:         (yylloc)\n      expected:    (string describing the set of expected tokens)\n      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n    }\n  */\n  var parser = function () {\n    var o = function o(k, v, _o, l) {\n      for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {\n        ;\n      }\n\n      return _o;\n    },\n        $V0 = [1, 12],\n        $V1 = [1, 13],\n        $V2 = [1, 9],\n        $V3 = [1, 10],\n        $V4 = [1, 11],\n        $V5 = [1, 14],\n        $V6 = [1, 15],\n        $V7 = [14, 18, 22, 24],\n        $V8 = [18, 22],\n        $V9 = [22, 24];\n\n    var parser = {\n      trace: function trace() {},\n      yy: {},\n      symbols_: {\n        "error": 2,\n        "JSONString": 3,\n        "STRING": 4,\n        "JSONNumber": 5,\n        "NUMBER": 6,\n        "JSONNullLiteral": 7,\n        "NULL": 8,\n        "JSONBooleanLiteral": 9,\n        "TRUE": 10,\n        "FALSE": 11,\n        "JSONText": 12,\n        "JSONValue": 13,\n        "EOF": 14,\n        "JSONObject": 15,\n        "JSONArray": 16,\n        "{": 17,\n        "}": 18,\n        "JSONMemberList": 19,\n        "JSONMember": 20,\n        ":": 21,\n        ",": 22,\n        "[": 23,\n        "]": 24,\n        "JSONElementList": 25,\n        "$accept": 0,\n        "$end": 1\n      },\n      terminals_: {\n        2: "error",\n        4: "STRING",\n        6: "NUMBER",\n        8: "NULL",\n        10: "TRUE",\n        11: "FALSE",\n        14: "EOF",\n        17: "{",\n        18: "}",\n        21: ":",\n        22: ",",\n        23: "[",\n        24: "]"\n      },\n      productions_: [0, [3, 1], [5, 1], [7, 1], [9, 1], [9, 1], [12, 2], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [15, 2], [15, 3], [20, 3], [19, 1], [19, 3], [16, 2], [16, 3], [25, 1], [25, 3]],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n      /* action[1] */\n      , $$\n      /* vstack */\n      , _$\n      /* lstack */\n      ) {\n        /* this == yyval */\n        var $0 = $$.length - 1;\n\n        switch (yystate) {\n          case 1:\n            // replace escaped characters with actual character\n            this.$ = new String(yytext.replace(/\\\\(\\\\|")/g, "$" + "1").replace(/\\\\n/g, \'\\n\').replace(/\\\\r/g, \'\\r\').replace(/\\\\t/g, \'\\t\').replace(/\\\\v/g, \'\\v\').replace(/\\\\f/g, \'\\f\').replace(/\\\\b/g, \'\\b\'));\n            this.$.__line__ = this._$.first_line;\n            break;\n\n          case 2:\n            this.$ = new Number(yytext);\n            this.$.__line__ = this._$.first_line;\n            break;\n\n          case 3:\n            this.$ = null;\n            break;\n\n          case 4:\n            this.$ = new Boolean(true);\n            this.$.__line__ = this._$.first_line;\n            break;\n\n          case 5:\n            this.$ = new Boolean(false);\n            this.$.__line__ = this._$.first_line;\n            break;\n\n          case 6:\n            return this.$ = $$[$0 - 1];\n\n          case 13:\n            this.$ = {};\n            Object.defineProperty(this.$, \'__line__\', {\n              value: this._$.first_line,\n              enumerable: false\n            });\n            break;\n\n          case 14:\n          case 19:\n            this.$ = $$[$0 - 1];\n            Object.defineProperty(this.$, \'__line__\', {\n              value: this._$.first_line,\n              enumerable: false\n            });\n            break;\n\n          case 15:\n            this.$ = [$$[$0 - 2], $$[$0]];\n            break;\n\n          case 16:\n            this.$ = {};\n            this.$[$$[$0][0]] = $$[$0][1];\n            break;\n\n          case 17:\n            this.$ = $$[$0 - 2];\n            $$[$0 - 2][$$[$0][0]] = $$[$0][1];\n            break;\n\n          case 18:\n            this.$ = [];\n            Object.defineProperty(this.$, \'__line__\', {\n              value: this._$.first_line,\n              enumerable: false\n            });\n            break;\n\n          case 20:\n            this.$ = [$$[$0]];\n            break;\n\n          case 21:\n            this.$ = $$[$0 - 2];\n            $$[$0 - 2].push($$[$0]);\n            break;\n        }\n      },\n      table: [{\n        3: 5,\n        4: $V0,\n        5: 6,\n        6: $V1,\n        7: 3,\n        8: $V2,\n        9: 4,\n        10: $V3,\n        11: $V4,\n        12: 1,\n        13: 2,\n        15: 7,\n        16: 8,\n        17: $V5,\n        23: $V6\n      }, {\n        1: [3]\n      }, {\n        14: [1, 16]\n      }, o($V7, [2, 7]), o($V7, [2, 8]), o($V7, [2, 9]), o($V7, [2, 10]), o($V7, [2, 11]), o($V7, [2, 12]), o($V7, [2, 3]), o($V7, [2, 4]), o($V7, [2, 5]), o([14, 18, 21, 22, 24], [2, 1]), o($V7, [2, 2]), {\n        3: 20,\n        4: $V0,\n        18: [1, 17],\n        19: 18,\n        20: 19\n      }, {\n        3: 5,\n        4: $V0,\n        5: 6,\n        6: $V1,\n        7: 3,\n        8: $V2,\n        9: 4,\n        10: $V3,\n        11: $V4,\n        13: 23,\n        15: 7,\n        16: 8,\n        17: $V5,\n        23: $V6,\n        24: [1, 21],\n        25: 22\n      }, {\n        1: [2, 6]\n      }, o($V7, [2, 13]), {\n        18: [1, 24],\n        22: [1, 25]\n      }, o($V8, [2, 16]), {\n        21: [1, 26]\n      }, o($V7, [2, 18]), {\n        22: [1, 28],\n        24: [1, 27]\n      }, o($V9, [2, 20]), o($V7, [2, 14]), {\n        3: 20,\n        4: $V0,\n        20: 29\n      }, {\n        3: 5,\n        4: $V0,\n        5: 6,\n        6: $V1,\n        7: 3,\n        8: $V2,\n        9: 4,\n        10: $V3,\n        11: $V4,\n        13: 30,\n        15: 7,\n        16: 8,\n        17: $V5,\n        23: $V6\n      }, o($V7, [2, 19]), {\n        3: 5,\n        4: $V0,\n        5: 6,\n        6: $V1,\n        7: 3,\n        8: $V2,\n        9: 4,\n        10: $V3,\n        11: $V4,\n        13: 31,\n        15: 7,\n        16: 8,\n        17: $V5,\n        23: $V6\n      }, o($V8, [2, 17]), o($V8, [2, 15]), o($V9, [2, 21])],\n      defaultActions: {\n        16: [2, 6]\n      },\n      parseError: function parseError(str, hash) {\n        if (hash.recoverable) {\n          this.trace(str);\n        } else {\n          throw new Error(str);\n        }\n      },\n      parse: function parse(input) {\n        var self = this,\n            stack = [0],\n            vstack = [null],\n            lstack = [],\n            table = this.table,\n            yytext = \'\',\n            yylineno = 0,\n            yyleng = 0,\n            TERROR = 2,\n            EOF = 1;\n        var args = lstack.slice.call(arguments, 1);\n        var lexer = Object.create(this.lexer);\n        var sharedState = {\n          yy: {}\n        };\n\n        for (var k in this.yy) {\n          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n          }\n        }\n\n        lexer.setInput(input, sharedState.yy);\n        sharedState.yy.lexer = lexer;\n        sharedState.yy.parser = this;\n\n        if (typeof lexer.yylloc == \'undefined\') {\n          lexer.yylloc = {};\n        }\n\n        var yyloc = lexer.yylloc;\n        lstack.push(yyloc);\n        var ranges = lexer.options && lexer.options.ranges;\n\n        if (typeof sharedState.yy.parseError === \'function\') {\n          this.parseError = sharedState.yy.parseError;\n        } else {\n          this.parseError = Object.getPrototypeOf(this).parseError;\n        }\n\n        function lex() {\n          var token;\n          token = lexer.lex() || EOF;\n\n          if (typeof token !== \'number\') {\n            token = self.symbols_[token] || token;\n          }\n\n          return token;\n        }\n\n        var symbol,\n            state,\n            action,\n            r,\n            yyval = {},\n            p,\n            len,\n            newState,\n            expected;\n\n        while (true) {\n          state = stack[stack.length - 1];\n\n          if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n          } else {\n            if (symbol === null || typeof symbol == \'undefined\') {\n              symbol = lex();\n            }\n\n            action = table[state] && table[state][symbol];\n          }\n\n          if (typeof action === \'undefined\' || !action.length || !action[0]) {\n            var errStr = \'\';\n            expected = [];\n\n            for (p in table[state]) {\n              if (this.terminals_[p] && p > TERROR) {\n                expected.push(\'\\\'\' + this.terminals_[p] + \'\\\'\');\n              }\n            }\n\n            if (lexer.showPosition) {\n              errStr = \'Parse error on line \' + (yylineno + 1) + \':\\n\' + lexer.showPosition() + \'\\nExpecting \' + expected.join(\', \') + \', got \\\'\' + (this.terminals_[symbol] || symbol) + \'\\\'\';\n            } else {\n              errStr = \'Parse error on line \' + (yylineno + 1) + \': Unexpected \' + (symbol == EOF ? \'end of input\' : \'\\\'\' + (this.terminals_[symbol] || symbol) + \'\\\'\');\n            }\n\n            this.parseError(errStr, {\n              text: lexer.match,\n              token: this.terminals_[symbol] || symbol,\n              line: lexer.yylineno,\n              loc: yyloc,\n              expected: expected\n            });\n          }\n\n          if (action[0] instanceof Array && action.length > 1) {\n            throw new Error(\'Parse Error: multiple actions possible at state: \' + state + \', token: \' + symbol);\n          }\n\n          switch (action[0]) {\n            case 1:\n              stack.push(symbol);\n              vstack.push(lexer.yytext);\n              lstack.push(lexer.yylloc);\n              stack.push(action[1]);\n              symbol = null;\n              {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n              }\n              break;\n\n            case 2:\n              len = this.productions_[action[1]][1];\n              yyval.$ = vstack[vstack.length - len];\n              yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n              };\n\n              if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n              }\n\n              r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n              if (typeof r !== \'undefined\') {\n                return r;\n              }\n\n              if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n              }\n\n              stack.push(this.productions_[action[1]][0]);\n              vstack.push(yyval.$);\n              lstack.push(yyval._$);\n              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n              stack.push(newState);\n              break;\n\n            case 3:\n              return true;\n          }\n        }\n\n        return true;\n      }\n    };\n    /* generated by jison-lex 0.3.4 */\n\n    var lexer = function () {\n      var lexer = {\n        EOF: 1,\n        parseError: function parseError(str, hash) {\n          if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n          } else {\n            throw new Error(str);\n          }\n        },\n        // resets the lexer, sets new input\n        setInput: function setInput(input, yy) {\n          this.yy = yy || this.yy || {};\n          this._input = input;\n          this._more = this._backtrack = this.done = false;\n          this.yylineno = this.yyleng = 0;\n          this.yytext = this.matched = this.match = \'\';\n          this.conditionStack = [\'INITIAL\'];\n          this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [0, 0];\n          }\n\n          this.offset = 0;\n          return this;\n        },\n        // consumes and returns one char from the input\n        input: function input() {\n          var ch = this._input[0];\n          this.yytext += ch;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch;\n          this.matched += ch;\n          var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n          } else {\n            this.yylloc.last_column++;\n          }\n\n          if (this.options.ranges) {\n            this.yylloc.range[1]++;\n          }\n\n          this._input = this._input.slice(1);\n          return ch;\n        },\n        // unshifts one char (or a string) into the input\n        unput: function unput(ch) {\n          var len = ch.length;\n          var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n          this._input = ch + this._input;\n          this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n          this.offset -= len;\n          var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n          this.match = this.match.substr(0, this.match.length - 1);\n          this.matched = this.matched.substr(0, this.matched.length - 1);\n\n          if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n          }\n\n          var r = this.yylloc.range;\n          this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n          }\n\n          this.yyleng = this.yytext.length;\n          return this;\n        },\n        // When called from action, caches matched text and appends it on next action\n        more: function more() {\n          this._more = true;\n          return this;\n        },\n        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n        reject: function reject() {\n          if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n          } else {\n            return this.parseError(\'Lexical error on line \' + (this.yylineno + 1) + \'. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\' + this.showPosition(), {\n              text: "",\n              token: null,\n              line: this.yylineno\n            });\n          }\n\n          return this;\n        },\n        // retain first n characters of the match\n        less: function less(n) {\n          this.unput(this.match.slice(n));\n        },\n        // displays already matched input, i.e. for error messages\n        pastInput: function pastInput() {\n          var past = this.matched.substr(0, this.matched.length - this.match.length);\n          return (past.length > 20 ? \'...\' : \'\') + past.substr(-20).replace(/\\n/g, "");\n        },\n        // displays upcoming input, i.e. for error messages\n        upcomingInput: function upcomingInput() {\n          var next = this.match;\n\n          if (next.length < 20) {\n            next += this._input.substr(0, 20 - next.length);\n          }\n\n          return (next.substr(0, 20) + (next.length > 20 ? \'...\' : \'\')).replace(/\\n/g, "");\n        },\n        // displays the character position where the lexing error occurred, i.e. for error messages\n        showPosition: function showPosition() {\n          var pre = this.pastInput();\n          var c = new Array(pre.length + 1).join("-");\n          return pre + this.upcomingInput() + "\\n" + c + "^";\n        },\n        // test the lexed token: return FALSE when not a match, otherwise return token\n        test_match: function test_match(match, indexed_rule) {\n          var token, lines, backup;\n\n          if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n              yylineno: this.yylineno,\n              yylloc: {\n                first_line: this.yylloc.first_line,\n                last_line: this.last_line,\n                first_column: this.yylloc.first_column,\n                last_column: this.yylloc.last_column\n              },\n              yytext: this.yytext,\n              match: this.match,\n              matches: this.matches,\n              matched: this.matched,\n              yyleng: this.yyleng,\n              offset: this.offset,\n              _more: this._more,\n              _input: this._input,\n              yy: this.yy,\n              conditionStack: this.conditionStack.slice(0),\n              done: this.done\n            };\n\n            if (this.options.ranges) {\n              backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n          }\n\n          lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno += lines.length;\n          }\n\n          this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n          };\n          this.yytext += match[0];\n          this.match += match[0];\n          this.matches = match;\n          this.yyleng = this.yytext.length;\n\n          if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n          }\n\n          this._more = false;\n          this._backtrack = false;\n          this._input = this._input.slice(match[0].length);\n          this.matched += match[0];\n          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n          if (this.done && this._input) {\n            this.done = false;\n          }\n\n          if (token) {\n            return token;\n          } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n              this[k] = backup[k];\n            }\n\n            return false; // rule action called reject() implying the next rule should be tested instead.\n          }\n\n          return false;\n        },\n        // return next match in input\n        next: function next() {\n          if (this.done) {\n            return this.EOF;\n          }\n\n          if (!this._input) {\n            this.done = true;\n          }\n\n          var token, match, tempMatch, index;\n\n          if (!this._more) {\n            this.yytext = \'\';\n            this.match = \'\';\n          }\n\n          var rules = this._currentRules();\n\n          for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n              match = tempMatch;\n              index = i;\n\n              if (this.options.backtrack_lexer) {\n                token = this.test_match(tempMatch, rules[i]);\n\n                if (token !== false) {\n                  return token;\n                } else if (this._backtrack) {\n                  match = false;\n                  continue; // rule action called reject() implying a rule MISmatch.\n                } else {\n                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                  return false;\n                }\n              } else if (!this.options.flex) {\n                break;\n              }\n            }\n          }\n\n          if (match) {\n            token = this.test_match(match, rules[index]);\n\n            if (token !== false) {\n              return token;\n            } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n            return false;\n          }\n\n          if (this._input === "") {\n            return this.EOF;\n          } else {\n            return this.parseError(\'Lexical error on line \' + (this.yylineno + 1) + \'. Unrecognized text.\\n\' + this.showPosition(), {\n              text: "",\n              token: null,\n              line: this.yylineno\n            });\n          }\n        },\n        // return next match that has a token\n        lex: function lex() {\n          var r = this.next();\n\n          if (r) {\n            return r;\n          } else {\n            return this.lex();\n          }\n        },\n        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n        begin: function begin(condition) {\n          this.conditionStack.push(condition);\n        },\n        // pop the previously active lexer condition state off the condition stack\n        popState: function popState() {\n          var n = this.conditionStack.length - 1;\n\n          if (n > 0) {\n            return this.conditionStack.pop();\n          } else {\n            return this.conditionStack[0];\n          }\n        },\n        // produce the lexer rule set which is active for the currently active lexer condition state\n        _currentRules: function _currentRules() {\n          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n          } else {\n            return this.conditions["INITIAL"].rules;\n          }\n        },\n        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n        topState: function topState(n) {\n          n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n          if (n >= 0) {\n            return this.conditionStack[n];\n          } else {\n            return "INITIAL";\n          }\n        },\n        // alias for begin(condition)\n        pushState: function pushState(condition) {\n          this.begin(condition);\n        },\n        // return the number of states currently on the stack\n        stateStackSize: function stateStackSize() {\n          return this.conditionStack.length;\n        },\n        options: {},\n        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n          switch ($avoiding_name_collisions) {\n            case 0:\n              /* skip whitespace */\n              break;\n\n            case 1:\n              return 6;\n\n            case 2:\n              yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);\n              return 4;\n\n            case 3:\n              return 17;\n\n            case 4:\n              return 18;\n\n            case 5:\n              return 23;\n\n            case 6:\n              return 24;\n\n            case 7:\n              return 22;\n\n            case 8:\n              return 21;\n\n            case 9:\n              return 10;\n\n            case 10:\n              return 11;\n\n            case 11:\n              return 8;\n\n            case 12:\n              return 14;\n\n            case 13:\n              return \'INVALID\';\n          }\n        },\n        rules: [/^(?:\\s+)/, /^(?:(-?([0-9]|[1-9][0-9]+))(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b)/, /^(?:"(?:\\\\[\\\\"bfnrt/]|\\\\u[a-fA-F0-9]{4}|[^\\\\\\0-\\x09\\x0a-\\x1f"])*")/, /^(?:\\{)/, /^(?:\\})/, /^(?:\\[)/, /^(?:\\])/, /^(?:,)/, /^(?::)/, /^(?:true\\b)/, /^(?:false\\b)/, /^(?:null\\b)/, /^(?:$)/, /^(?:.)/],\n        conditions: {\n          "INITIAL": {\n            "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n            "inclusive": true\n          }\n        }\n      };\n      return lexer;\n    }();\n\n    parser.lexer = lexer;\n\n    function Parser() {\n      this.yy = {};\n    }\n\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser();\n  }();\n\n  if (typeof commonjsRequire !== \'undefined\' && \'object\' !== \'undefined\') {\n    exports.parser = parser;\n    exports.Parser = parser.Parser;\n\n    exports.parse = function () {\n      return parser.parse.apply(parser, arguments);\n    };\n  }\n});\n\nfunction readStyle(style) {\n  if (style instanceof String || typeof style === \'string\' || style instanceof Buffer) {\n    try {\n      return jsonlint.parse(style.toString());\n    } catch (e) {\n      throw new ParsingError$1(e);\n    }\n  }\n\n  return style;\n}\n\nfunction validateStyle(style) {\n  var styleSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : v8;\n  var s = style;\n\n  try {\n    s = readStyle(s);\n  } catch (e) {\n    return [e];\n  }\n\n  return validateStyleMin(s, styleSpec);\n}\n\nvar SUPPORTED_SPEC_VERSION = 8;\nvar MAX_SOURCES_IN_STYLE = 15;\n\nfunction isValid(value, regex) {\n  if (!value || getType(value) !== \'string\') return true;\n  return !!value.match(regex);\n}\n\nfunction getSourceCount(source) {\n  if (source.url) {\n    return source.url.split(\',\').length;\n  } else {\n    return 0;\n  }\n}\n\nfunction getAllowedKeyErrors(obj, keys, path) {\n  var allowed = new Set(keys);\n  var errors = [];\n  Object.keys(obj).forEach(function (k) {\n    if (!allowed.has(k)) {\n      var prop = path ? "".concat(path, ".").concat(k) : null;\n      errors.push(new ValidationError(prop, obj[k], "Unsupported property \\"".concat(k, "\\"")));\n    }\n  });\n  return errors;\n}\n\nfunction getSourceErrors(source, i) {\n  var errors = [];\n  var sourceKeys = [\'type\', \'url\', \'tileSize\'];\n  errors.push.apply(errors, _toConsumableArray(getAllowedKeyErrors(source, sourceKeys, \'source\')));\n  var sourceUrlPattern = /^mapbox:\\/\\/([^/]*)$/;\n\n  if (!isValid(source.url, sourceUrlPattern)) {\n    errors.push(new ValidationError("sources[".concat(i, "]"), source.url, \'Source url must be a valid Mapbox tileset url\'));\n  }\n\n  return errors;\n}\n\nfunction getSourcesErrors(sources) {\n  var errors = [];\n  var count = 0;\n  Object.keys(sources).forEach(function (s, i) {\n    var sourceErrors = getSourceErrors(sources[s], i);\n\n    if (!sourceErrors.length) {\n      count = count + getSourceCount(sources[s]);\n    }\n\n    errors.push.apply(errors, _toConsumableArray(sourceErrors));\n  });\n\n  if (count > MAX_SOURCES_IN_STYLE) {\n    errors.push(new ValidationError(\'sources\', null, "Styles must contain ".concat(MAX_SOURCES_IN_STYLE, " or fewer sources")));\n  }\n\n  return errors;\n}\n\nfunction getRootErrors(style, specKeys) {\n  var errors = [];\n  var optionalRootProperties = [\'owner\', \'id\', \'cacheControl\', \'draft\', \'created\', \'modified\', \'visibility\'];\n  var allowedKeyErrors = getAllowedKeyErrors(style, [].concat(_toConsumableArray(specKeys), optionalRootProperties));\n  errors.push.apply(errors, _toConsumableArray(allowedKeyErrors));\n\n  if (style.version > SUPPORTED_SPEC_VERSION || style.version < SUPPORTED_SPEC_VERSION) {\n    errors.push(new ValidationError(\'version\', style.version, "Style version must be ".concat(SUPPORTED_SPEC_VERSION)));\n  }\n\n  var glyphUrlPattern = /^mapbox:\\/\\/fonts\\/([^/]*)\\/{fontstack}\\/{range}.pbf$/;\n\n  if (!isValid(style.glyphs, glyphUrlPattern)) {\n    errors.push(new ValidationError(\'glyphs\', style.glyphs, \'Styles must reference glyphs hosted by Mapbox\'));\n  }\n\n  var spriteUrlPattern = /^mapbox:\\/\\/sprites\\/([^/]*)\\/([^/]*)\\/?([^/]*)?$/;\n\n  if (!isValid(style.sprite, spriteUrlPattern)) {\n    errors.push(new ValidationError(\'sprite\', style.sprite, \'Styles must reference sprites hosted by Mapbox\'));\n  }\n\n  var visibilityPattern = /^(public|private)$/;\n\n  if (!isValid(style.visibility, visibilityPattern)) {\n    errors.push(new ValidationError(\'visibility\', style.visibility, \'Style visibility must be public or private\'));\n  }\n\n  return errors;\n}\n\nfunction validateMapboxApiSupported(style) {\n  var s = style;\n\n  try {\n    s = readStyle(s);\n  } catch (e) {\n    return [e];\n  }\n\n  var errors = validateStyleMin(s, v8).concat(getRootErrors(s, Object.keys(v8.$root)));\n\n  if (s.sources) {\n    errors = errors.concat(getSourcesErrors(s.sources));\n  }\n\n  return errors;\n}\n\nvar expression$1 = {\n  StyleExpression: StyleExpression,\n  isExpression: isExpression,\n  isExpressionFilter: isExpressionFilter,\n  createExpression: createExpression,\n  createPropertyExpression: createPropertyExpression,\n  normalizePropertyExpression: normalizePropertyExpression,\n  ZoomConstantExpression: ZoomConstantExpression,\n  ZoomDependentExpression: ZoomDependentExpression,\n  StylePropertyFunction: StylePropertyFunction\n};\nvar styleFunction = {\n  convertFunction: convertFunction,\n  createFunction: createFunction,\n  isFunction: isFunction$1\n};\nvar visit = {\n  eachSource: eachSource,\n  eachLayer: eachLayer,\n  eachProperty: eachProperty\n};\nvalidateStyle.parsed = validateStyle;\nvalidateStyle.latest = validateStyle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3022\n')}}]);